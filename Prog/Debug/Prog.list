
Prog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002150  08008188  08008188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800a2d8  0800a2d8  0000a2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2f0  0800a2f0  0001000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2f0  0800a2f0  0000a2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2f8  0800a2f8  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2f8  0800a2f8  0000a2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2fc  0800a2fc  0000a2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a300  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001000c  2**0
                  CONTENTS
 10 .bss          00000140  2000000c  2000000c  0001000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  0001000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000945c  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001705  00000000  00000000  00019498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  0001aba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000660  00000000  00000000  0001b2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002024d  00000000  00000000  0001b908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000098d2  00000000  00000000  0003bb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c18da  00000000  00000000  00045427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00106d01  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a54  00000000  00000000  00106d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008188 <__do_global_dtors_aux>:
 8008188:	b510      	push	{r4, lr}
 800818a:	4c05      	ldr	r4, [pc, #20]	; (80081a0 <__do_global_dtors_aux+0x18>)
 800818c:	7823      	ldrb	r3, [r4, #0]
 800818e:	b933      	cbnz	r3, 800819e <__do_global_dtors_aux+0x16>
 8008190:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <__do_global_dtors_aux+0x1c>)
 8008192:	b113      	cbz	r3, 800819a <__do_global_dtors_aux+0x12>
 8008194:	4804      	ldr	r0, [pc, #16]	; (80081a8 <__do_global_dtors_aux+0x20>)
 8008196:	f3af 8000 	nop.w
 800819a:	2301      	movs	r3, #1
 800819c:	7023      	strb	r3, [r4, #0]
 800819e:	bd10      	pop	{r4, pc}
 80081a0:	2000000c 	.word	0x2000000c
 80081a4:	00000000 	.word	0x00000000
 80081a8:	0800a2c0 	.word	0x0800a2c0

080081ac <frame_dummy>:
 80081ac:	b508      	push	{r3, lr}
 80081ae:	4b03      	ldr	r3, [pc, #12]	; (80081bc <frame_dummy+0x10>)
 80081b0:	b11b      	cbz	r3, 80081ba <frame_dummy+0xe>
 80081b2:	4903      	ldr	r1, [pc, #12]	; (80081c0 <frame_dummy+0x14>)
 80081b4:	4803      	ldr	r0, [pc, #12]	; (80081c4 <frame_dummy+0x18>)
 80081b6:	f3af 8000 	nop.w
 80081ba:	bd08      	pop	{r3, pc}
 80081bc:	00000000 	.word	0x00000000
 80081c0:	20000010 	.word	0x20000010
 80081c4:	0800a2c0 	.word	0x0800a2c0

080081c8 <__aeabi_uldivmod>:
 80081c8:	b953      	cbnz	r3, 80081e0 <__aeabi_uldivmod+0x18>
 80081ca:	b94a      	cbnz	r2, 80081e0 <__aeabi_uldivmod+0x18>
 80081cc:	2900      	cmp	r1, #0
 80081ce:	bf08      	it	eq
 80081d0:	2800      	cmpeq	r0, #0
 80081d2:	bf1c      	itt	ne
 80081d4:	f04f 31ff 	movne.w	r1, #4294967295
 80081d8:	f04f 30ff 	movne.w	r0, #4294967295
 80081dc:	f000 b974 	b.w	80084c8 <__aeabi_idiv0>
 80081e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80081e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081e8:	f000 f806 	bl	80081f8 <__udivmoddi4>
 80081ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80081f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081f4:	b004      	add	sp, #16
 80081f6:	4770      	bx	lr

080081f8 <__udivmoddi4>:
 80081f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081fc:	9d08      	ldr	r5, [sp, #32]
 80081fe:	4604      	mov	r4, r0
 8008200:	468e      	mov	lr, r1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d14d      	bne.n	80082a2 <__udivmoddi4+0xaa>
 8008206:	428a      	cmp	r2, r1
 8008208:	4694      	mov	ip, r2
 800820a:	d969      	bls.n	80082e0 <__udivmoddi4+0xe8>
 800820c:	fab2 f282 	clz	r2, r2
 8008210:	b152      	cbz	r2, 8008228 <__udivmoddi4+0x30>
 8008212:	fa01 f302 	lsl.w	r3, r1, r2
 8008216:	f1c2 0120 	rsb	r1, r2, #32
 800821a:	fa20 f101 	lsr.w	r1, r0, r1
 800821e:	fa0c fc02 	lsl.w	ip, ip, r2
 8008222:	ea41 0e03 	orr.w	lr, r1, r3
 8008226:	4094      	lsls	r4, r2
 8008228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800822c:	0c21      	lsrs	r1, r4, #16
 800822e:	fbbe f6f8 	udiv	r6, lr, r8
 8008232:	fa1f f78c 	uxth.w	r7, ip
 8008236:	fb08 e316 	mls	r3, r8, r6, lr
 800823a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800823e:	fb06 f107 	mul.w	r1, r6, r7
 8008242:	4299      	cmp	r1, r3
 8008244:	d90a      	bls.n	800825c <__udivmoddi4+0x64>
 8008246:	eb1c 0303 	adds.w	r3, ip, r3
 800824a:	f106 30ff 	add.w	r0, r6, #4294967295
 800824e:	f080 811f 	bcs.w	8008490 <__udivmoddi4+0x298>
 8008252:	4299      	cmp	r1, r3
 8008254:	f240 811c 	bls.w	8008490 <__udivmoddi4+0x298>
 8008258:	3e02      	subs	r6, #2
 800825a:	4463      	add	r3, ip
 800825c:	1a5b      	subs	r3, r3, r1
 800825e:	b2a4      	uxth	r4, r4
 8008260:	fbb3 f0f8 	udiv	r0, r3, r8
 8008264:	fb08 3310 	mls	r3, r8, r0, r3
 8008268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800826c:	fb00 f707 	mul.w	r7, r0, r7
 8008270:	42a7      	cmp	r7, r4
 8008272:	d90a      	bls.n	800828a <__udivmoddi4+0x92>
 8008274:	eb1c 0404 	adds.w	r4, ip, r4
 8008278:	f100 33ff 	add.w	r3, r0, #4294967295
 800827c:	f080 810a 	bcs.w	8008494 <__udivmoddi4+0x29c>
 8008280:	42a7      	cmp	r7, r4
 8008282:	f240 8107 	bls.w	8008494 <__udivmoddi4+0x29c>
 8008286:	4464      	add	r4, ip
 8008288:	3802      	subs	r0, #2
 800828a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800828e:	1be4      	subs	r4, r4, r7
 8008290:	2600      	movs	r6, #0
 8008292:	b11d      	cbz	r5, 800829c <__udivmoddi4+0xa4>
 8008294:	40d4      	lsrs	r4, r2
 8008296:	2300      	movs	r3, #0
 8008298:	e9c5 4300 	strd	r4, r3, [r5]
 800829c:	4631      	mov	r1, r6
 800829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a2:	428b      	cmp	r3, r1
 80082a4:	d909      	bls.n	80082ba <__udivmoddi4+0xc2>
 80082a6:	2d00      	cmp	r5, #0
 80082a8:	f000 80ef 	beq.w	800848a <__udivmoddi4+0x292>
 80082ac:	2600      	movs	r6, #0
 80082ae:	e9c5 0100 	strd	r0, r1, [r5]
 80082b2:	4630      	mov	r0, r6
 80082b4:	4631      	mov	r1, r6
 80082b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ba:	fab3 f683 	clz	r6, r3
 80082be:	2e00      	cmp	r6, #0
 80082c0:	d14a      	bne.n	8008358 <__udivmoddi4+0x160>
 80082c2:	428b      	cmp	r3, r1
 80082c4:	d302      	bcc.n	80082cc <__udivmoddi4+0xd4>
 80082c6:	4282      	cmp	r2, r0
 80082c8:	f200 80f9 	bhi.w	80084be <__udivmoddi4+0x2c6>
 80082cc:	1a84      	subs	r4, r0, r2
 80082ce:	eb61 0303 	sbc.w	r3, r1, r3
 80082d2:	2001      	movs	r0, #1
 80082d4:	469e      	mov	lr, r3
 80082d6:	2d00      	cmp	r5, #0
 80082d8:	d0e0      	beq.n	800829c <__udivmoddi4+0xa4>
 80082da:	e9c5 4e00 	strd	r4, lr, [r5]
 80082de:	e7dd      	b.n	800829c <__udivmoddi4+0xa4>
 80082e0:	b902      	cbnz	r2, 80082e4 <__udivmoddi4+0xec>
 80082e2:	deff      	udf	#255	; 0xff
 80082e4:	fab2 f282 	clz	r2, r2
 80082e8:	2a00      	cmp	r2, #0
 80082ea:	f040 8092 	bne.w	8008412 <__udivmoddi4+0x21a>
 80082ee:	eba1 010c 	sub.w	r1, r1, ip
 80082f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80082f6:	fa1f fe8c 	uxth.w	lr, ip
 80082fa:	2601      	movs	r6, #1
 80082fc:	0c20      	lsrs	r0, r4, #16
 80082fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8008302:	fb07 1113 	mls	r1, r7, r3, r1
 8008306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800830a:	fb0e f003 	mul.w	r0, lr, r3
 800830e:	4288      	cmp	r0, r1
 8008310:	d908      	bls.n	8008324 <__udivmoddi4+0x12c>
 8008312:	eb1c 0101 	adds.w	r1, ip, r1
 8008316:	f103 38ff 	add.w	r8, r3, #4294967295
 800831a:	d202      	bcs.n	8008322 <__udivmoddi4+0x12a>
 800831c:	4288      	cmp	r0, r1
 800831e:	f200 80cb 	bhi.w	80084b8 <__udivmoddi4+0x2c0>
 8008322:	4643      	mov	r3, r8
 8008324:	1a09      	subs	r1, r1, r0
 8008326:	b2a4      	uxth	r4, r4
 8008328:	fbb1 f0f7 	udiv	r0, r1, r7
 800832c:	fb07 1110 	mls	r1, r7, r0, r1
 8008330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8008334:	fb0e fe00 	mul.w	lr, lr, r0
 8008338:	45a6      	cmp	lr, r4
 800833a:	d908      	bls.n	800834e <__udivmoddi4+0x156>
 800833c:	eb1c 0404 	adds.w	r4, ip, r4
 8008340:	f100 31ff 	add.w	r1, r0, #4294967295
 8008344:	d202      	bcs.n	800834c <__udivmoddi4+0x154>
 8008346:	45a6      	cmp	lr, r4
 8008348:	f200 80bb 	bhi.w	80084c2 <__udivmoddi4+0x2ca>
 800834c:	4608      	mov	r0, r1
 800834e:	eba4 040e 	sub.w	r4, r4, lr
 8008352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8008356:	e79c      	b.n	8008292 <__udivmoddi4+0x9a>
 8008358:	f1c6 0720 	rsb	r7, r6, #32
 800835c:	40b3      	lsls	r3, r6
 800835e:	fa22 fc07 	lsr.w	ip, r2, r7
 8008362:	ea4c 0c03 	orr.w	ip, ip, r3
 8008366:	fa20 f407 	lsr.w	r4, r0, r7
 800836a:	fa01 f306 	lsl.w	r3, r1, r6
 800836e:	431c      	orrs	r4, r3
 8008370:	40f9      	lsrs	r1, r7
 8008372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008376:	fa00 f306 	lsl.w	r3, r0, r6
 800837a:	fbb1 f8f9 	udiv	r8, r1, r9
 800837e:	0c20      	lsrs	r0, r4, #16
 8008380:	fa1f fe8c 	uxth.w	lr, ip
 8008384:	fb09 1118 	mls	r1, r9, r8, r1
 8008388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800838c:	fb08 f00e 	mul.w	r0, r8, lr
 8008390:	4288      	cmp	r0, r1
 8008392:	fa02 f206 	lsl.w	r2, r2, r6
 8008396:	d90b      	bls.n	80083b0 <__udivmoddi4+0x1b8>
 8008398:	eb1c 0101 	adds.w	r1, ip, r1
 800839c:	f108 3aff 	add.w	sl, r8, #4294967295
 80083a0:	f080 8088 	bcs.w	80084b4 <__udivmoddi4+0x2bc>
 80083a4:	4288      	cmp	r0, r1
 80083a6:	f240 8085 	bls.w	80084b4 <__udivmoddi4+0x2bc>
 80083aa:	f1a8 0802 	sub.w	r8, r8, #2
 80083ae:	4461      	add	r1, ip
 80083b0:	1a09      	subs	r1, r1, r0
 80083b2:	b2a4      	uxth	r4, r4
 80083b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80083b8:	fb09 1110 	mls	r1, r9, r0, r1
 80083bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80083c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80083c4:	458e      	cmp	lr, r1
 80083c6:	d908      	bls.n	80083da <__udivmoddi4+0x1e2>
 80083c8:	eb1c 0101 	adds.w	r1, ip, r1
 80083cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80083d0:	d26c      	bcs.n	80084ac <__udivmoddi4+0x2b4>
 80083d2:	458e      	cmp	lr, r1
 80083d4:	d96a      	bls.n	80084ac <__udivmoddi4+0x2b4>
 80083d6:	3802      	subs	r0, #2
 80083d8:	4461      	add	r1, ip
 80083da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80083de:	fba0 9402 	umull	r9, r4, r0, r2
 80083e2:	eba1 010e 	sub.w	r1, r1, lr
 80083e6:	42a1      	cmp	r1, r4
 80083e8:	46c8      	mov	r8, r9
 80083ea:	46a6      	mov	lr, r4
 80083ec:	d356      	bcc.n	800849c <__udivmoddi4+0x2a4>
 80083ee:	d053      	beq.n	8008498 <__udivmoddi4+0x2a0>
 80083f0:	b15d      	cbz	r5, 800840a <__udivmoddi4+0x212>
 80083f2:	ebb3 0208 	subs.w	r2, r3, r8
 80083f6:	eb61 010e 	sbc.w	r1, r1, lr
 80083fa:	fa01 f707 	lsl.w	r7, r1, r7
 80083fe:	fa22 f306 	lsr.w	r3, r2, r6
 8008402:	40f1      	lsrs	r1, r6
 8008404:	431f      	orrs	r7, r3
 8008406:	e9c5 7100 	strd	r7, r1, [r5]
 800840a:	2600      	movs	r6, #0
 800840c:	4631      	mov	r1, r6
 800840e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008412:	f1c2 0320 	rsb	r3, r2, #32
 8008416:	40d8      	lsrs	r0, r3
 8008418:	fa0c fc02 	lsl.w	ip, ip, r2
 800841c:	fa21 f303 	lsr.w	r3, r1, r3
 8008420:	4091      	lsls	r1, r2
 8008422:	4301      	orrs	r1, r0
 8008424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008428:	fa1f fe8c 	uxth.w	lr, ip
 800842c:	fbb3 f0f7 	udiv	r0, r3, r7
 8008430:	fb07 3610 	mls	r6, r7, r0, r3
 8008434:	0c0b      	lsrs	r3, r1, #16
 8008436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800843a:	fb00 f60e 	mul.w	r6, r0, lr
 800843e:	429e      	cmp	r6, r3
 8008440:	fa04 f402 	lsl.w	r4, r4, r2
 8008444:	d908      	bls.n	8008458 <__udivmoddi4+0x260>
 8008446:	eb1c 0303 	adds.w	r3, ip, r3
 800844a:	f100 38ff 	add.w	r8, r0, #4294967295
 800844e:	d22f      	bcs.n	80084b0 <__udivmoddi4+0x2b8>
 8008450:	429e      	cmp	r6, r3
 8008452:	d92d      	bls.n	80084b0 <__udivmoddi4+0x2b8>
 8008454:	3802      	subs	r0, #2
 8008456:	4463      	add	r3, ip
 8008458:	1b9b      	subs	r3, r3, r6
 800845a:	b289      	uxth	r1, r1
 800845c:	fbb3 f6f7 	udiv	r6, r3, r7
 8008460:	fb07 3316 	mls	r3, r7, r6, r3
 8008464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008468:	fb06 f30e 	mul.w	r3, r6, lr
 800846c:	428b      	cmp	r3, r1
 800846e:	d908      	bls.n	8008482 <__udivmoddi4+0x28a>
 8008470:	eb1c 0101 	adds.w	r1, ip, r1
 8008474:	f106 38ff 	add.w	r8, r6, #4294967295
 8008478:	d216      	bcs.n	80084a8 <__udivmoddi4+0x2b0>
 800847a:	428b      	cmp	r3, r1
 800847c:	d914      	bls.n	80084a8 <__udivmoddi4+0x2b0>
 800847e:	3e02      	subs	r6, #2
 8008480:	4461      	add	r1, ip
 8008482:	1ac9      	subs	r1, r1, r3
 8008484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8008488:	e738      	b.n	80082fc <__udivmoddi4+0x104>
 800848a:	462e      	mov	r6, r5
 800848c:	4628      	mov	r0, r5
 800848e:	e705      	b.n	800829c <__udivmoddi4+0xa4>
 8008490:	4606      	mov	r6, r0
 8008492:	e6e3      	b.n	800825c <__udivmoddi4+0x64>
 8008494:	4618      	mov	r0, r3
 8008496:	e6f8      	b.n	800828a <__udivmoddi4+0x92>
 8008498:	454b      	cmp	r3, r9
 800849a:	d2a9      	bcs.n	80083f0 <__udivmoddi4+0x1f8>
 800849c:	ebb9 0802 	subs.w	r8, r9, r2
 80084a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80084a4:	3801      	subs	r0, #1
 80084a6:	e7a3      	b.n	80083f0 <__udivmoddi4+0x1f8>
 80084a8:	4646      	mov	r6, r8
 80084aa:	e7ea      	b.n	8008482 <__udivmoddi4+0x28a>
 80084ac:	4620      	mov	r0, r4
 80084ae:	e794      	b.n	80083da <__udivmoddi4+0x1e2>
 80084b0:	4640      	mov	r0, r8
 80084b2:	e7d1      	b.n	8008458 <__udivmoddi4+0x260>
 80084b4:	46d0      	mov	r8, sl
 80084b6:	e77b      	b.n	80083b0 <__udivmoddi4+0x1b8>
 80084b8:	3b02      	subs	r3, #2
 80084ba:	4461      	add	r1, ip
 80084bc:	e732      	b.n	8008324 <__udivmoddi4+0x12c>
 80084be:	4630      	mov	r0, r6
 80084c0:	e709      	b.n	80082d6 <__udivmoddi4+0xde>
 80084c2:	4464      	add	r4, ip
 80084c4:	3802      	subs	r0, #2
 80084c6:	e742      	b.n	800834e <__udivmoddi4+0x156>

080084c8 <__aeabi_idiv0>:
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop

080084cc <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
  /* Initialize the timer driver. */
  TimerInit();
 80084d0:	f000 f908 	bl	80086e4 <TimerInit>
  /* Initialize the led driver. */
  LedInit();
 80084d4:	f000 f8c8 	bl	8008668 <LedInit>
  /* initialize the bootloader interface */
  BootComInit();
 80084d8:	f000 f820 	bl	800851c <BootComInit>
} /*** end of AppInit ***/
 80084dc:	bf00      	nop
 80084de:	bd80      	pop	{r7, pc}

080084e0 <AppTask>:
**            continuously in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	af00      	add	r7, sp, #0
  /* Toggle LED with a fixed frequency. */
  LedToggle();
 80084e4:	f000 f8cc 	bl	8008680 <LedToggle>
  /* check for bootloader activation request */
  BootComCheckActivationRequest();
 80084e8:	f000 f81e 	bl	8008528 <BootComCheckActivationRequest>
} /*** end of AppTask ***/
 80084ec:	bf00      	nop
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80084f0:	b480      	push	{r7}
 80084f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80084f4:	f3bf 8f4f 	dsb	sy
}
 80084f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80084fa:	4b06      	ldr	r3, [pc, #24]	; (8008514 <__NVIC_SystemReset+0x24>)
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008502:	4904      	ldr	r1, [pc, #16]	; (8008514 <__NVIC_SystemReset+0x24>)
 8008504:	4b04      	ldr	r3, [pc, #16]	; (8008518 <__NVIC_SystemReset+0x28>)
 8008506:	4313      	orrs	r3, r2
 8008508:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800850a:	f3bf 8f4f 	dsb	sy
}
 800850e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008510:	bf00      	nop
 8008512:	e7fd      	b.n	8008510 <__NVIC_SystemReset+0x20>
 8008514:	e000ed00 	.word	0xe000ed00
 8008518:	05fa0004 	.word	0x05fa0004

0800851c <BootComInit>:
** \brief     Initializes the communication interface.
** \return    none.
**
****************************************************************************************/
void BootComInit(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
#if (BOOT_COM_RS232_ENABLE > 0)
  BootComRs232Init();
 8008520:	f000 f80c 	bl	800853c <BootComRs232Init>
#endif
#if (BOOT_COM_CAN_ENABLE > 0)
  BootComCanInit();
#endif
} /*** end of BootComInit ***/
 8008524:	bf00      	nop
 8008526:	bd80      	pop	{r7, pc}

08008528 <BootComCheckActivationRequest>:
**            bootloader should be activated and, if so, activates it.
** \return    none.
**
****************************************************************************************/
void BootComCheckActivationRequest(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	af00      	add	r7, sp, #0
#if (BOOT_COM_RS232_ENABLE > 0)
  BootComRs232CheckActivationRequest();
 800852c:	f000 f82a 	bl	8008584 <BootComRs232CheckActivationRequest>
#endif
#if (BOOT_COM_CAN_ENABLE > 0)
  BootComCanCheckActivationRequest();
#endif
} /*** end of BootComCheckActivationRequest ***/
 8008530:	bf00      	nop
 8008532:	bd80      	pop	{r7, pc}

08008534 <BootActivate>:
** \brief     Bootloader activation function.
** \return    none.
**
****************************************************************************************/
void BootActivate(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
  /* perform software reset to activate the bootoader again */
  NVIC_SystemReset();
 8008538:	f7ff ffda 	bl	80084f0 <__NVIC_SystemReset>

0800853c <BootComRs232Init>:
** \brief     Initializes the UART communication interface.
** \return    none.
**
****************************************************************************************/
static void BootComRs232Init(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
  /* Configure UART peripheral. */
  rs232Handle.Instance = USART2;
 8008540:	4b0e      	ldr	r3, [pc, #56]	; (800857c <BootComRs232Init+0x40>)
 8008542:	4a0f      	ldr	r2, [pc, #60]	; (8008580 <BootComRs232Init+0x44>)
 8008544:	601a      	str	r2, [r3, #0]
  rs232Handle.Init.BaudRate = BOOT_COM_RS232_BAUDRATE;
 8008546:	4b0d      	ldr	r3, [pc, #52]	; (800857c <BootComRs232Init+0x40>)
 8008548:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800854c:	605a      	str	r2, [r3, #4]
  rs232Handle.Init.WordLength = UART_WORDLENGTH_8B;
 800854e:	4b0b      	ldr	r3, [pc, #44]	; (800857c <BootComRs232Init+0x40>)
 8008550:	2200      	movs	r2, #0
 8008552:	609a      	str	r2, [r3, #8]
  rs232Handle.Init.StopBits = UART_STOPBITS_1;
 8008554:	4b09      	ldr	r3, [pc, #36]	; (800857c <BootComRs232Init+0x40>)
 8008556:	2200      	movs	r2, #0
 8008558:	60da      	str	r2, [r3, #12]
  rs232Handle.Init.Parity = UART_PARITY_NONE;
 800855a:	4b08      	ldr	r3, [pc, #32]	; (800857c <BootComRs232Init+0x40>)
 800855c:	2200      	movs	r2, #0
 800855e:	611a      	str	r2, [r3, #16]
  rs232Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008560:	4b06      	ldr	r3, [pc, #24]	; (800857c <BootComRs232Init+0x40>)
 8008562:	2200      	movs	r2, #0
 8008564:	619a      	str	r2, [r3, #24]
  rs232Handle.Init.Mode = UART_MODE_TX_RX;
 8008566:	4b05      	ldr	r3, [pc, #20]	; (800857c <BootComRs232Init+0x40>)
 8008568:	220c      	movs	r2, #12
 800856a:	615a      	str	r2, [r3, #20]
  rs232Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 800856c:	4b03      	ldr	r3, [pc, #12]	; (800857c <BootComRs232Init+0x40>)
 800856e:	2200      	movs	r2, #0
 8008570:	61da      	str	r2, [r3, #28]
  /* Initialize the UART peripheral. */
  HAL_UART_Init(&rs232Handle);
 8008572:	4802      	ldr	r0, [pc, #8]	; (800857c <BootComRs232Init+0x40>)
 8008574:	f001 faa6 	bl	8009ac4 <HAL_UART_Init>
} /*** end of BootComRs232Init ***/
 8008578:	bf00      	nop
 800857a:	bd80      	pop	{r7, pc}
 800857c:	20000028 	.word	0x20000028
 8008580:	40004400 	.word	0x40004400

08008584 <BootComRs232CheckActivationRequest>:
**            bootloader should be activated and, if so, activates it.
** \return    none.
**
****************************************************************************************/
static void BootComRs232CheckActivationRequest(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	af00      	add	r7, sp, #0
  static unsigned char xcpCtoRxLength;
  static unsigned char xcpCtoRxInProgress = 0;
  static unsigned long xcpCtoRxStartTime = 0;

  /* start of cto packet received? */
  if (xcpCtoRxInProgress == 0)
 8008588:	4b27      	ldr	r3, [pc, #156]	; (8008628 <BootComRs232CheckActivationRequest+0xa4>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d119      	bne.n	80085c4 <BootComRs232CheckActivationRequest+0x40>
  {
    /* store the message length when received */
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == 1)
 8008590:	4826      	ldr	r0, [pc, #152]	; (800862c <BootComRs232CheckActivationRequest+0xa8>)
 8008592:	f000 f851 	bl	8008638 <Rs232ReceiveByte>
 8008596:	4603      	mov	r3, r0
 8008598:	2b01      	cmp	r3, #1
 800859a:	d143      	bne.n	8008624 <BootComRs232CheckActivationRequest+0xa0>
    {
      /* check that the length has a valid value. it should not be 0 */
      if ( (xcpCtoReqPacket[0] > 0) &&
 800859c:	4b23      	ldr	r3, [pc, #140]	; (800862c <BootComRs232CheckActivationRequest+0xa8>)
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d03f      	beq.n	8008624 <BootComRs232CheckActivationRequest+0xa0>
           (xcpCtoReqPacket[0] <= BOOT_COM_RS232_RX_MAX_DATA) )
 80085a4:	4b21      	ldr	r3, [pc, #132]	; (800862c <BootComRs232CheckActivationRequest+0xa8>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
      if ( (xcpCtoReqPacket[0] > 0) &&
 80085a8:	2b81      	cmp	r3, #129	; 0x81
 80085aa:	d83b      	bhi.n	8008624 <BootComRs232CheckActivationRequest+0xa0>
      {
        /* store the start time */
        xcpCtoRxStartTime = TimerGet();
 80085ac:	f000 f8a1 	bl	80086f2 <TimerGet>
 80085b0:	4603      	mov	r3, r0
 80085b2:	4a1f      	ldr	r2, [pc, #124]	; (8008630 <BootComRs232CheckActivationRequest+0xac>)
 80085b4:	6013      	str	r3, [r2, #0]
        /* indicate that a cto packet is being received */
        xcpCtoRxInProgress = 1;
 80085b6:	4b1c      	ldr	r3, [pc, #112]	; (8008628 <BootComRs232CheckActivationRequest+0xa4>)
 80085b8:	2201      	movs	r2, #1
 80085ba:	701a      	strb	r2, [r3, #0]
        /* reset packet data count */
        xcpCtoRxLength = 0;
 80085bc:	4b1d      	ldr	r3, [pc, #116]	; (8008634 <BootComRs232CheckActivationRequest+0xb0>)
 80085be:	2200      	movs	r2, #0
 80085c0:	701a      	strb	r2, [r3, #0]
         */
        xcpCtoRxInProgress = 0;
      }
    }
  }
} /*** end of BootComRs232CheckActivationRequest ***/
 80085c2:	e02f      	b.n	8008624 <BootComRs232CheckActivationRequest+0xa0>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == 1)
 80085c4:	4b1b      	ldr	r3, [pc, #108]	; (8008634 <BootComRs232CheckActivationRequest+0xb0>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	3301      	adds	r3, #1
 80085ca:	4a18      	ldr	r2, [pc, #96]	; (800862c <BootComRs232CheckActivationRequest+0xa8>)
 80085cc:	4413      	add	r3, r2
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 f832 	bl	8008638 <Rs232ReceiveByte>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d119      	bne.n	800860e <BootComRs232CheckActivationRequest+0x8a>
      xcpCtoRxLength++;
 80085da:	4b16      	ldr	r3, [pc, #88]	; (8008634 <BootComRs232CheckActivationRequest+0xb0>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	3301      	adds	r3, #1
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	4b14      	ldr	r3, [pc, #80]	; (8008634 <BootComRs232CheckActivationRequest+0xb0>)
 80085e4:	701a      	strb	r2, [r3, #0]
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 80085e6:	4b11      	ldr	r3, [pc, #68]	; (800862c <BootComRs232CheckActivationRequest+0xa8>)
 80085e8:	781a      	ldrb	r2, [r3, #0]
 80085ea:	4b12      	ldr	r3, [pc, #72]	; (8008634 <BootComRs232CheckActivationRequest+0xb0>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d118      	bne.n	8008624 <BootComRs232CheckActivationRequest+0xa0>
        xcpCtoRxInProgress = 0;
 80085f2:	4b0d      	ldr	r3, [pc, #52]	; (8008628 <BootComRs232CheckActivationRequest+0xa4>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	701a      	strb	r2, [r3, #0]
        if ((xcpCtoReqPacket[1] == 0xff) && (xcpCtoRxLength == 2))
 80085f8:	4b0c      	ldr	r3, [pc, #48]	; (800862c <BootComRs232CheckActivationRequest+0xa8>)
 80085fa:	785b      	ldrb	r3, [r3, #1]
 80085fc:	2bff      	cmp	r3, #255	; 0xff
 80085fe:	d111      	bne.n	8008624 <BootComRs232CheckActivationRequest+0xa0>
 8008600:	4b0c      	ldr	r3, [pc, #48]	; (8008634 <BootComRs232CheckActivationRequest+0xb0>)
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	2b02      	cmp	r3, #2
 8008606:	d10d      	bne.n	8008624 <BootComRs232CheckActivationRequest+0xa0>
          BootActivate();
 8008608:	f7ff ff94 	bl	8008534 <BootActivate>
} /*** end of BootComRs232CheckActivationRequest ***/
 800860c:	e00a      	b.n	8008624 <BootComRs232CheckActivationRequest+0xa0>
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 800860e:	f000 f870 	bl	80086f2 <TimerGet>
 8008612:	4602      	mov	r2, r0
 8008614:	4b06      	ldr	r3, [pc, #24]	; (8008630 <BootComRs232CheckActivationRequest+0xac>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3364      	adds	r3, #100	; 0x64
 800861a:	429a      	cmp	r2, r3
 800861c:	d902      	bls.n	8008624 <BootComRs232CheckActivationRequest+0xa0>
        xcpCtoRxInProgress = 0;
 800861e:	4b02      	ldr	r3, [pc, #8]	; (8008628 <BootComRs232CheckActivationRequest+0xa4>)
 8008620:	2200      	movs	r2, #0
 8008622:	701a      	strb	r2, [r3, #0]
} /*** end of BootComRs232CheckActivationRequest ***/
 8008624:	bf00      	nop
 8008626:	bd80      	pop	{r7, pc}
 8008628:	2000006c 	.word	0x2000006c
 800862c:	20000070 	.word	0x20000070
 8008630:	200000f4 	.word	0x200000f4
 8008634:	200000f8 	.word	0x200000f8

08008638 <Rs232ReceiveByte>:
** \param     data Pointer to byte where the data is to be stored.
** \return    1 if a byte was received, 0 otherwise.
**
****************************************************************************************/
static unsigned char Rs232ReceiveByte(unsigned char *data)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef result;

  /* receive a byte in a non-blocking manner */
  result = HAL_UART_Receive(&rs232Handle, data, 1, 0);
 8008640:	2300      	movs	r3, #0
 8008642:	2201      	movs	r2, #1
 8008644:	6879      	ldr	r1, [r7, #4]
 8008646:	4807      	ldr	r0, [pc, #28]	; (8008664 <Rs232ReceiveByte+0x2c>)
 8008648:	f001 fa89 	bl	8009b5e <HAL_UART_Receive>
 800864c:	4603      	mov	r3, r0
 800864e:	73fb      	strb	r3, [r7, #15]
  /* process the result */
  if (result == HAL_OK)
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <Rs232ReceiveByte+0x22>
  {
    /* success */
    return 1;
 8008656:	2301      	movs	r3, #1
 8008658:	e000      	b.n	800865c <Rs232ReceiveByte+0x24>
  }
  /* error occurred */
  return 0;
 800865a:	2300      	movs	r3, #0
} /*** end of Rs232ReceiveByte ***/
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	20000028 	.word	0x20000028

08008668 <LedInit>:
** \brief     Initializes the LED. 
** \return    none.
**
****************************************************************************************/
void LedInit(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	af00      	add	r7, sp, #0
  /* Note that the initialization of the LED GPIO pin is done in HAL_MspInit(). All that
   * is left to do here is to make sure the LED is turned off after initialization.
   */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800866c:	2201      	movs	r2, #1
 800866e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008672:	4802      	ldr	r0, [pc, #8]	; (800867c <LedInit+0x14>)
 8008674:	f000 fd74 	bl	8009160 <HAL_GPIO_WritePin>
} /*** end of LedInit ***/
 8008678:	bf00      	nop
 800867a:	bd80      	pop	{r7, pc}
 800867c:	40020c00 	.word	0x40020c00

08008680 <LedToggle>:
** \brief     Toggles the LED at a fixed time interval.
** \return    none.
**
****************************************************************************************/
void LedToggle(void)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
  static unsigned char led_toggle_state = 0;
  static unsigned long timer_counter_last = 0;
  unsigned long timer_counter_now;

  /* check if toggle interval time passed */
  timer_counter_now = TimerGet();
 8008686:	f000 f834 	bl	80086f2 <TimerGet>
 800868a:	6078      	str	r0, [r7, #4]
  if ( (timer_counter_now - timer_counter_last) < LED_TOGGLE_MS)
 800868c:	4b12      	ldr	r3, [pc, #72]	; (80086d8 <LedToggle+0x58>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008698:	d31a      	bcc.n	80086d0 <LedToggle+0x50>
    /* not yet time to toggle */
    return;
  }

  /* determine toggle action */
  if (led_toggle_state == 0)
 800869a:	4b10      	ldr	r3, [pc, #64]	; (80086dc <LedToggle+0x5c>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d109      	bne.n	80086b6 <LedToggle+0x36>
  {
    led_toggle_state = 1;
 80086a2:	4b0e      	ldr	r3, [pc, #56]	; (80086dc <LedToggle+0x5c>)
 80086a4:	2201      	movs	r2, #1
 80086a6:	701a      	strb	r2, [r3, #0]
    /* turn the LED on */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80086a8:	2200      	movs	r2, #0
 80086aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80086ae:	480c      	ldr	r0, [pc, #48]	; (80086e0 <LedToggle+0x60>)
 80086b0:	f000 fd56 	bl	8009160 <HAL_GPIO_WritePin>
 80086b4:	e008      	b.n	80086c8 <LedToggle+0x48>
  }
  else
  {
    led_toggle_state = 0;
 80086b6:	4b09      	ldr	r3, [pc, #36]	; (80086dc <LedToggle+0x5c>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	701a      	strb	r2, [r3, #0]
    /* turn the LED off */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80086bc:	2201      	movs	r2, #1
 80086be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80086c2:	4807      	ldr	r0, [pc, #28]	; (80086e0 <LedToggle+0x60>)
 80086c4:	f000 fd4c 	bl	8009160 <HAL_GPIO_WritePin>
  }

  /* store toggle time to determine next toggle interval */
  timer_counter_last = timer_counter_now;
 80086c8:	4a03      	ldr	r2, [pc, #12]	; (80086d8 <LedToggle+0x58>)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	e000      	b.n	80086d2 <LedToggle+0x52>
    return;
 80086d0:	bf00      	nop
} /*** end of LedToggle ***/
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	200000fc 	.word	0x200000fc
 80086dc:	20000100 	.word	0x20000100
 80086e0:	40020c00 	.word	0x40020c00

080086e4 <TimerInit>:
** \brief     Initializes the timer.
** \return    none.
**
****************************************************************************************/
void TimerInit(void)
{
 80086e4:	b480      	push	{r7}
 80086e6:	af00      	add	r7, sp, #0
  /* The HAL initialization already configured the Systick interrupt to generate an
   * interrupt every 1 millisecond. Nothing more needs to be done here.
   */
} /*** end of TimerInit ***/
 80086e8:	bf00      	nop
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
unsigned long TimerGet(void)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	af00      	add	r7, sp, #0
  /* Read and return the tick counter value. */
  return HAL_GetTick();
 80086f6:	f000 faa5 	bl	8008c44 <HAL_GetTick>
 80086fa:	4603      	mov	r3, r0
} /*** end of TimerGet ***/
 80086fc:	4618      	mov	r0, r3
 80086fe:	bd80      	pop	{r7, pc}

08008700 <VectorBase_Config>:
  *         bootloader before starting this program. Unfortunately, function
  *         SystemInit() overwrites this change again.
  * @return none.
  */
static void VectorBase_Config(void)
{
 8008700:	b480      	push	{r7}
 8008702:	af00      	add	r7, sp, #0
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 8008704:	4b03      	ldr	r3, [pc, #12]	; (8008714 <VectorBase_Config+0x14>)
 8008706:	4a04      	ldr	r2, [pc, #16]	; (8008718 <VectorBase_Config+0x18>)
 8008708:	609a      	str	r2, [r3, #8]
}
 800870a:	bf00      	nop
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	e000ed00 	.word	0xe000ed00
 8008718:	08008000 	.word	0x08008000

0800871c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* Configure the vector table base address. */
  VectorBase_Config();
 8008720:	f7ff ffee 	bl	8008700 <VectorBase_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008724:	f000 fa28 	bl	8008b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008728:	f000 f80a 	bl	8008740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800872c:	f000 f89c 	bl	8008868 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8008730:	f000 f870 	bl	8008814 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the user program application. */
  AppInit();
 8008734:	f7ff feca 	bl	80084cc <AppInit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	/* Run the user program application. */
	  AppTask();
 8008738:	f7ff fed2 	bl	80084e0 <AppTask>
 800873c:	e7fc      	b.n	8008738 <main+0x1c>
	...

08008740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b094      	sub	sp, #80	; 0x50
 8008744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008746:	f107 0320 	add.w	r3, r7, #32
 800874a:	2230      	movs	r2, #48	; 0x30
 800874c:	2100      	movs	r1, #0
 800874e:	4618      	mov	r0, r3
 8008750:	f001 fdae 	bl	800a2b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008754:	f107 030c 	add.w	r3, r7, #12
 8008758:	2200      	movs	r2, #0
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	605a      	str	r2, [r3, #4]
 800875e:	609a      	str	r2, [r3, #8]
 8008760:	60da      	str	r2, [r3, #12]
 8008762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008764:	2300      	movs	r3, #0
 8008766:	60bb      	str	r3, [r7, #8]
 8008768:	4b28      	ldr	r3, [pc, #160]	; (800880c <SystemClock_Config+0xcc>)
 800876a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876c:	4a27      	ldr	r2, [pc, #156]	; (800880c <SystemClock_Config+0xcc>)
 800876e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008772:	6413      	str	r3, [r2, #64]	; 0x40
 8008774:	4b25      	ldr	r3, [pc, #148]	; (800880c <SystemClock_Config+0xcc>)
 8008776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800877c:	60bb      	str	r3, [r7, #8]
 800877e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008780:	2300      	movs	r3, #0
 8008782:	607b      	str	r3, [r7, #4]
 8008784:	4b22      	ldr	r3, [pc, #136]	; (8008810 <SystemClock_Config+0xd0>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a21      	ldr	r2, [pc, #132]	; (8008810 <SystemClock_Config+0xd0>)
 800878a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800878e:	6013      	str	r3, [r2, #0]
 8008790:	4b1f      	ldr	r3, [pc, #124]	; (8008810 <SystemClock_Config+0xd0>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008798:	607b      	str	r3, [r7, #4]
 800879a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800879c:	2301      	movs	r3, #1
 800879e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80087a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80087a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80087a6:	2302      	movs	r3, #2
 80087a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80087aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80087ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80087b0:	2304      	movs	r3, #4
 80087b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80087b4:	23a8      	movs	r3, #168	; 0xa8
 80087b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80087b8:	2302      	movs	r3, #2
 80087ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80087bc:	2307      	movs	r3, #7
 80087be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80087c0:	f107 0320 	add.w	r3, r7, #32
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 fce5 	bl	8009194 <HAL_RCC_OscConfig>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80087d0:	f000 f8f4 	bl	80089bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80087d4:	230f      	movs	r3, #15
 80087d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80087d8:	2302      	movs	r3, #2
 80087da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80087dc:	2300      	movs	r3, #0
 80087de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80087e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80087e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80087e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80087ec:	f107 030c 	add.w	r3, r7, #12
 80087f0:	2105      	movs	r1, #5
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 ff46 	bl	8009684 <HAL_RCC_ClockConfig>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80087fe:	f000 f8dd 	bl	80089bc <Error_Handler>
  }
}
 8008802:	bf00      	nop
 8008804:	3750      	adds	r7, #80	; 0x50
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	40023800 	.word	0x40023800
 8008810:	40007000 	.word	0x40007000

08008814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008818:	4b11      	ldr	r3, [pc, #68]	; (8008860 <MX_USART2_UART_Init+0x4c>)
 800881a:	4a12      	ldr	r2, [pc, #72]	; (8008864 <MX_USART2_UART_Init+0x50>)
 800881c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800881e:	4b10      	ldr	r3, [pc, #64]	; (8008860 <MX_USART2_UART_Init+0x4c>)
 8008820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008826:	4b0e      	ldr	r3, [pc, #56]	; (8008860 <MX_USART2_UART_Init+0x4c>)
 8008828:	2200      	movs	r2, #0
 800882a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800882c:	4b0c      	ldr	r3, [pc, #48]	; (8008860 <MX_USART2_UART_Init+0x4c>)
 800882e:	2200      	movs	r2, #0
 8008830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008832:	4b0b      	ldr	r3, [pc, #44]	; (8008860 <MX_USART2_UART_Init+0x4c>)
 8008834:	2200      	movs	r2, #0
 8008836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008838:	4b09      	ldr	r3, [pc, #36]	; (8008860 <MX_USART2_UART_Init+0x4c>)
 800883a:	220c      	movs	r2, #12
 800883c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800883e:	4b08      	ldr	r3, [pc, #32]	; (8008860 <MX_USART2_UART_Init+0x4c>)
 8008840:	2200      	movs	r2, #0
 8008842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008844:	4b06      	ldr	r3, [pc, #24]	; (8008860 <MX_USART2_UART_Init+0x4c>)
 8008846:	2200      	movs	r2, #0
 8008848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800884a:	4805      	ldr	r0, [pc, #20]	; (8008860 <MX_USART2_UART_Init+0x4c>)
 800884c:	f001 f93a 	bl	8009ac4 <HAL_UART_Init>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008856:	f000 f8b1 	bl	80089bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800885a:	bf00      	nop
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	20000104 	.word	0x20000104
 8008864:	40004400 	.word	0x40004400

08008868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b08a      	sub	sp, #40	; 0x28
 800886c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800886e:	f107 0314 	add.w	r3, r7, #20
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	605a      	str	r2, [r3, #4]
 8008878:	609a      	str	r2, [r3, #8]
 800887a:	60da      	str	r2, [r3, #12]
 800887c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800887e:	2300      	movs	r3, #0
 8008880:	613b      	str	r3, [r7, #16]
 8008882:	4b49      	ldr	r3, [pc, #292]	; (80089a8 <MX_GPIO_Init+0x140>)
 8008884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008886:	4a48      	ldr	r2, [pc, #288]	; (80089a8 <MX_GPIO_Init+0x140>)
 8008888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800888c:	6313      	str	r3, [r2, #48]	; 0x30
 800888e:	4b46      	ldr	r3, [pc, #280]	; (80089a8 <MX_GPIO_Init+0x140>)
 8008890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008896:	613b      	str	r3, [r7, #16]
 8008898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800889a:	2300      	movs	r3, #0
 800889c:	60fb      	str	r3, [r7, #12]
 800889e:	4b42      	ldr	r3, [pc, #264]	; (80089a8 <MX_GPIO_Init+0x140>)
 80088a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a2:	4a41      	ldr	r2, [pc, #260]	; (80089a8 <MX_GPIO_Init+0x140>)
 80088a4:	f043 0301 	orr.w	r3, r3, #1
 80088a8:	6313      	str	r3, [r2, #48]	; 0x30
 80088aa:	4b3f      	ldr	r3, [pc, #252]	; (80089a8 <MX_GPIO_Init+0x140>)
 80088ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80088b6:	2300      	movs	r3, #0
 80088b8:	60bb      	str	r3, [r7, #8]
 80088ba:	4b3b      	ldr	r3, [pc, #236]	; (80089a8 <MX_GPIO_Init+0x140>)
 80088bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088be:	4a3a      	ldr	r2, [pc, #232]	; (80089a8 <MX_GPIO_Init+0x140>)
 80088c0:	f043 0302 	orr.w	r3, r3, #2
 80088c4:	6313      	str	r3, [r2, #48]	; 0x30
 80088c6:	4b38      	ldr	r3, [pc, #224]	; (80089a8 <MX_GPIO_Init+0x140>)
 80088c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	60bb      	str	r3, [r7, #8]
 80088d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80088d2:	2300      	movs	r3, #0
 80088d4:	607b      	str	r3, [r7, #4]
 80088d6:	4b34      	ldr	r3, [pc, #208]	; (80089a8 <MX_GPIO_Init+0x140>)
 80088d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088da:	4a33      	ldr	r2, [pc, #204]	; (80089a8 <MX_GPIO_Init+0x140>)
 80088dc:	f043 0308 	orr.w	r3, r3, #8
 80088e0:	6313      	str	r3, [r2, #48]	; 0x30
 80088e2:	4b31      	ldr	r3, [pc, #196]	; (80089a8 <MX_GPIO_Init+0x140>)
 80088e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e6:	f003 0308 	and.w	r3, r3, #8
 80088ea:	607b      	str	r3, [r7, #4]
 80088ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80088ee:	2300      	movs	r3, #0
 80088f0:	603b      	str	r3, [r7, #0]
 80088f2:	4b2d      	ldr	r3, [pc, #180]	; (80089a8 <MX_GPIO_Init+0x140>)
 80088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f6:	4a2c      	ldr	r2, [pc, #176]	; (80089a8 <MX_GPIO_Init+0x140>)
 80088f8:	f043 0304 	orr.w	r3, r3, #4
 80088fc:	6313      	str	r3, [r2, #48]	; 0x30
 80088fe:	4b2a      	ldr	r3, [pc, #168]	; (80089a8 <MX_GPIO_Init+0x140>)
 8008900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008902:	f003 0304 	and.w	r3, r3, #4
 8008906:	603b      	str	r3, [r7, #0]
 8008908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800890a:	2200      	movs	r2, #0
 800890c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008910:	4826      	ldr	r0, [pc, #152]	; (80089ac <MX_GPIO_Init+0x144>)
 8008912:	f000 fc25 	bl	8009160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8008916:	2200      	movs	r2, #0
 8008918:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800891c:	4824      	ldr	r0, [pc, #144]	; (80089b0 <MX_GPIO_Init+0x148>)
 800891e:	f000 fc1f 	bl	8009160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8008922:	2200      	movs	r2, #0
 8008924:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008928:	4822      	ldr	r0, [pc, #136]	; (80089b4 <MX_GPIO_Init+0x14c>)
 800892a:	f000 fc19 	bl	8009160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800892e:	2301      	movs	r3, #1
 8008930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008932:	2300      	movs	r3, #0
 8008934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008936:	2300      	movs	r3, #0
 8008938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800893a:	f107 0314 	add.w	r3, r7, #20
 800893e:	4619      	mov	r1, r3
 8008940:	481d      	ldr	r0, [pc, #116]	; (80089b8 <MX_GPIO_Init+0x150>)
 8008942:	f000 fa71 	bl	8008e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800894a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800894c:	2301      	movs	r3, #1
 800894e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008950:	2300      	movs	r3, #0
 8008952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008954:	2300      	movs	r3, #0
 8008956:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008958:	f107 0314 	add.w	r3, r7, #20
 800895c:	4619      	mov	r1, r3
 800895e:	4813      	ldr	r0, [pc, #76]	; (80089ac <MX_GPIO_Init+0x144>)
 8008960:	f000 fa62 	bl	8008e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800896a:	2301      	movs	r3, #1
 800896c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800896e:	2300      	movs	r3, #0
 8008970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008972:	2300      	movs	r3, #0
 8008974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008976:	f107 0314 	add.w	r3, r7, #20
 800897a:	4619      	mov	r1, r3
 800897c:	480c      	ldr	r0, [pc, #48]	; (80089b0 <MX_GPIO_Init+0x148>)
 800897e:	f000 fa53 	bl	8008e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008988:	2301      	movs	r3, #1
 800898a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800898c:	2300      	movs	r3, #0
 800898e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008990:	2300      	movs	r3, #0
 8008992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008994:	f107 0314 	add.w	r3, r7, #20
 8008998:	4619      	mov	r1, r3
 800899a:	4806      	ldr	r0, [pc, #24]	; (80089b4 <MX_GPIO_Init+0x14c>)
 800899c:	f000 fa44 	bl	8008e28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80089a0:	bf00      	nop
 80089a2:	3728      	adds	r7, #40	; 0x28
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	40023800 	.word	0x40023800
 80089ac:	40020400 	.word	0x40020400
 80089b0:	40020c00 	.word	0x40020c00
 80089b4:	40020800 	.word	0x40020800
 80089b8:	40020000 	.word	0x40020000

080089bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80089bc:	b480      	push	{r7}
 80089be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80089c0:	bf00      	nop
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
	...

080089cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089d2:	2300      	movs	r3, #0
 80089d4:	607b      	str	r3, [r7, #4]
 80089d6:	4b10      	ldr	r3, [pc, #64]	; (8008a18 <HAL_MspInit+0x4c>)
 80089d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089da:	4a0f      	ldr	r2, [pc, #60]	; (8008a18 <HAL_MspInit+0x4c>)
 80089dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089e0:	6453      	str	r3, [r2, #68]	; 0x44
 80089e2:	4b0d      	ldr	r3, [pc, #52]	; (8008a18 <HAL_MspInit+0x4c>)
 80089e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089ea:	607b      	str	r3, [r7, #4]
 80089ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80089ee:	2300      	movs	r3, #0
 80089f0:	603b      	str	r3, [r7, #0]
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <HAL_MspInit+0x4c>)
 80089f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f6:	4a08      	ldr	r2, [pc, #32]	; (8008a18 <HAL_MspInit+0x4c>)
 80089f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089fc:	6413      	str	r3, [r2, #64]	; 0x40
 80089fe:	4b06      	ldr	r3, [pc, #24]	; (8008a18 <HAL_MspInit+0x4c>)
 8008a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a06:	603b      	str	r3, [r7, #0]
 8008a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008a0a:	bf00      	nop
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	40023800 	.word	0x40023800

08008a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08a      	sub	sp, #40	; 0x28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a24:	f107 0314 	add.w	r3, r7, #20
 8008a28:	2200      	movs	r2, #0
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	605a      	str	r2, [r3, #4]
 8008a2e:	609a      	str	r2, [r3, #8]
 8008a30:	60da      	str	r2, [r3, #12]
 8008a32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a19      	ldr	r2, [pc, #100]	; (8008aa0 <HAL_UART_MspInit+0x84>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d12b      	bne.n	8008a96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008a3e:	2300      	movs	r3, #0
 8008a40:	613b      	str	r3, [r7, #16]
 8008a42:	4b18      	ldr	r3, [pc, #96]	; (8008aa4 <HAL_UART_MspInit+0x88>)
 8008a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a46:	4a17      	ldr	r2, [pc, #92]	; (8008aa4 <HAL_UART_MspInit+0x88>)
 8008a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8008a4e:	4b15      	ldr	r3, [pc, #84]	; (8008aa4 <HAL_UART_MspInit+0x88>)
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a56:	613b      	str	r3, [r7, #16]
 8008a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60fb      	str	r3, [r7, #12]
 8008a5e:	4b11      	ldr	r3, [pc, #68]	; (8008aa4 <HAL_UART_MspInit+0x88>)
 8008a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a62:	4a10      	ldr	r2, [pc, #64]	; (8008aa4 <HAL_UART_MspInit+0x88>)
 8008a64:	f043 0301 	orr.w	r3, r3, #1
 8008a68:	6313      	str	r3, [r2, #48]	; 0x30
 8008a6a:	4b0e      	ldr	r3, [pc, #56]	; (8008aa4 <HAL_UART_MspInit+0x88>)
 8008a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008a76:	230c      	movs	r3, #12
 8008a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a82:	2303      	movs	r3, #3
 8008a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008a86:	2307      	movs	r3, #7
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a8a:	f107 0314 	add.w	r3, r7, #20
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4805      	ldr	r0, [pc, #20]	; (8008aa8 <HAL_UART_MspInit+0x8c>)
 8008a92:	f000 f9c9 	bl	8008e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008a96:	bf00      	nop
 8008a98:	3728      	adds	r7, #40	; 0x28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	40004400 	.word	0x40004400
 8008aa4:	40023800 	.word	0x40023800
 8008aa8:	40020000 	.word	0x40020000

08008aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008aac:	b480      	push	{r7}
 8008aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008ab0:	e7fe      	b.n	8008ab0 <NMI_Handler+0x4>

08008ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ab6:	e7fe      	b.n	8008ab6 <HardFault_Handler+0x4>

08008ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008abc:	e7fe      	b.n	8008abc <MemManage_Handler+0x4>

08008abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008ac2:	e7fe      	b.n	8008ac2 <BusFault_Handler+0x4>

08008ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ac8:	e7fe      	b.n	8008ac8 <UsageFault_Handler+0x4>

08008aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008aca:	b480      	push	{r7}
 8008acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008ace:	bf00      	nop
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008adc:	bf00      	nop
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008aea:	bf00      	nop
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008af8:	f000 f890 	bl	8008c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008afc:	bf00      	nop
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008b00:	b480      	push	{r7}
 8008b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008b04:	4b06      	ldr	r3, [pc, #24]	; (8008b20 <SystemInit+0x20>)
 8008b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b0a:	4a05      	ldr	r2, [pc, #20]	; (8008b20 <SystemInit+0x20>)
 8008b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008b14:	bf00      	nop
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	e000ed00 	.word	0xe000ed00

08008b24 <Reset_Handler>:
 8008b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008b5c <LoopFillZerobss+0x12>
 8008b28:	480d      	ldr	r0, [pc, #52]	; (8008b60 <LoopFillZerobss+0x16>)
 8008b2a:	490e      	ldr	r1, [pc, #56]	; (8008b64 <LoopFillZerobss+0x1a>)
 8008b2c:	4a0e      	ldr	r2, [pc, #56]	; (8008b68 <LoopFillZerobss+0x1e>)
 8008b2e:	2300      	movs	r3, #0
 8008b30:	e002      	b.n	8008b38 <LoopCopyDataInit>

08008b32 <CopyDataInit>:
 8008b32:	58d4      	ldr	r4, [r2, r3]
 8008b34:	50c4      	str	r4, [r0, r3]
 8008b36:	3304      	adds	r3, #4

08008b38 <LoopCopyDataInit>:
 8008b38:	18c4      	adds	r4, r0, r3
 8008b3a:	428c      	cmp	r4, r1
 8008b3c:	d3f9      	bcc.n	8008b32 <CopyDataInit>
 8008b3e:	4a0b      	ldr	r2, [pc, #44]	; (8008b6c <LoopFillZerobss+0x22>)
 8008b40:	4c0b      	ldr	r4, [pc, #44]	; (8008b70 <LoopFillZerobss+0x26>)
 8008b42:	2300      	movs	r3, #0
 8008b44:	e001      	b.n	8008b4a <LoopFillZerobss>

08008b46 <FillZerobss>:
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	3204      	adds	r2, #4

08008b4a <LoopFillZerobss>:
 8008b4a:	42a2      	cmp	r2, r4
 8008b4c:	d3fb      	bcc.n	8008b46 <FillZerobss>
 8008b4e:	f7ff ffd7 	bl	8008b00 <SystemInit>
 8008b52:	f001 fb89 	bl	800a268 <__libc_init_array>
 8008b56:	f7ff fde1 	bl	800871c <main>
 8008b5a:	4770      	bx	lr
 8008b5c:	20020000 	.word	0x20020000
 8008b60:	20000000 	.word	0x20000000
 8008b64:	2000000c 	.word	0x2000000c
 8008b68:	0800a300 	.word	0x0800a300
 8008b6c:	2000000c 	.word	0x2000000c
 8008b70:	2000014c 	.word	0x2000014c

08008b74 <ADC_IRQHandler>:
 8008b74:	e7fe      	b.n	8008b74 <ADC_IRQHandler>
	...

08008b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008b7c:	4b0e      	ldr	r3, [pc, #56]	; (8008bb8 <HAL_Init+0x40>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a0d      	ldr	r2, [pc, #52]	; (8008bb8 <HAL_Init+0x40>)
 8008b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008b88:	4b0b      	ldr	r3, [pc, #44]	; (8008bb8 <HAL_Init+0x40>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a0a      	ldr	r2, [pc, #40]	; (8008bb8 <HAL_Init+0x40>)
 8008b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b94:	4b08      	ldr	r3, [pc, #32]	; (8008bb8 <HAL_Init+0x40>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a07      	ldr	r2, [pc, #28]	; (8008bb8 <HAL_Init+0x40>)
 8008b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ba0:	2003      	movs	r0, #3
 8008ba2:	f000 f90d 	bl	8008dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008ba6:	200f      	movs	r0, #15
 8008ba8:	f000 f808 	bl	8008bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008bac:	f7ff ff0e 	bl	80089cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	40023c00 	.word	0x40023c00

08008bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008bc4:	4b12      	ldr	r3, [pc, #72]	; (8008c10 <HAL_InitTick+0x54>)
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	4b12      	ldr	r3, [pc, #72]	; (8008c14 <HAL_InitTick+0x58>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	4619      	mov	r1, r3
 8008bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f000 f917 	bl	8008e0e <HAL_SYSTICK_Config>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e00e      	b.n	8008c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b0f      	cmp	r3, #15
 8008bee:	d80a      	bhi.n	8008c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf8:	f000 f8ed 	bl	8008dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008bfc:	4a06      	ldr	r2, [pc, #24]	; (8008c18 <HAL_InitTick+0x5c>)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	e000      	b.n	8008c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	20000000 	.word	0x20000000
 8008c14:	20000008 	.word	0x20000008
 8008c18:	20000004 	.word	0x20000004

08008c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008c20:	4b06      	ldr	r3, [pc, #24]	; (8008c3c <HAL_IncTick+0x20>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	4b06      	ldr	r3, [pc, #24]	; (8008c40 <HAL_IncTick+0x24>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	4a04      	ldr	r2, [pc, #16]	; (8008c40 <HAL_IncTick+0x24>)
 8008c2e:	6013      	str	r3, [r2, #0]
}
 8008c30:	bf00      	nop
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	20000008 	.word	0x20000008
 8008c40:	20000148 	.word	0x20000148

08008c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c44:	b480      	push	{r7}
 8008c46:	af00      	add	r7, sp, #0
  return uwTick;
 8008c48:	4b03      	ldr	r3, [pc, #12]	; (8008c58 <HAL_GetTick+0x14>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	20000148 	.word	0x20000148

08008c5c <__NVIC_SetPriorityGrouping>:
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c6c:	4b0c      	ldr	r3, [pc, #48]	; (8008ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008c78:	4013      	ands	r3, r2
 8008c7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c8e:	4a04      	ldr	r2, [pc, #16]	; (8008ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	60d3      	str	r3, [r2, #12]
}
 8008c94:	bf00      	nop
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	e000ed00 	.word	0xe000ed00

08008ca4 <__NVIC_GetPriorityGrouping>:
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ca8:	4b04      	ldr	r3, [pc, #16]	; (8008cbc <__NVIC_GetPriorityGrouping+0x18>)
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	0a1b      	lsrs	r3, r3, #8
 8008cae:	f003 0307 	and.w	r3, r3, #7
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	e000ed00 	.word	0xe000ed00

08008cc0 <__NVIC_SetPriority>:
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	6039      	str	r1, [r7, #0]
 8008cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	db0a      	blt.n	8008cea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	490c      	ldr	r1, [pc, #48]	; (8008d0c <__NVIC_SetPriority+0x4c>)
 8008cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cde:	0112      	lsls	r2, r2, #4
 8008ce0:	b2d2      	uxtb	r2, r2
 8008ce2:	440b      	add	r3, r1
 8008ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008ce8:	e00a      	b.n	8008d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	4908      	ldr	r1, [pc, #32]	; (8008d10 <__NVIC_SetPriority+0x50>)
 8008cf0:	79fb      	ldrb	r3, [r7, #7]
 8008cf2:	f003 030f 	and.w	r3, r3, #15
 8008cf6:	3b04      	subs	r3, #4
 8008cf8:	0112      	lsls	r2, r2, #4
 8008cfa:	b2d2      	uxtb	r2, r2
 8008cfc:	440b      	add	r3, r1
 8008cfe:	761a      	strb	r2, [r3, #24]
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	e000e100 	.word	0xe000e100
 8008d10:	e000ed00 	.word	0xe000ed00

08008d14 <NVIC_EncodePriority>:
{
 8008d14:	b480      	push	{r7}
 8008d16:	b089      	sub	sp, #36	; 0x24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f003 0307 	and.w	r3, r3, #7
 8008d26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	f1c3 0307 	rsb	r3, r3, #7
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	bf28      	it	cs
 8008d32:	2304      	movcs	r3, #4
 8008d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	2b06      	cmp	r3, #6
 8008d3c:	d902      	bls.n	8008d44 <NVIC_EncodePriority+0x30>
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	3b03      	subs	r3, #3
 8008d42:	e000      	b.n	8008d46 <NVIC_EncodePriority+0x32>
 8008d44:	2300      	movs	r3, #0
 8008d46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d48:	f04f 32ff 	mov.w	r2, #4294967295
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d52:	43da      	mvns	r2, r3
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	401a      	ands	r2, r3
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	fa01 f303 	lsl.w	r3, r1, r3
 8008d66:	43d9      	mvns	r1, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d6c:	4313      	orrs	r3, r2
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3724      	adds	r7, #36	; 0x24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
	...

08008d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	3b01      	subs	r3, #1
 8008d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d8c:	d301      	bcc.n	8008d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e00f      	b.n	8008db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d92:	4a0a      	ldr	r2, [pc, #40]	; (8008dbc <SysTick_Config+0x40>)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d9a:	210f      	movs	r1, #15
 8008d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008da0:	f7ff ff8e 	bl	8008cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008da4:	4b05      	ldr	r3, [pc, #20]	; (8008dbc <SysTick_Config+0x40>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008daa:	4b04      	ldr	r3, [pc, #16]	; (8008dbc <SysTick_Config+0x40>)
 8008dac:	2207      	movs	r2, #7
 8008dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3708      	adds	r7, #8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	e000e010 	.word	0xe000e010

08008dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff ff47 	bl	8008c5c <__NVIC_SetPriorityGrouping>
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b086      	sub	sp, #24
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	4603      	mov	r3, r0
 8008dde:	60b9      	str	r1, [r7, #8]
 8008de0:	607a      	str	r2, [r7, #4]
 8008de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008de8:	f7ff ff5c 	bl	8008ca4 <__NVIC_GetPriorityGrouping>
 8008dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	68b9      	ldr	r1, [r7, #8]
 8008df2:	6978      	ldr	r0, [r7, #20]
 8008df4:	f7ff ff8e 	bl	8008d14 <NVIC_EncodePriority>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dfe:	4611      	mov	r1, r2
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7ff ff5d 	bl	8008cc0 <__NVIC_SetPriority>
}
 8008e06:	bf00      	nop
 8008e08:	3718      	adds	r7, #24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b082      	sub	sp, #8
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7ff ffb0 	bl	8008d7c <SysTick_Config>
 8008e1c:	4603      	mov	r3, r0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
	...

08008e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b089      	sub	sp, #36	; 0x24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61fb      	str	r3, [r7, #28]
 8008e42:	e16b      	b.n	800911c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008e44:	2201      	movs	r2, #1
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	4013      	ands	r3, r2
 8008e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	f040 815a 	bne.w	8009116 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f003 0303 	and.w	r3, r3, #3
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d005      	beq.n	8008e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d130      	bne.n	8008edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	2203      	movs	r2, #3
 8008e86:	fa02 f303 	lsl.w	r3, r2, r3
 8008e8a:	43db      	mvns	r3, r3
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	4013      	ands	r3, r2
 8008e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	68da      	ldr	r2, [r3, #12]
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	005b      	lsls	r3, r3, #1
 8008e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9e:	69ba      	ldr	r2, [r7, #24]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb8:	43db      	mvns	r3, r3
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	091b      	lsrs	r3, r3, #4
 8008ec6:	f003 0201 	and.w	r2, r3, #1
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	69ba      	ldr	r2, [r7, #24]
 8008eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f003 0303 	and.w	r3, r3, #3
 8008ee4:	2b03      	cmp	r3, #3
 8008ee6:	d017      	beq.n	8008f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	005b      	lsls	r3, r3, #1
 8008ef2:	2203      	movs	r2, #3
 8008ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef8:	43db      	mvns	r3, r3
 8008efa:	69ba      	ldr	r2, [r7, #24]
 8008efc:	4013      	ands	r3, r2
 8008efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	689a      	ldr	r2, [r3, #8]
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	005b      	lsls	r3, r3, #1
 8008f08:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0c:	69ba      	ldr	r2, [r7, #24]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f003 0303 	and.w	r3, r3, #3
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d123      	bne.n	8008f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	08da      	lsrs	r2, r3, #3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3208      	adds	r2, #8
 8008f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	f003 0307 	and.w	r3, r3, #7
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	220f      	movs	r2, #15
 8008f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f40:	43db      	mvns	r3, r3
 8008f42:	69ba      	ldr	r2, [r7, #24]
 8008f44:	4013      	ands	r3, r2
 8008f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	691a      	ldr	r2, [r3, #16]
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	f003 0307 	and.w	r3, r3, #7
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	fa02 f303 	lsl.w	r3, r2, r3
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	08da      	lsrs	r2, r3, #3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	3208      	adds	r2, #8
 8008f66:	69b9      	ldr	r1, [r7, #24]
 8008f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	2203      	movs	r2, #3
 8008f78:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7c:	43db      	mvns	r3, r3
 8008f7e:	69ba      	ldr	r2, [r7, #24]
 8008f80:	4013      	ands	r3, r2
 8008f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f003 0203 	and.w	r2, r3, #3
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	fa02 f303 	lsl.w	r3, r2, r3
 8008f94:	69ba      	ldr	r2, [r7, #24]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 80b4 	beq.w	8009116 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008fae:	2300      	movs	r3, #0
 8008fb0:	60fb      	str	r3, [r7, #12]
 8008fb2:	4b60      	ldr	r3, [pc, #384]	; (8009134 <HAL_GPIO_Init+0x30c>)
 8008fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fb6:	4a5f      	ldr	r2, [pc, #380]	; (8009134 <HAL_GPIO_Init+0x30c>)
 8008fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8008fbe:	4b5d      	ldr	r3, [pc, #372]	; (8009134 <HAL_GPIO_Init+0x30c>)
 8008fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fc6:	60fb      	str	r3, [r7, #12]
 8008fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008fca:	4a5b      	ldr	r2, [pc, #364]	; (8009138 <HAL_GPIO_Init+0x310>)
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	089b      	lsrs	r3, r3, #2
 8008fd0:	3302      	adds	r3, #2
 8008fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	f003 0303 	and.w	r3, r3, #3
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	220f      	movs	r2, #15
 8008fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe6:	43db      	mvns	r3, r3
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	4013      	ands	r3, r2
 8008fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a52      	ldr	r2, [pc, #328]	; (800913c <HAL_GPIO_Init+0x314>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d02b      	beq.n	800904e <HAL_GPIO_Init+0x226>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a51      	ldr	r2, [pc, #324]	; (8009140 <HAL_GPIO_Init+0x318>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d025      	beq.n	800904a <HAL_GPIO_Init+0x222>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a50      	ldr	r2, [pc, #320]	; (8009144 <HAL_GPIO_Init+0x31c>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d01f      	beq.n	8009046 <HAL_GPIO_Init+0x21e>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	4a4f      	ldr	r2, [pc, #316]	; (8009148 <HAL_GPIO_Init+0x320>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d019      	beq.n	8009042 <HAL_GPIO_Init+0x21a>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a4e      	ldr	r2, [pc, #312]	; (800914c <HAL_GPIO_Init+0x324>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d013      	beq.n	800903e <HAL_GPIO_Init+0x216>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a4d      	ldr	r2, [pc, #308]	; (8009150 <HAL_GPIO_Init+0x328>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d00d      	beq.n	800903a <HAL_GPIO_Init+0x212>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a4c      	ldr	r2, [pc, #304]	; (8009154 <HAL_GPIO_Init+0x32c>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d007      	beq.n	8009036 <HAL_GPIO_Init+0x20e>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a4b      	ldr	r2, [pc, #300]	; (8009158 <HAL_GPIO_Init+0x330>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d101      	bne.n	8009032 <HAL_GPIO_Init+0x20a>
 800902e:	2307      	movs	r3, #7
 8009030:	e00e      	b.n	8009050 <HAL_GPIO_Init+0x228>
 8009032:	2308      	movs	r3, #8
 8009034:	e00c      	b.n	8009050 <HAL_GPIO_Init+0x228>
 8009036:	2306      	movs	r3, #6
 8009038:	e00a      	b.n	8009050 <HAL_GPIO_Init+0x228>
 800903a:	2305      	movs	r3, #5
 800903c:	e008      	b.n	8009050 <HAL_GPIO_Init+0x228>
 800903e:	2304      	movs	r3, #4
 8009040:	e006      	b.n	8009050 <HAL_GPIO_Init+0x228>
 8009042:	2303      	movs	r3, #3
 8009044:	e004      	b.n	8009050 <HAL_GPIO_Init+0x228>
 8009046:	2302      	movs	r3, #2
 8009048:	e002      	b.n	8009050 <HAL_GPIO_Init+0x228>
 800904a:	2301      	movs	r3, #1
 800904c:	e000      	b.n	8009050 <HAL_GPIO_Init+0x228>
 800904e:	2300      	movs	r3, #0
 8009050:	69fa      	ldr	r2, [r7, #28]
 8009052:	f002 0203 	and.w	r2, r2, #3
 8009056:	0092      	lsls	r2, r2, #2
 8009058:	4093      	lsls	r3, r2
 800905a:	69ba      	ldr	r2, [r7, #24]
 800905c:	4313      	orrs	r3, r2
 800905e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009060:	4935      	ldr	r1, [pc, #212]	; (8009138 <HAL_GPIO_Init+0x310>)
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	089b      	lsrs	r3, r3, #2
 8009066:	3302      	adds	r3, #2
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800906e:	4b3b      	ldr	r3, [pc, #236]	; (800915c <HAL_GPIO_Init+0x334>)
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	43db      	mvns	r3, r3
 8009078:	69ba      	ldr	r2, [r7, #24]
 800907a:	4013      	ands	r3, r2
 800907c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	4313      	orrs	r3, r2
 8009090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009092:	4a32      	ldr	r2, [pc, #200]	; (800915c <HAL_GPIO_Init+0x334>)
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009098:	4b30      	ldr	r3, [pc, #192]	; (800915c <HAL_GPIO_Init+0x334>)
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	43db      	mvns	r3, r3
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	4013      	ands	r3, r2
 80090a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d003      	beq.n	80090bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80090bc:	4a27      	ldr	r2, [pc, #156]	; (800915c <HAL_GPIO_Init+0x334>)
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80090c2:	4b26      	ldr	r3, [pc, #152]	; (800915c <HAL_GPIO_Init+0x334>)
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	43db      	mvns	r3, r3
 80090cc:	69ba      	ldr	r2, [r7, #24]
 80090ce:	4013      	ands	r3, r2
 80090d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d003      	beq.n	80090e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80090de:	69ba      	ldr	r2, [r7, #24]
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80090e6:	4a1d      	ldr	r2, [pc, #116]	; (800915c <HAL_GPIO_Init+0x334>)
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80090ec:	4b1b      	ldr	r3, [pc, #108]	; (800915c <HAL_GPIO_Init+0x334>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	43db      	mvns	r3, r3
 80090f6:	69ba      	ldr	r2, [r7, #24]
 80090f8:	4013      	ands	r3, r2
 80090fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d003      	beq.n	8009110 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009108:	69ba      	ldr	r2, [r7, #24]
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	4313      	orrs	r3, r2
 800910e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009110:	4a12      	ldr	r2, [pc, #72]	; (800915c <HAL_GPIO_Init+0x334>)
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	3301      	adds	r3, #1
 800911a:	61fb      	str	r3, [r7, #28]
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	2b0f      	cmp	r3, #15
 8009120:	f67f ae90 	bls.w	8008e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009124:	bf00      	nop
 8009126:	bf00      	nop
 8009128:	3724      	adds	r7, #36	; 0x24
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	40023800 	.word	0x40023800
 8009138:	40013800 	.word	0x40013800
 800913c:	40020000 	.word	0x40020000
 8009140:	40020400 	.word	0x40020400
 8009144:	40020800 	.word	0x40020800
 8009148:	40020c00 	.word	0x40020c00
 800914c:	40021000 	.word	0x40021000
 8009150:	40021400 	.word	0x40021400
 8009154:	40021800 	.word	0x40021800
 8009158:	40021c00 	.word	0x40021c00
 800915c:	40013c00 	.word	0x40013c00

08009160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	807b      	strh	r3, [r7, #2]
 800916c:	4613      	mov	r3, r2
 800916e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009170:	787b      	ldrb	r3, [r7, #1]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009176:	887a      	ldrh	r2, [r7, #2]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800917c:	e003      	b.n	8009186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800917e:	887b      	ldrh	r3, [r7, #2]
 8009180:	041a      	lsls	r2, r3, #16
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	619a      	str	r2, [r3, #24]
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
	...

08009194 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d101      	bne.n	80091a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e267      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d075      	beq.n	800929e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091b2:	4b88      	ldr	r3, [pc, #544]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	f003 030c 	and.w	r3, r3, #12
 80091ba:	2b04      	cmp	r3, #4
 80091bc:	d00c      	beq.n	80091d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091be:	4b85      	ldr	r3, [pc, #532]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091c6:	2b08      	cmp	r3, #8
 80091c8:	d112      	bne.n	80091f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091ca:	4b82      	ldr	r3, [pc, #520]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091d6:	d10b      	bne.n	80091f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091d8:	4b7e      	ldr	r3, [pc, #504]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d05b      	beq.n	800929c <HAL_RCC_OscConfig+0x108>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d157      	bne.n	800929c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	e242      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091f8:	d106      	bne.n	8009208 <HAL_RCC_OscConfig+0x74>
 80091fa:	4b76      	ldr	r3, [pc, #472]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a75      	ldr	r2, [pc, #468]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 8009200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009204:	6013      	str	r3, [r2, #0]
 8009206:	e01d      	b.n	8009244 <HAL_RCC_OscConfig+0xb0>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009210:	d10c      	bne.n	800922c <HAL_RCC_OscConfig+0x98>
 8009212:	4b70      	ldr	r3, [pc, #448]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a6f      	ldr	r2, [pc, #444]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 8009218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800921c:	6013      	str	r3, [r2, #0]
 800921e:	4b6d      	ldr	r3, [pc, #436]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a6c      	ldr	r2, [pc, #432]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 8009224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009228:	6013      	str	r3, [r2, #0]
 800922a:	e00b      	b.n	8009244 <HAL_RCC_OscConfig+0xb0>
 800922c:	4b69      	ldr	r3, [pc, #420]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a68      	ldr	r2, [pc, #416]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 8009232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009236:	6013      	str	r3, [r2, #0]
 8009238:	4b66      	ldr	r3, [pc, #408]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a65      	ldr	r2, [pc, #404]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 800923e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d013      	beq.n	8009274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800924c:	f7ff fcfa 	bl	8008c44 <HAL_GetTick>
 8009250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009252:	e008      	b.n	8009266 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009254:	f7ff fcf6 	bl	8008c44 <HAL_GetTick>
 8009258:	4602      	mov	r2, r0
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	2b64      	cmp	r3, #100	; 0x64
 8009260:	d901      	bls.n	8009266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e207      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009266:	4b5b      	ldr	r3, [pc, #364]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0f0      	beq.n	8009254 <HAL_RCC_OscConfig+0xc0>
 8009272:	e014      	b.n	800929e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009274:	f7ff fce6 	bl	8008c44 <HAL_GetTick>
 8009278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800927a:	e008      	b.n	800928e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800927c:	f7ff fce2 	bl	8008c44 <HAL_GetTick>
 8009280:	4602      	mov	r2, r0
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	2b64      	cmp	r3, #100	; 0x64
 8009288:	d901      	bls.n	800928e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e1f3      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800928e:	4b51      	ldr	r3, [pc, #324]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1f0      	bne.n	800927c <HAL_RCC_OscConfig+0xe8>
 800929a:	e000      	b.n	800929e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800929c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0302 	and.w	r3, r3, #2
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d063      	beq.n	8009372 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092aa:	4b4a      	ldr	r3, [pc, #296]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f003 030c 	and.w	r3, r3, #12
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00b      	beq.n	80092ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092b6:	4b47      	ldr	r3, [pc, #284]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092be:	2b08      	cmp	r3, #8
 80092c0:	d11c      	bne.n	80092fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092c2:	4b44      	ldr	r3, [pc, #272]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d116      	bne.n	80092fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092ce:	4b41      	ldr	r3, [pc, #260]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d005      	beq.n	80092e6 <HAL_RCC_OscConfig+0x152>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d001      	beq.n	80092e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e1c7      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092e6:	4b3b      	ldr	r3, [pc, #236]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	00db      	lsls	r3, r3, #3
 80092f4:	4937      	ldr	r1, [pc, #220]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 80092f6:	4313      	orrs	r3, r2
 80092f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092fa:	e03a      	b.n	8009372 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d020      	beq.n	8009346 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009304:	4b34      	ldr	r3, [pc, #208]	; (80093d8 <HAL_RCC_OscConfig+0x244>)
 8009306:	2201      	movs	r2, #1
 8009308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800930a:	f7ff fc9b 	bl	8008c44 <HAL_GetTick>
 800930e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009310:	e008      	b.n	8009324 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009312:	f7ff fc97 	bl	8008c44 <HAL_GetTick>
 8009316:	4602      	mov	r2, r0
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	2b02      	cmp	r3, #2
 800931e:	d901      	bls.n	8009324 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009320:	2303      	movs	r3, #3
 8009322:	e1a8      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009324:	4b2b      	ldr	r3, [pc, #172]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 0302 	and.w	r3, r3, #2
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0f0      	beq.n	8009312 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009330:	4b28      	ldr	r3, [pc, #160]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	00db      	lsls	r3, r3, #3
 800933e:	4925      	ldr	r1, [pc, #148]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 8009340:	4313      	orrs	r3, r2
 8009342:	600b      	str	r3, [r1, #0]
 8009344:	e015      	b.n	8009372 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009346:	4b24      	ldr	r3, [pc, #144]	; (80093d8 <HAL_RCC_OscConfig+0x244>)
 8009348:	2200      	movs	r2, #0
 800934a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800934c:	f7ff fc7a 	bl	8008c44 <HAL_GetTick>
 8009350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009352:	e008      	b.n	8009366 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009354:	f7ff fc76 	bl	8008c44 <HAL_GetTick>
 8009358:	4602      	mov	r2, r0
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	2b02      	cmp	r3, #2
 8009360:	d901      	bls.n	8009366 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e187      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009366:	4b1b      	ldr	r3, [pc, #108]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0302 	and.w	r3, r3, #2
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1f0      	bne.n	8009354 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0308 	and.w	r3, r3, #8
 800937a:	2b00      	cmp	r3, #0
 800937c:	d036      	beq.n	80093ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	695b      	ldr	r3, [r3, #20]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d016      	beq.n	80093b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009386:	4b15      	ldr	r3, [pc, #84]	; (80093dc <HAL_RCC_OscConfig+0x248>)
 8009388:	2201      	movs	r2, #1
 800938a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800938c:	f7ff fc5a 	bl	8008c44 <HAL_GetTick>
 8009390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009392:	e008      	b.n	80093a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009394:	f7ff fc56 	bl	8008c44 <HAL_GetTick>
 8009398:	4602      	mov	r2, r0
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d901      	bls.n	80093a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e167      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093a6:	4b0b      	ldr	r3, [pc, #44]	; (80093d4 <HAL_RCC_OscConfig+0x240>)
 80093a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093aa:	f003 0302 	and.w	r3, r3, #2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d0f0      	beq.n	8009394 <HAL_RCC_OscConfig+0x200>
 80093b2:	e01b      	b.n	80093ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80093b4:	4b09      	ldr	r3, [pc, #36]	; (80093dc <HAL_RCC_OscConfig+0x248>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093ba:	f7ff fc43 	bl	8008c44 <HAL_GetTick>
 80093be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093c0:	e00e      	b.n	80093e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093c2:	f7ff fc3f 	bl	8008c44 <HAL_GetTick>
 80093c6:	4602      	mov	r2, r0
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d907      	bls.n	80093e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e150      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
 80093d4:	40023800 	.word	0x40023800
 80093d8:	42470000 	.word	0x42470000
 80093dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093e0:	4b88      	ldr	r3, [pc, #544]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 80093e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093e4:	f003 0302 	and.w	r3, r3, #2
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1ea      	bne.n	80093c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 0304 	and.w	r3, r3, #4
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 8097 	beq.w	8009528 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093fa:	2300      	movs	r3, #0
 80093fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093fe:	4b81      	ldr	r3, [pc, #516]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 8009400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10f      	bne.n	800942a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800940a:	2300      	movs	r3, #0
 800940c:	60bb      	str	r3, [r7, #8]
 800940e:	4b7d      	ldr	r3, [pc, #500]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 8009410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009412:	4a7c      	ldr	r2, [pc, #496]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 8009414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009418:	6413      	str	r3, [r2, #64]	; 0x40
 800941a:	4b7a      	ldr	r3, [pc, #488]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 800941c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009422:	60bb      	str	r3, [r7, #8]
 8009424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009426:	2301      	movs	r3, #1
 8009428:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800942a:	4b77      	ldr	r3, [pc, #476]	; (8009608 <HAL_RCC_OscConfig+0x474>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009432:	2b00      	cmp	r3, #0
 8009434:	d118      	bne.n	8009468 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009436:	4b74      	ldr	r3, [pc, #464]	; (8009608 <HAL_RCC_OscConfig+0x474>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a73      	ldr	r2, [pc, #460]	; (8009608 <HAL_RCC_OscConfig+0x474>)
 800943c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009442:	f7ff fbff 	bl	8008c44 <HAL_GetTick>
 8009446:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009448:	e008      	b.n	800945c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800944a:	f7ff fbfb 	bl	8008c44 <HAL_GetTick>
 800944e:	4602      	mov	r2, r0
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	2b02      	cmp	r3, #2
 8009456:	d901      	bls.n	800945c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009458:	2303      	movs	r3, #3
 800945a:	e10c      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800945c:	4b6a      	ldr	r3, [pc, #424]	; (8009608 <HAL_RCC_OscConfig+0x474>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009464:	2b00      	cmp	r3, #0
 8009466:	d0f0      	beq.n	800944a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d106      	bne.n	800947e <HAL_RCC_OscConfig+0x2ea>
 8009470:	4b64      	ldr	r3, [pc, #400]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 8009472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009474:	4a63      	ldr	r2, [pc, #396]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 8009476:	f043 0301 	orr.w	r3, r3, #1
 800947a:	6713      	str	r3, [r2, #112]	; 0x70
 800947c:	e01c      	b.n	80094b8 <HAL_RCC_OscConfig+0x324>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	2b05      	cmp	r3, #5
 8009484:	d10c      	bne.n	80094a0 <HAL_RCC_OscConfig+0x30c>
 8009486:	4b5f      	ldr	r3, [pc, #380]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 8009488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800948a:	4a5e      	ldr	r2, [pc, #376]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 800948c:	f043 0304 	orr.w	r3, r3, #4
 8009490:	6713      	str	r3, [r2, #112]	; 0x70
 8009492:	4b5c      	ldr	r3, [pc, #368]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 8009494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009496:	4a5b      	ldr	r2, [pc, #364]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 8009498:	f043 0301 	orr.w	r3, r3, #1
 800949c:	6713      	str	r3, [r2, #112]	; 0x70
 800949e:	e00b      	b.n	80094b8 <HAL_RCC_OscConfig+0x324>
 80094a0:	4b58      	ldr	r3, [pc, #352]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 80094a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a4:	4a57      	ldr	r2, [pc, #348]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 80094a6:	f023 0301 	bic.w	r3, r3, #1
 80094aa:	6713      	str	r3, [r2, #112]	; 0x70
 80094ac:	4b55      	ldr	r3, [pc, #340]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 80094ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b0:	4a54      	ldr	r2, [pc, #336]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 80094b2:	f023 0304 	bic.w	r3, r3, #4
 80094b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d015      	beq.n	80094ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094c0:	f7ff fbc0 	bl	8008c44 <HAL_GetTick>
 80094c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094c6:	e00a      	b.n	80094de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094c8:	f7ff fbbc 	bl	8008c44 <HAL_GetTick>
 80094cc:	4602      	mov	r2, r0
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d901      	bls.n	80094de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80094da:	2303      	movs	r3, #3
 80094dc:	e0cb      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094de:	4b49      	ldr	r3, [pc, #292]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 80094e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e2:	f003 0302 	and.w	r3, r3, #2
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d0ee      	beq.n	80094c8 <HAL_RCC_OscConfig+0x334>
 80094ea:	e014      	b.n	8009516 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094ec:	f7ff fbaa 	bl	8008c44 <HAL_GetTick>
 80094f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094f2:	e00a      	b.n	800950a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094f4:	f7ff fba6 	bl	8008c44 <HAL_GetTick>
 80094f8:	4602      	mov	r2, r0
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009502:	4293      	cmp	r3, r2
 8009504:	d901      	bls.n	800950a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e0b5      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800950a:	4b3e      	ldr	r3, [pc, #248]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 800950c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800950e:	f003 0302 	and.w	r3, r3, #2
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1ee      	bne.n	80094f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009516:	7dfb      	ldrb	r3, [r7, #23]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d105      	bne.n	8009528 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800951c:	4b39      	ldr	r3, [pc, #228]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 800951e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009520:	4a38      	ldr	r2, [pc, #224]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 8009522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009526:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 80a1 	beq.w	8009674 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009532:	4b34      	ldr	r3, [pc, #208]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f003 030c 	and.w	r3, r3, #12
 800953a:	2b08      	cmp	r3, #8
 800953c:	d05c      	beq.n	80095f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	2b02      	cmp	r3, #2
 8009544:	d141      	bne.n	80095ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009546:	4b31      	ldr	r3, [pc, #196]	; (800960c <HAL_RCC_OscConfig+0x478>)
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800954c:	f7ff fb7a 	bl	8008c44 <HAL_GetTick>
 8009550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009552:	e008      	b.n	8009566 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009554:	f7ff fb76 	bl	8008c44 <HAL_GetTick>
 8009558:	4602      	mov	r2, r0
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	2b02      	cmp	r3, #2
 8009560:	d901      	bls.n	8009566 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e087      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009566:	4b27      	ldr	r3, [pc, #156]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1f0      	bne.n	8009554 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	69da      	ldr	r2, [r3, #28]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6a1b      	ldr	r3, [r3, #32]
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009580:	019b      	lsls	r3, r3, #6
 8009582:	431a      	orrs	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009588:	085b      	lsrs	r3, r3, #1
 800958a:	3b01      	subs	r3, #1
 800958c:	041b      	lsls	r3, r3, #16
 800958e:	431a      	orrs	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009594:	061b      	lsls	r3, r3, #24
 8009596:	491b      	ldr	r1, [pc, #108]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 8009598:	4313      	orrs	r3, r2
 800959a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800959c:	4b1b      	ldr	r3, [pc, #108]	; (800960c <HAL_RCC_OscConfig+0x478>)
 800959e:	2201      	movs	r2, #1
 80095a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095a2:	f7ff fb4f 	bl	8008c44 <HAL_GetTick>
 80095a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095a8:	e008      	b.n	80095bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095aa:	f7ff fb4b 	bl	8008c44 <HAL_GetTick>
 80095ae:	4602      	mov	r2, r0
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d901      	bls.n	80095bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80095b8:	2303      	movs	r3, #3
 80095ba:	e05c      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095bc:	4b11      	ldr	r3, [pc, #68]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d0f0      	beq.n	80095aa <HAL_RCC_OscConfig+0x416>
 80095c8:	e054      	b.n	8009674 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095ca:	4b10      	ldr	r3, [pc, #64]	; (800960c <HAL_RCC_OscConfig+0x478>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095d0:	f7ff fb38 	bl	8008c44 <HAL_GetTick>
 80095d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095d6:	e008      	b.n	80095ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095d8:	f7ff fb34 	bl	8008c44 <HAL_GetTick>
 80095dc:	4602      	mov	r2, r0
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d901      	bls.n	80095ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e045      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095ea:	4b06      	ldr	r3, [pc, #24]	; (8009604 <HAL_RCC_OscConfig+0x470>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1f0      	bne.n	80095d8 <HAL_RCC_OscConfig+0x444>
 80095f6:	e03d      	b.n	8009674 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d107      	bne.n	8009610 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e038      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
 8009604:	40023800 	.word	0x40023800
 8009608:	40007000 	.word	0x40007000
 800960c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009610:	4b1b      	ldr	r3, [pc, #108]	; (8009680 <HAL_RCC_OscConfig+0x4ec>)
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d028      	beq.n	8009670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009628:	429a      	cmp	r2, r3
 800962a:	d121      	bne.n	8009670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009636:	429a      	cmp	r2, r3
 8009638:	d11a      	bne.n	8009670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009640:	4013      	ands	r3, r2
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009648:	4293      	cmp	r3, r2
 800964a:	d111      	bne.n	8009670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009656:	085b      	lsrs	r3, r3, #1
 8009658:	3b01      	subs	r3, #1
 800965a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800965c:	429a      	cmp	r2, r3
 800965e:	d107      	bne.n	8009670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800966c:	429a      	cmp	r2, r3
 800966e:	d001      	beq.n	8009674 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e000      	b.n	8009676 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	40023800 	.word	0x40023800

08009684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e0cc      	b.n	8009832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009698:	4b68      	ldr	r3, [pc, #416]	; (800983c <HAL_RCC_ClockConfig+0x1b8>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 0307 	and.w	r3, r3, #7
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d90c      	bls.n	80096c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096a6:	4b65      	ldr	r3, [pc, #404]	; (800983c <HAL_RCC_ClockConfig+0x1b8>)
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	b2d2      	uxtb	r2, r2
 80096ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096ae:	4b63      	ldr	r3, [pc, #396]	; (800983c <HAL_RCC_ClockConfig+0x1b8>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 0307 	and.w	r3, r3, #7
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d001      	beq.n	80096c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	e0b8      	b.n	8009832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0302 	and.w	r3, r3, #2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d020      	beq.n	800970e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0304 	and.w	r3, r3, #4
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d005      	beq.n	80096e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80096d8:	4b59      	ldr	r3, [pc, #356]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	4a58      	ldr	r2, [pc, #352]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 80096de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80096e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0308 	and.w	r3, r3, #8
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d005      	beq.n	80096fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096f0:	4b53      	ldr	r3, [pc, #332]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	4a52      	ldr	r2, [pc, #328]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 80096f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80096fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096fc:	4b50      	ldr	r3, [pc, #320]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	494d      	ldr	r1, [pc, #308]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 800970a:	4313      	orrs	r3, r2
 800970c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	d044      	beq.n	80097a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	2b01      	cmp	r3, #1
 8009720:	d107      	bne.n	8009732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009722:	4b47      	ldr	r3, [pc, #284]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800972a:	2b00      	cmp	r3, #0
 800972c:	d119      	bne.n	8009762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e07f      	b.n	8009832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	2b02      	cmp	r3, #2
 8009738:	d003      	beq.n	8009742 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800973e:	2b03      	cmp	r3, #3
 8009740:	d107      	bne.n	8009752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009742:	4b3f      	ldr	r3, [pc, #252]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d109      	bne.n	8009762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e06f      	b.n	8009832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009752:	4b3b      	ldr	r3, [pc, #236]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0302 	and.w	r3, r3, #2
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e067      	b.n	8009832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009762:	4b37      	ldr	r3, [pc, #220]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	f023 0203 	bic.w	r2, r3, #3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	4934      	ldr	r1, [pc, #208]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 8009770:	4313      	orrs	r3, r2
 8009772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009774:	f7ff fa66 	bl	8008c44 <HAL_GetTick>
 8009778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800977a:	e00a      	b.n	8009792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800977c:	f7ff fa62 	bl	8008c44 <HAL_GetTick>
 8009780:	4602      	mov	r2, r0
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	f241 3288 	movw	r2, #5000	; 0x1388
 800978a:	4293      	cmp	r3, r2
 800978c:	d901      	bls.n	8009792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e04f      	b.n	8009832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009792:	4b2b      	ldr	r3, [pc, #172]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f003 020c 	and.w	r2, r3, #12
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d1eb      	bne.n	800977c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80097a4:	4b25      	ldr	r3, [pc, #148]	; (800983c <HAL_RCC_ClockConfig+0x1b8>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 0307 	and.w	r3, r3, #7
 80097ac:	683a      	ldr	r2, [r7, #0]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d20c      	bcs.n	80097cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097b2:	4b22      	ldr	r3, [pc, #136]	; (800983c <HAL_RCC_ClockConfig+0x1b8>)
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	b2d2      	uxtb	r2, r2
 80097b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097ba:	4b20      	ldr	r3, [pc, #128]	; (800983c <HAL_RCC_ClockConfig+0x1b8>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 0307 	and.w	r3, r3, #7
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d001      	beq.n	80097cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e032      	b.n	8009832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0304 	and.w	r3, r3, #4
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d008      	beq.n	80097ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097d8:	4b19      	ldr	r3, [pc, #100]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	4916      	ldr	r1, [pc, #88]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0308 	and.w	r3, r3, #8
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d009      	beq.n	800980a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097f6:	4b12      	ldr	r3, [pc, #72]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	00db      	lsls	r3, r3, #3
 8009804:	490e      	ldr	r1, [pc, #56]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 8009806:	4313      	orrs	r3, r2
 8009808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800980a:	f000 f821 	bl	8009850 <HAL_RCC_GetSysClockFreq>
 800980e:	4602      	mov	r2, r0
 8009810:	4b0b      	ldr	r3, [pc, #44]	; (8009840 <HAL_RCC_ClockConfig+0x1bc>)
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	091b      	lsrs	r3, r3, #4
 8009816:	f003 030f 	and.w	r3, r3, #15
 800981a:	490a      	ldr	r1, [pc, #40]	; (8009844 <HAL_RCC_ClockConfig+0x1c0>)
 800981c:	5ccb      	ldrb	r3, [r1, r3]
 800981e:	fa22 f303 	lsr.w	r3, r2, r3
 8009822:	4a09      	ldr	r2, [pc, #36]	; (8009848 <HAL_RCC_ClockConfig+0x1c4>)
 8009824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009826:	4b09      	ldr	r3, [pc, #36]	; (800984c <HAL_RCC_ClockConfig+0x1c8>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4618      	mov	r0, r3
 800982c:	f7ff f9c6 	bl	8008bbc <HAL_InitTick>

  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	40023c00 	.word	0x40023c00
 8009840:	40023800 	.word	0x40023800
 8009844:	0800a2d8 	.word	0x0800a2d8
 8009848:	20000000 	.word	0x20000000
 800984c:	20000004 	.word	0x20000004

08009850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009854:	b094      	sub	sp, #80	; 0x50
 8009856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	647b      	str	r3, [r7, #68]	; 0x44
 800985c:	2300      	movs	r3, #0
 800985e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009860:	2300      	movs	r3, #0
 8009862:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009868:	4b79      	ldr	r3, [pc, #484]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	f003 030c 	and.w	r3, r3, #12
 8009870:	2b08      	cmp	r3, #8
 8009872:	d00d      	beq.n	8009890 <HAL_RCC_GetSysClockFreq+0x40>
 8009874:	2b08      	cmp	r3, #8
 8009876:	f200 80e1 	bhi.w	8009a3c <HAL_RCC_GetSysClockFreq+0x1ec>
 800987a:	2b00      	cmp	r3, #0
 800987c:	d002      	beq.n	8009884 <HAL_RCC_GetSysClockFreq+0x34>
 800987e:	2b04      	cmp	r3, #4
 8009880:	d003      	beq.n	800988a <HAL_RCC_GetSysClockFreq+0x3a>
 8009882:	e0db      	b.n	8009a3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009884:	4b73      	ldr	r3, [pc, #460]	; (8009a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8009886:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009888:	e0db      	b.n	8009a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800988a:	4b73      	ldr	r3, [pc, #460]	; (8009a58 <HAL_RCC_GetSysClockFreq+0x208>)
 800988c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800988e:	e0d8      	b.n	8009a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009890:	4b6f      	ldr	r3, [pc, #444]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009898:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800989a:	4b6d      	ldr	r3, [pc, #436]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d063      	beq.n	800996e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80098a6:	4b6a      	ldr	r3, [pc, #424]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x200>)
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	099b      	lsrs	r3, r3, #6
 80098ac:	2200      	movs	r2, #0
 80098ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80098b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80098b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b8:	633b      	str	r3, [r7, #48]	; 0x30
 80098ba:	2300      	movs	r3, #0
 80098bc:	637b      	str	r3, [r7, #52]	; 0x34
 80098be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80098c2:	4622      	mov	r2, r4
 80098c4:	462b      	mov	r3, r5
 80098c6:	f04f 0000 	mov.w	r0, #0
 80098ca:	f04f 0100 	mov.w	r1, #0
 80098ce:	0159      	lsls	r1, r3, #5
 80098d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80098d4:	0150      	lsls	r0, r2, #5
 80098d6:	4602      	mov	r2, r0
 80098d8:	460b      	mov	r3, r1
 80098da:	4621      	mov	r1, r4
 80098dc:	1a51      	subs	r1, r2, r1
 80098de:	6139      	str	r1, [r7, #16]
 80098e0:	4629      	mov	r1, r5
 80098e2:	eb63 0301 	sbc.w	r3, r3, r1
 80098e6:	617b      	str	r3, [r7, #20]
 80098e8:	f04f 0200 	mov.w	r2, #0
 80098ec:	f04f 0300 	mov.w	r3, #0
 80098f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098f4:	4659      	mov	r1, fp
 80098f6:	018b      	lsls	r3, r1, #6
 80098f8:	4651      	mov	r1, sl
 80098fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80098fe:	4651      	mov	r1, sl
 8009900:	018a      	lsls	r2, r1, #6
 8009902:	4651      	mov	r1, sl
 8009904:	ebb2 0801 	subs.w	r8, r2, r1
 8009908:	4659      	mov	r1, fp
 800990a:	eb63 0901 	sbc.w	r9, r3, r1
 800990e:	f04f 0200 	mov.w	r2, #0
 8009912:	f04f 0300 	mov.w	r3, #0
 8009916:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800991a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800991e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009922:	4690      	mov	r8, r2
 8009924:	4699      	mov	r9, r3
 8009926:	4623      	mov	r3, r4
 8009928:	eb18 0303 	adds.w	r3, r8, r3
 800992c:	60bb      	str	r3, [r7, #8]
 800992e:	462b      	mov	r3, r5
 8009930:	eb49 0303 	adc.w	r3, r9, r3
 8009934:	60fb      	str	r3, [r7, #12]
 8009936:	f04f 0200 	mov.w	r2, #0
 800993a:	f04f 0300 	mov.w	r3, #0
 800993e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009942:	4629      	mov	r1, r5
 8009944:	024b      	lsls	r3, r1, #9
 8009946:	4621      	mov	r1, r4
 8009948:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800994c:	4621      	mov	r1, r4
 800994e:	024a      	lsls	r2, r1, #9
 8009950:	4610      	mov	r0, r2
 8009952:	4619      	mov	r1, r3
 8009954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009956:	2200      	movs	r2, #0
 8009958:	62bb      	str	r3, [r7, #40]	; 0x28
 800995a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800995c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009960:	f7fe fc32 	bl	80081c8 <__aeabi_uldivmod>
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	4613      	mov	r3, r2
 800996a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800996c:	e058      	b.n	8009a20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800996e:	4b38      	ldr	r3, [pc, #224]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	099b      	lsrs	r3, r3, #6
 8009974:	2200      	movs	r2, #0
 8009976:	4618      	mov	r0, r3
 8009978:	4611      	mov	r1, r2
 800997a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800997e:	623b      	str	r3, [r7, #32]
 8009980:	2300      	movs	r3, #0
 8009982:	627b      	str	r3, [r7, #36]	; 0x24
 8009984:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009988:	4642      	mov	r2, r8
 800998a:	464b      	mov	r3, r9
 800998c:	f04f 0000 	mov.w	r0, #0
 8009990:	f04f 0100 	mov.w	r1, #0
 8009994:	0159      	lsls	r1, r3, #5
 8009996:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800999a:	0150      	lsls	r0, r2, #5
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	4641      	mov	r1, r8
 80099a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80099a6:	4649      	mov	r1, r9
 80099a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80099ac:	f04f 0200 	mov.w	r2, #0
 80099b0:	f04f 0300 	mov.w	r3, #0
 80099b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80099b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80099bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80099c0:	ebb2 040a 	subs.w	r4, r2, sl
 80099c4:	eb63 050b 	sbc.w	r5, r3, fp
 80099c8:	f04f 0200 	mov.w	r2, #0
 80099cc:	f04f 0300 	mov.w	r3, #0
 80099d0:	00eb      	lsls	r3, r5, #3
 80099d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80099d6:	00e2      	lsls	r2, r4, #3
 80099d8:	4614      	mov	r4, r2
 80099da:	461d      	mov	r5, r3
 80099dc:	4643      	mov	r3, r8
 80099de:	18e3      	adds	r3, r4, r3
 80099e0:	603b      	str	r3, [r7, #0]
 80099e2:	464b      	mov	r3, r9
 80099e4:	eb45 0303 	adc.w	r3, r5, r3
 80099e8:	607b      	str	r3, [r7, #4]
 80099ea:	f04f 0200 	mov.w	r2, #0
 80099ee:	f04f 0300 	mov.w	r3, #0
 80099f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80099f6:	4629      	mov	r1, r5
 80099f8:	028b      	lsls	r3, r1, #10
 80099fa:	4621      	mov	r1, r4
 80099fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009a00:	4621      	mov	r1, r4
 8009a02:	028a      	lsls	r2, r1, #10
 8009a04:	4610      	mov	r0, r2
 8009a06:	4619      	mov	r1, r3
 8009a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	61bb      	str	r3, [r7, #24]
 8009a0e:	61fa      	str	r2, [r7, #28]
 8009a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a14:	f7fe fbd8 	bl	80081c8 <__aeabi_uldivmod>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a20:	4b0b      	ldr	r3, [pc, #44]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	0c1b      	lsrs	r3, r3, #16
 8009a26:	f003 0303 	and.w	r3, r3, #3
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	005b      	lsls	r3, r3, #1
 8009a2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009a30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a3a:	e002      	b.n	8009a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009a3c:	4b05      	ldr	r3, [pc, #20]	; (8009a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8009a3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3750      	adds	r7, #80	; 0x50
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a4e:	bf00      	nop
 8009a50:	40023800 	.word	0x40023800
 8009a54:	00f42400 	.word	0x00f42400
 8009a58:	007a1200 	.word	0x007a1200

08009a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a60:	4b03      	ldr	r3, [pc, #12]	; (8009a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8009a62:	681b      	ldr	r3, [r3, #0]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	20000000 	.word	0x20000000

08009a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009a78:	f7ff fff0 	bl	8009a5c <HAL_RCC_GetHCLKFreq>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	4b05      	ldr	r3, [pc, #20]	; (8009a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	0a9b      	lsrs	r3, r3, #10
 8009a84:	f003 0307 	and.w	r3, r3, #7
 8009a88:	4903      	ldr	r1, [pc, #12]	; (8009a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a8a:	5ccb      	ldrb	r3, [r1, r3]
 8009a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	40023800 	.word	0x40023800
 8009a98:	0800a2e8 	.word	0x0800a2e8

08009a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009aa0:	f7ff ffdc 	bl	8009a5c <HAL_RCC_GetHCLKFreq>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	4b05      	ldr	r3, [pc, #20]	; (8009abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	0b5b      	lsrs	r3, r3, #13
 8009aac:	f003 0307 	and.w	r3, r3, #7
 8009ab0:	4903      	ldr	r1, [pc, #12]	; (8009ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ab2:	5ccb      	ldrb	r3, [r1, r3]
 8009ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	40023800 	.word	0x40023800
 8009ac0:	0800a2e8 	.word	0x0800a2e8

08009ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d101      	bne.n	8009ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e03f      	b.n	8009b56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7fe ff96 	bl	8008a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2224      	movs	r2, #36	; 0x24
 8009af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68da      	ldr	r2, [r3, #12]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f939 	bl	8009d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	691a      	ldr	r2, [r3, #16]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	695a      	ldr	r2, [r3, #20]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2220      	movs	r2, #32
 8009b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2220      	movs	r2, #32
 8009b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b08a      	sub	sp, #40	; 0x28
 8009b62:	af02      	add	r7, sp, #8
 8009b64:	60f8      	str	r0, [r7, #12]
 8009b66:	60b9      	str	r1, [r7, #8]
 8009b68:	603b      	str	r3, [r7, #0]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	2b20      	cmp	r3, #32
 8009b7c:	f040 808c 	bne.w	8009c98 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d002      	beq.n	8009b8c <HAL_UART_Receive+0x2e>
 8009b86:	88fb      	ldrh	r3, [r7, #6]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e084      	b.n	8009c9a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d101      	bne.n	8009b9e <HAL_UART_Receive+0x40>
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	e07d      	b.n	8009c9a <HAL_UART_Receive+0x13c>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2222      	movs	r2, #34	; 0x22
 8009bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bba:	f7ff f843 	bl	8008c44 <HAL_GetTick>
 8009bbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	88fa      	ldrh	r2, [r7, #6]
 8009bc4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	88fa      	ldrh	r2, [r7, #6]
 8009bca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bd4:	d108      	bne.n	8009be8 <HAL_UART_Receive+0x8a>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d104      	bne.n	8009be8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009bde:	2300      	movs	r3, #0
 8009be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	61bb      	str	r3, [r7, #24]
 8009be6:	e003      	b.n	8009bf0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009bec:	2300      	movs	r3, #0
 8009bee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009bf8:	e043      	b.n	8009c82 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	2200      	movs	r2, #0
 8009c02:	2120      	movs	r1, #32
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f000 f84c 	bl	8009ca2 <UART_WaitOnFlagUntilTimeout>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d001      	beq.n	8009c14 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009c10:	2303      	movs	r3, #3
 8009c12:	e042      	b.n	8009c9a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10c      	bne.n	8009c34 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	3302      	adds	r3, #2
 8009c30:	61bb      	str	r3, [r7, #24]
 8009c32:	e01f      	b.n	8009c74 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c3c:	d007      	beq.n	8009c4e <HAL_UART_Receive+0xf0>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10a      	bne.n	8009c5c <HAL_UART_Receive+0xfe>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d106      	bne.n	8009c5c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	b2da      	uxtb	r2, r3
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	701a      	strb	r2, [r3, #0]
 8009c5a:	e008      	b.n	8009c6e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	3301      	adds	r3, #1
 8009c72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1b6      	bne.n	8009bfa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2220      	movs	r2, #32
 8009c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	e000      	b.n	8009c9a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009c98:	2302      	movs	r3, #2
  }
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3720      	adds	r7, #32
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b090      	sub	sp, #64	; 0x40
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	60f8      	str	r0, [r7, #12]
 8009caa:	60b9      	str	r1, [r7, #8]
 8009cac:	603b      	str	r3, [r7, #0]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cb2:	e050      	b.n	8009d56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cba:	d04c      	beq.n	8009d56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d007      	beq.n	8009cd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8009cc2:	f7fe ffbf 	bl	8008c44 <HAL_GetTick>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d241      	bcs.n	8009d56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	330c      	adds	r3, #12
 8009cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cdc:	e853 3f00 	ldrex	r3, [r3]
 8009ce0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	330c      	adds	r3, #12
 8009cf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009cf2:	637a      	str	r2, [r7, #52]	; 0x34
 8009cf4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009cf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cfa:	e841 2300 	strex	r3, r2, [r1]
 8009cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1e5      	bne.n	8009cd2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3314      	adds	r3, #20
 8009d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	e853 3f00 	ldrex	r3, [r3]
 8009d14:	613b      	str	r3, [r7, #16]
   return(result);
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f023 0301 	bic.w	r3, r3, #1
 8009d1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	3314      	adds	r3, #20
 8009d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d26:	623a      	str	r2, [r7, #32]
 8009d28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2a:	69f9      	ldr	r1, [r7, #28]
 8009d2c:	6a3a      	ldr	r2, [r7, #32]
 8009d2e:	e841 2300 	strex	r3, r2, [r1]
 8009d32:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1e5      	bne.n	8009d06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2220      	movs	r2, #32
 8009d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2220      	movs	r2, #32
 8009d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009d52:	2303      	movs	r3, #3
 8009d54:	e00f      	b.n	8009d76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	4013      	ands	r3, r2
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	bf0c      	ite	eq
 8009d66:	2301      	moveq	r3, #1
 8009d68:	2300      	movne	r3, #0
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	79fb      	ldrb	r3, [r7, #7]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d09f      	beq.n	8009cb4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3740      	adds	r7, #64	; 0x40
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
	...

08009d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d84:	b0c0      	sub	sp, #256	; 0x100
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d9c:	68d9      	ldr	r1, [r3, #12]
 8009d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	ea40 0301 	orr.w	r3, r0, r1
 8009da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dae:	689a      	ldr	r2, [r3, #8]
 8009db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	431a      	orrs	r2, r3
 8009db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	431a      	orrs	r2, r3
 8009dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009dd8:	f021 010c 	bic.w	r1, r1, #12
 8009ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009de6:	430b      	orrs	r3, r1
 8009de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dfa:	6999      	ldr	r1, [r3, #24]
 8009dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	ea40 0301 	orr.w	r3, r0, r1
 8009e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	4b8f      	ldr	r3, [pc, #572]	; (800a04c <UART_SetConfig+0x2cc>)
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d005      	beq.n	8009e20 <UART_SetConfig+0xa0>
 8009e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	4b8d      	ldr	r3, [pc, #564]	; (800a050 <UART_SetConfig+0x2d0>)
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d104      	bne.n	8009e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e20:	f7ff fe3c 	bl	8009a9c <HAL_RCC_GetPCLK2Freq>
 8009e24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009e28:	e003      	b.n	8009e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e2a:	f7ff fe23 	bl	8009a74 <HAL_RCC_GetPCLK1Freq>
 8009e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e36:	69db      	ldr	r3, [r3, #28]
 8009e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e3c:	f040 810c 	bne.w	800a058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e44:	2200      	movs	r2, #0
 8009e46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009e52:	4622      	mov	r2, r4
 8009e54:	462b      	mov	r3, r5
 8009e56:	1891      	adds	r1, r2, r2
 8009e58:	65b9      	str	r1, [r7, #88]	; 0x58
 8009e5a:	415b      	adcs	r3, r3
 8009e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e62:	4621      	mov	r1, r4
 8009e64:	eb12 0801 	adds.w	r8, r2, r1
 8009e68:	4629      	mov	r1, r5
 8009e6a:	eb43 0901 	adc.w	r9, r3, r1
 8009e6e:	f04f 0200 	mov.w	r2, #0
 8009e72:	f04f 0300 	mov.w	r3, #0
 8009e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e82:	4690      	mov	r8, r2
 8009e84:	4699      	mov	r9, r3
 8009e86:	4623      	mov	r3, r4
 8009e88:	eb18 0303 	adds.w	r3, r8, r3
 8009e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e90:	462b      	mov	r3, r5
 8009e92:	eb49 0303 	adc.w	r3, r9, r3
 8009e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009eae:	460b      	mov	r3, r1
 8009eb0:	18db      	adds	r3, r3, r3
 8009eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	eb42 0303 	adc.w	r3, r2, r3
 8009eba:	657b      	str	r3, [r7, #84]	; 0x54
 8009ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009ec4:	f7fe f980 	bl	80081c8 <__aeabi_uldivmod>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4b61      	ldr	r3, [pc, #388]	; (800a054 <UART_SetConfig+0x2d4>)
 8009ece:	fba3 2302 	umull	r2, r3, r3, r2
 8009ed2:	095b      	lsrs	r3, r3, #5
 8009ed4:	011c      	lsls	r4, r3, #4
 8009ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009eda:	2200      	movs	r2, #0
 8009edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009ee8:	4642      	mov	r2, r8
 8009eea:	464b      	mov	r3, r9
 8009eec:	1891      	adds	r1, r2, r2
 8009eee:	64b9      	str	r1, [r7, #72]	; 0x48
 8009ef0:	415b      	adcs	r3, r3
 8009ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009ef8:	4641      	mov	r1, r8
 8009efa:	eb12 0a01 	adds.w	sl, r2, r1
 8009efe:	4649      	mov	r1, r9
 8009f00:	eb43 0b01 	adc.w	fp, r3, r1
 8009f04:	f04f 0200 	mov.w	r2, #0
 8009f08:	f04f 0300 	mov.w	r3, #0
 8009f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f18:	4692      	mov	sl, r2
 8009f1a:	469b      	mov	fp, r3
 8009f1c:	4643      	mov	r3, r8
 8009f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8009f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f26:	464b      	mov	r3, r9
 8009f28:	eb4b 0303 	adc.w	r3, fp, r3
 8009f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009f44:	460b      	mov	r3, r1
 8009f46:	18db      	adds	r3, r3, r3
 8009f48:	643b      	str	r3, [r7, #64]	; 0x40
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	eb42 0303 	adc.w	r3, r2, r3
 8009f50:	647b      	str	r3, [r7, #68]	; 0x44
 8009f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009f5a:	f7fe f935 	bl	80081c8 <__aeabi_uldivmod>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4611      	mov	r1, r2
 8009f64:	4b3b      	ldr	r3, [pc, #236]	; (800a054 <UART_SetConfig+0x2d4>)
 8009f66:	fba3 2301 	umull	r2, r3, r3, r1
 8009f6a:	095b      	lsrs	r3, r3, #5
 8009f6c:	2264      	movs	r2, #100	; 0x64
 8009f6e:	fb02 f303 	mul.w	r3, r2, r3
 8009f72:	1acb      	subs	r3, r1, r3
 8009f74:	00db      	lsls	r3, r3, #3
 8009f76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009f7a:	4b36      	ldr	r3, [pc, #216]	; (800a054 <UART_SetConfig+0x2d4>)
 8009f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8009f80:	095b      	lsrs	r3, r3, #5
 8009f82:	005b      	lsls	r3, r3, #1
 8009f84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f88:	441c      	add	r4, r3
 8009f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009f9c:	4642      	mov	r2, r8
 8009f9e:	464b      	mov	r3, r9
 8009fa0:	1891      	adds	r1, r2, r2
 8009fa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8009fa4:	415b      	adcs	r3, r3
 8009fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009fac:	4641      	mov	r1, r8
 8009fae:	1851      	adds	r1, r2, r1
 8009fb0:	6339      	str	r1, [r7, #48]	; 0x30
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	414b      	adcs	r3, r1
 8009fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8009fb8:	f04f 0200 	mov.w	r2, #0
 8009fbc:	f04f 0300 	mov.w	r3, #0
 8009fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009fc4:	4659      	mov	r1, fp
 8009fc6:	00cb      	lsls	r3, r1, #3
 8009fc8:	4651      	mov	r1, sl
 8009fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fce:	4651      	mov	r1, sl
 8009fd0:	00ca      	lsls	r2, r1, #3
 8009fd2:	4610      	mov	r0, r2
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	4642      	mov	r2, r8
 8009fda:	189b      	adds	r3, r3, r2
 8009fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009fe0:	464b      	mov	r3, r9
 8009fe2:	460a      	mov	r2, r1
 8009fe4:	eb42 0303 	adc.w	r3, r2, r3
 8009fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a000:	460b      	mov	r3, r1
 800a002:	18db      	adds	r3, r3, r3
 800a004:	62bb      	str	r3, [r7, #40]	; 0x28
 800a006:	4613      	mov	r3, r2
 800a008:	eb42 0303 	adc.w	r3, r2, r3
 800a00c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a00e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a016:	f7fe f8d7 	bl	80081c8 <__aeabi_uldivmod>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4b0d      	ldr	r3, [pc, #52]	; (800a054 <UART_SetConfig+0x2d4>)
 800a020:	fba3 1302 	umull	r1, r3, r3, r2
 800a024:	095b      	lsrs	r3, r3, #5
 800a026:	2164      	movs	r1, #100	; 0x64
 800a028:	fb01 f303 	mul.w	r3, r1, r3
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	00db      	lsls	r3, r3, #3
 800a030:	3332      	adds	r3, #50	; 0x32
 800a032:	4a08      	ldr	r2, [pc, #32]	; (800a054 <UART_SetConfig+0x2d4>)
 800a034:	fba2 2303 	umull	r2, r3, r2, r3
 800a038:	095b      	lsrs	r3, r3, #5
 800a03a:	f003 0207 	and.w	r2, r3, #7
 800a03e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4422      	add	r2, r4
 800a046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a048:	e105      	b.n	800a256 <UART_SetConfig+0x4d6>
 800a04a:	bf00      	nop
 800a04c:	40011000 	.word	0x40011000
 800a050:	40011400 	.word	0x40011400
 800a054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a05c:	2200      	movs	r2, #0
 800a05e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a062:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a06a:	4642      	mov	r2, r8
 800a06c:	464b      	mov	r3, r9
 800a06e:	1891      	adds	r1, r2, r2
 800a070:	6239      	str	r1, [r7, #32]
 800a072:	415b      	adcs	r3, r3
 800a074:	627b      	str	r3, [r7, #36]	; 0x24
 800a076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a07a:	4641      	mov	r1, r8
 800a07c:	1854      	adds	r4, r2, r1
 800a07e:	4649      	mov	r1, r9
 800a080:	eb43 0501 	adc.w	r5, r3, r1
 800a084:	f04f 0200 	mov.w	r2, #0
 800a088:	f04f 0300 	mov.w	r3, #0
 800a08c:	00eb      	lsls	r3, r5, #3
 800a08e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a092:	00e2      	lsls	r2, r4, #3
 800a094:	4614      	mov	r4, r2
 800a096:	461d      	mov	r5, r3
 800a098:	4643      	mov	r3, r8
 800a09a:	18e3      	adds	r3, r4, r3
 800a09c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a0a0:	464b      	mov	r3, r9
 800a0a2:	eb45 0303 	adc.w	r3, r5, r3
 800a0a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a0aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a0ba:	f04f 0200 	mov.w	r2, #0
 800a0be:	f04f 0300 	mov.w	r3, #0
 800a0c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	008b      	lsls	r3, r1, #2
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0d0:	4621      	mov	r1, r4
 800a0d2:	008a      	lsls	r2, r1, #2
 800a0d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a0d8:	f7fe f876 	bl	80081c8 <__aeabi_uldivmod>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4b60      	ldr	r3, [pc, #384]	; (800a264 <UART_SetConfig+0x4e4>)
 800a0e2:	fba3 2302 	umull	r2, r3, r3, r2
 800a0e6:	095b      	lsrs	r3, r3, #5
 800a0e8:	011c      	lsls	r4, r3, #4
 800a0ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a0f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a0f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a0fc:	4642      	mov	r2, r8
 800a0fe:	464b      	mov	r3, r9
 800a100:	1891      	adds	r1, r2, r2
 800a102:	61b9      	str	r1, [r7, #24]
 800a104:	415b      	adcs	r3, r3
 800a106:	61fb      	str	r3, [r7, #28]
 800a108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a10c:	4641      	mov	r1, r8
 800a10e:	1851      	adds	r1, r2, r1
 800a110:	6139      	str	r1, [r7, #16]
 800a112:	4649      	mov	r1, r9
 800a114:	414b      	adcs	r3, r1
 800a116:	617b      	str	r3, [r7, #20]
 800a118:	f04f 0200 	mov.w	r2, #0
 800a11c:	f04f 0300 	mov.w	r3, #0
 800a120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a124:	4659      	mov	r1, fp
 800a126:	00cb      	lsls	r3, r1, #3
 800a128:	4651      	mov	r1, sl
 800a12a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a12e:	4651      	mov	r1, sl
 800a130:	00ca      	lsls	r2, r1, #3
 800a132:	4610      	mov	r0, r2
 800a134:	4619      	mov	r1, r3
 800a136:	4603      	mov	r3, r0
 800a138:	4642      	mov	r2, r8
 800a13a:	189b      	adds	r3, r3, r2
 800a13c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a140:	464b      	mov	r3, r9
 800a142:	460a      	mov	r2, r1
 800a144:	eb42 0303 	adc.w	r3, r2, r3
 800a148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a14c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	67bb      	str	r3, [r7, #120]	; 0x78
 800a156:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a158:	f04f 0200 	mov.w	r2, #0
 800a15c:	f04f 0300 	mov.w	r3, #0
 800a160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a164:	4649      	mov	r1, r9
 800a166:	008b      	lsls	r3, r1, #2
 800a168:	4641      	mov	r1, r8
 800a16a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a16e:	4641      	mov	r1, r8
 800a170:	008a      	lsls	r2, r1, #2
 800a172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a176:	f7fe f827 	bl	80081c8 <__aeabi_uldivmod>
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	4b39      	ldr	r3, [pc, #228]	; (800a264 <UART_SetConfig+0x4e4>)
 800a180:	fba3 1302 	umull	r1, r3, r3, r2
 800a184:	095b      	lsrs	r3, r3, #5
 800a186:	2164      	movs	r1, #100	; 0x64
 800a188:	fb01 f303 	mul.w	r3, r1, r3
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	011b      	lsls	r3, r3, #4
 800a190:	3332      	adds	r3, #50	; 0x32
 800a192:	4a34      	ldr	r2, [pc, #208]	; (800a264 <UART_SetConfig+0x4e4>)
 800a194:	fba2 2303 	umull	r2, r3, r2, r3
 800a198:	095b      	lsrs	r3, r3, #5
 800a19a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a19e:	441c      	add	r4, r3
 800a1a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	673b      	str	r3, [r7, #112]	; 0x70
 800a1a8:	677a      	str	r2, [r7, #116]	; 0x74
 800a1aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a1ae:	4642      	mov	r2, r8
 800a1b0:	464b      	mov	r3, r9
 800a1b2:	1891      	adds	r1, r2, r2
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	415b      	adcs	r3, r3
 800a1b8:	60fb      	str	r3, [r7, #12]
 800a1ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1be:	4641      	mov	r1, r8
 800a1c0:	1851      	adds	r1, r2, r1
 800a1c2:	6039      	str	r1, [r7, #0]
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	414b      	adcs	r3, r1
 800a1c8:	607b      	str	r3, [r7, #4]
 800a1ca:	f04f 0200 	mov.w	r2, #0
 800a1ce:	f04f 0300 	mov.w	r3, #0
 800a1d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a1d6:	4659      	mov	r1, fp
 800a1d8:	00cb      	lsls	r3, r1, #3
 800a1da:	4651      	mov	r1, sl
 800a1dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1e0:	4651      	mov	r1, sl
 800a1e2:	00ca      	lsls	r2, r1, #3
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	4642      	mov	r2, r8
 800a1ec:	189b      	adds	r3, r3, r2
 800a1ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1f0:	464b      	mov	r3, r9
 800a1f2:	460a      	mov	r2, r1
 800a1f4:	eb42 0303 	adc.w	r3, r2, r3
 800a1f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	663b      	str	r3, [r7, #96]	; 0x60
 800a204:	667a      	str	r2, [r7, #100]	; 0x64
 800a206:	f04f 0200 	mov.w	r2, #0
 800a20a:	f04f 0300 	mov.w	r3, #0
 800a20e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a212:	4649      	mov	r1, r9
 800a214:	008b      	lsls	r3, r1, #2
 800a216:	4641      	mov	r1, r8
 800a218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a21c:	4641      	mov	r1, r8
 800a21e:	008a      	lsls	r2, r1, #2
 800a220:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a224:	f7fd ffd0 	bl	80081c8 <__aeabi_uldivmod>
 800a228:	4602      	mov	r2, r0
 800a22a:	460b      	mov	r3, r1
 800a22c:	4b0d      	ldr	r3, [pc, #52]	; (800a264 <UART_SetConfig+0x4e4>)
 800a22e:	fba3 1302 	umull	r1, r3, r3, r2
 800a232:	095b      	lsrs	r3, r3, #5
 800a234:	2164      	movs	r1, #100	; 0x64
 800a236:	fb01 f303 	mul.w	r3, r1, r3
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	011b      	lsls	r3, r3, #4
 800a23e:	3332      	adds	r3, #50	; 0x32
 800a240:	4a08      	ldr	r2, [pc, #32]	; (800a264 <UART_SetConfig+0x4e4>)
 800a242:	fba2 2303 	umull	r2, r3, r2, r3
 800a246:	095b      	lsrs	r3, r3, #5
 800a248:	f003 020f 	and.w	r2, r3, #15
 800a24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4422      	add	r2, r4
 800a254:	609a      	str	r2, [r3, #8]
}
 800a256:	bf00      	nop
 800a258:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a25c:	46bd      	mov	sp, r7
 800a25e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a262:	bf00      	nop
 800a264:	51eb851f 	.word	0x51eb851f

0800a268 <__libc_init_array>:
 800a268:	b570      	push	{r4, r5, r6, lr}
 800a26a:	4d0d      	ldr	r5, [pc, #52]	; (800a2a0 <__libc_init_array+0x38>)
 800a26c:	4c0d      	ldr	r4, [pc, #52]	; (800a2a4 <__libc_init_array+0x3c>)
 800a26e:	1b64      	subs	r4, r4, r5
 800a270:	10a4      	asrs	r4, r4, #2
 800a272:	2600      	movs	r6, #0
 800a274:	42a6      	cmp	r6, r4
 800a276:	d109      	bne.n	800a28c <__libc_init_array+0x24>
 800a278:	4d0b      	ldr	r5, [pc, #44]	; (800a2a8 <__libc_init_array+0x40>)
 800a27a:	4c0c      	ldr	r4, [pc, #48]	; (800a2ac <__libc_init_array+0x44>)
 800a27c:	f000 f820 	bl	800a2c0 <_init>
 800a280:	1b64      	subs	r4, r4, r5
 800a282:	10a4      	asrs	r4, r4, #2
 800a284:	2600      	movs	r6, #0
 800a286:	42a6      	cmp	r6, r4
 800a288:	d105      	bne.n	800a296 <__libc_init_array+0x2e>
 800a28a:	bd70      	pop	{r4, r5, r6, pc}
 800a28c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a290:	4798      	blx	r3
 800a292:	3601      	adds	r6, #1
 800a294:	e7ee      	b.n	800a274 <__libc_init_array+0xc>
 800a296:	f855 3b04 	ldr.w	r3, [r5], #4
 800a29a:	4798      	blx	r3
 800a29c:	3601      	adds	r6, #1
 800a29e:	e7f2      	b.n	800a286 <__libc_init_array+0x1e>
 800a2a0:	0800a2f8 	.word	0x0800a2f8
 800a2a4:	0800a2f8 	.word	0x0800a2f8
 800a2a8:	0800a2f8 	.word	0x0800a2f8
 800a2ac:	0800a2fc 	.word	0x0800a2fc

0800a2b0 <memset>:
 800a2b0:	4402      	add	r2, r0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d100      	bne.n	800a2ba <memset+0xa>
 800a2b8:	4770      	bx	lr
 800a2ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a2be:	e7f9      	b.n	800a2b4 <memset+0x4>

0800a2c0 <_init>:
 800a2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c2:	bf00      	nop
 800a2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2c6:	bc08      	pop	{r3}
 800a2c8:	469e      	mov	lr, r3
 800a2ca:	4770      	bx	lr

0800a2cc <_fini>:
 800a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ce:	bf00      	nop
 800a2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d2:	bc08      	pop	{r3}
 800a2d4:	469e      	mov	lr, r3
 800a2d6:	4770      	bx	lr
