
Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009100  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08009288  08009288  00019288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093c0  080093c0  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  080093c0  080093c0  000193c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093c8  080093c8  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093c8  080093c8  000193c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093cc  080093cc  000193cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  080093d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020188  2**0
                  CONTENTS
 10 .bss          00001164  20000188  20000188  00020188  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200012ec  200012ec  00020188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bbc  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045d1  00000000  00000000  00032d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  00037348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001200  00000000  00000000  000387c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000260b6  00000000  00000000  000399c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c8e  00000000  00000000  0005fa76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3075  00000000  00000000  00077704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a779  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e3c  00000000  00000000  0014a7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009270 	.word	0x08009270

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	08009270 	.word	0x08009270

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* initialize the bootloader */
  BootInit();
 80004d0:	f007 fbba 	bl	8007c48 <BootInit>
} /*** end of AppInit ***/
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <AppTask>:
**            in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Run the bootloader task. */
  BootTask();
 80004dc:	f007 fbc4 	bl	8007c68 <BootTask>
} /*** end of AppTask ***/
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	691a      	ldr	r2, [r3, #16]
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	4013      	ands	r3, r2
 80004f6:	683a      	ldr	r2, [r7, #0]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	bf0c      	ite	eq
 80004fc:	2301      	moveq	r3, #1
 80004fe:	2300      	movne	r3, #0
 8000500:	b2db      	uxtb	r3, r3
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	683a      	ldr	r2, [r7, #0]
 800051c:	619a      	str	r2, [r3, #24]
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800052a:	b480      	push	{r7}
 800052c:	b083      	sub	sp, #12
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
 8000532:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	041a      	lsls	r2, r3, #16
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	619a      	str	r2, [r3, #24]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000554:	4907      	ldr	r1, [pc, #28]	; (8000574 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4313      	orrs	r3, r2
 800055a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800055e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4013      	ands	r3, r2
 8000564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000566:	68fb      	ldr	r3, [r7, #12]
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	40023800 	.word	0x40023800

08000578 <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* additional and optional backdoor entry through the pushbutton on the board. to
   * force the bootloader to stay active after reset, keep it pressed during reset.
   */
  if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0) != 0)
 800057c:	2101      	movs	r1, #1
 800057e:	4806      	ldr	r0, [pc, #24]	; (8000598 <CpuUserProgramStartHook+0x20>)
 8000580:	f7ff ffb0 	bl	80004e4 <LL_GPIO_IsInputPinSet>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <CpuUserProgramStartHook+0x16>
  {
    /* pushbutton pressed, so do not start the user program and keep the
     * bootloader active instead.
     */
    return BLT_FALSE;
 800058a:	2300      	movs	r3, #0
 800058c:	e002      	b.n	8000594 <CpuUserProgramStartHook+0x1c>
  }

  /* clean up the LED driver */
  LedBlinkExit();
 800058e:	f000 f857 	bl	8000640 <LedBlinkExit>

  /* okay to start the user program */
  return BLT_TRUE;
 8000592:	2301      	movs	r3, #1
} /*** end of CpuUserProgramStartHook ***/
 8000594:	4618      	mov	r0, r3
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020000 	.word	0x40020000

0800059c <UsbConnectHook>:
** \param     connect BLT_TRUE to connect and BLT_FALSE to disconnect.
** \return    none.
**
****************************************************************************************/
void UsbConnectHook(blt_bool connect)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
  static blt_bool initialized = BLT_FALSE;

  /* the connection to the USB bus is typically controlled by software through a digital
   * output. the GPIO pin for this must be configured as such.
   */
  if (initialized == BLT_FALSE)
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <UsbConnectHook+0x64>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d116      	bne.n	80005dc <UsbConnectHook+0x40>
  {
    /* enable the clock for PC11 */
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80005ae:	2004      	movs	r0, #4
 80005b0:	f7ff ffca 	bl	8000548 <LL_AHB1_GRP1_EnableClock>
    /* configure DIS pin as open drain digital output */
    GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80005b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005b8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80005c2:	2301      	movs	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
    LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ca:	f107 0308 	add.w	r3, r7, #8
 80005ce:	4619      	mov	r1, r3
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <UsbConnectHook+0x68>)
 80005d2:	f002 ff5a 	bl	800348a <LL_GPIO_Init>
    /* set to initialized as this part only has to be done once after reset */
    initialized = BLT_TRUE;
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <UsbConnectHook+0x64>)
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]
  }

  /* determine if the USB should be connected or disconnected */
  if (connect == BLT_TRUE)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d105      	bne.n	80005ee <UsbConnectHook+0x52>
  {
    /* the GPIO has a pull-up so to connect to the USB bus the pin needs to go low */
    LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_11);
 80005e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e6:	4807      	ldr	r0, [pc, #28]	; (8000604 <UsbConnectHook+0x68>)
 80005e8:	f7ff ff9f 	bl	800052a <LL_GPIO_ResetOutputPin>
  else
  {
    /* the GPIO has a pull-up so to disconnect to the USB bus the pin needs to go high */
    LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_11);
  }
} /*** end of UsbConnect ***/
 80005ec:	e004      	b.n	80005f8 <UsbConnectHook+0x5c>
    LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_11);
 80005ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <UsbConnectHook+0x68>)
 80005f4:	f7ff ff8b 	bl	800050e <LL_GPIO_SetOutputPin>
} /*** end of UsbConnect ***/
 80005f8:	bf00      	nop
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200001a4 	.word	0x200001a4
 8000604:	40020800 	.word	0x40020800

08000608 <UsbEnterLowPowerModeHook>:
**            to enter a low power mode.
** \return    none.
**
****************************************************************************************/
void UsbEnterLowPowerModeHook(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* support to enter a low power mode can be implemented here */
} /*** end of UsbEnterLowPowerMode ***/
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <UsbLeaveLowPowerModeHook>:
**            exit low power mode.
** \return    none.
**
****************************************************************************************/
void UsbLeaveLowPowerModeHook(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* support to leave a low power mode can be implemented here */
} /*** end of UsbLeaveLowPowerMode ***/
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_GPIO_SetOutputPin>:
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	619a      	str	r2, [r3, #24]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <LedBlinkExit>:
**            exit.
** \return    none.
**
****************************************************************************************/
void LedBlinkExit(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* turn the LED off */
  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_12);
 8000644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <LedBlinkExit+0x14>)
 800064a:	f7ff ffeb 	bl	8000624 <LL_GPIO_SetOutputPin>
} /*** end of LedBlinkExit ***/
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40020c00 	.word	0x40020c00

08000658 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <LL_RCC_HSE_Enable+0x1c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <LL_RCC_HSE_Enable+0x1c>)
 8000662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800

08000678 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <LL_RCC_HSE_IsReady+0x24>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000684:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000688:	bf0c      	ite	eq
 800068a:	2301      	moveq	r3, #1
 800068c:	2300      	movne	r3, #0
 800068e:	b2db      	uxtb	r3, r3
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800

080006a0 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <LL_RCC_SetSysClkSource+0x24>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	f023 0203 	bic.w	r2, r3, #3
 80006b0:	4904      	ldr	r1, [pc, #16]	; (80006c4 <LL_RCC_SetSysClkSource+0x24>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	608b      	str	r3, [r1, #8]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	40023800 	.word	0x40023800

080006c8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006cc:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <LL_RCC_GetSysClkSource+0x18>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	f003 030c 	and.w	r3, r3, #12
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800

080006e4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <LL_RCC_SetAHBPrescaler+0x24>)
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80006f4:	4904      	ldr	r1, [pc, #16]	; (8000708 <LL_RCC_SetAHBPrescaler+0x24>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	608b      	str	r3, [r1, #8]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	40023800 	.word	0x40023800

0800070c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800071c:	4904      	ldr	r1, [pc, #16]	; (8000730 <LL_RCC_SetAPB1Prescaler+0x24>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4313      	orrs	r3, r2
 8000722:	608b      	str	r3, [r1, #8]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	40023800 	.word	0x40023800

08000734 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <LL_RCC_SetAPB2Prescaler+0x24>)
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000744:	4904      	ldr	r1, [pc, #16]	; (8000758 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4313      	orrs	r3, r2
 800074a:	608b      	str	r3, [r1, #8]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	40023800 	.word	0x40023800

0800075c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <LL_RCC_PLL_Enable+0x1c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <LL_RCC_PLL_Enable+0x1c>)
 8000766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <LL_RCC_PLL_IsReady+0x24>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800078c:	bf0c      	ite	eq
 800078e:	2301      	moveq	r3, #1
 8000790:	2300      	movne	r3, #0
 8000792:	b2db      	uxtb	r3, r3
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007b4:	685a      	ldr	r2, [r3, #4]
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80007b8:	4013      	ands	r3, r2
 80007ba:	68f9      	ldr	r1, [r7, #12]
 80007bc:	68ba      	ldr	r2, [r7, #8]
 80007be:	4311      	orrs	r1, r2
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	0192      	lsls	r2, r2, #6
 80007c4:	430a      	orrs	r2, r1
 80007c6:	4908      	ldr	r1, [pc, #32]	; (80007e8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007c8:	4313      	orrs	r3, r2
 80007ca:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80007d4:	4904      	ldr	r1, [pc, #16]	; (80007e8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	4313      	orrs	r3, r2
 80007da:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	40023800 	.word	0x40023800
 80007ec:	ffbf8000 	.word	0xffbf8000

080007f0 <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8000800:	685a      	ldr	r2, [r3, #4]
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 8000804:	4013      	ands	r3, r2
 8000806:	68f9      	ldr	r1, [r7, #12]
 8000808:	68ba      	ldr	r2, [r7, #8]
 800080a:	4311      	orrs	r1, r2
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	0192      	lsls	r2, r2, #6
 8000810:	4311      	orrs	r1, r2
 8000812:	683a      	ldr	r2, [r7, #0]
 8000814:	430a      	orrs	r2, r1
 8000816:	4904      	ldr	r1, [pc, #16]	; (8000828 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8000818:	4313      	orrs	r3, r2
 800081a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	40023800 	.word	0x40023800
 800082c:	f0bf8000 	.word	0xf0bf8000

08000830 <LL_AHB1_GRP1_EnableClock>:
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800083a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800083c:	4907      	ldr	r1, [pc, #28]	; (800085c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4313      	orrs	r3, r2
 8000842:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4013      	ands	r3, r2
 800084c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800084e:	68fb      	ldr	r3, [r7, #12]
}
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	40023800 	.word	0x40023800

08000860 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <LL_APB1_GRP1_EnableClock+0x2c>)
 800086a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800086c:	4907      	ldr	r1, [pc, #28]	; (800088c <LL_APB1_GRP1_EnableClock+0x2c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4313      	orrs	r3, r2
 8000872:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4013      	ands	r3, r2
 800087c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800087e:	68fb      	ldr	r3, [r7, #12]
}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	40023800 	.word	0x40023800

08000890 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <LL_FLASH_SetLatency+0x24>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f023 0207 	bic.w	r2, r3, #7
 80008a0:	4904      	ldr	r1, [pc, #16]	; (80008b4 <LL_FLASH_SetLatency+0x24>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	600b      	str	r3, [r1, #0]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40023c00 	.word	0x40023c00

080008b8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <LL_FLASH_GetLatency+0x18>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f003 0307 	and.w	r3, r3, #7
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023c00 	.word	0x40023c00

080008d4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80008e4:	4904      	ldr	r1, [pc, #16]	; (80008f8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	600b      	str	r3, [r1, #0]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	40007000 	.word	0x40007000

080008fc <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000908:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800090c:	bf0c      	ite	eq
 800090e:	2301      	moveq	r3, #1
 8000910:	2300      	movne	r3, #0
 8000912:	b2db      	uxtb	r3, r3
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40007000 	.word	0x40007000

08000924 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	60da      	str	r2, [r3, #12]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	691b      	ldr	r3, [r3, #16]
 8000950:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	615a      	str	r2, [r3, #20]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <LL_GPIO_ResetOutputPin>:
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	041a      	lsls	r2, r3, #16
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	619a      	str	r2, [r3, #24]
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000992:	f000 fa1f 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000996:	f000 f809 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f000 f8af 	bl	8000afc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800099e:	f000 f85d 	bl	8000a5c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  AppInit();
 80009a2:	f7ff fd93 	bl	80004cc <AppInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  AppTask();
 80009a6:	f7ff fd97 	bl	80004d8 <AppTask>
 80009aa:	e7fc      	b.n	80009a6 <main+0x18>

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80009b0:	2005      	movs	r0, #5
 80009b2:	f7ff ff6d 	bl	8000890 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 80009b6:	bf00      	nop
 80009b8:	f7ff ff7e 	bl	80008b8 <LL_FLASH_GetLatency>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b05      	cmp	r3, #5
 80009c0:	d1fa      	bne.n	80009b8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80009c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009c6:	f7ff ff85 	bl	80008d4 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80009ca:	bf00      	nop
 80009cc:	f7ff ff96 	bl	80008fc <LL_PWR_IsActiveFlag_VOS>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0fa      	beq.n	80009cc <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSE_Enable();
 80009d6:	f7ff fe3f 	bl	8000658 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80009da:	bf00      	nop
 80009dc:	f7ff fe4c 	bl	8000678 <LL_RCC_HSE_IsReady>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d1fa      	bne.n	80009dc <SystemClock_Config+0x30>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 80009e6:	2300      	movs	r3, #0
 80009e8:	22a8      	movs	r2, #168	; 0xa8
 80009ea:	2104      	movs	r1, #4
 80009ec:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80009f0:	f7ff fed8 	bl	80007a4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLQ_DIV_7);
 80009f4:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 80009f8:	22a8      	movs	r2, #168	; 0xa8
 80009fa:	2104      	movs	r1, #4
 80009fc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000a00:	f7ff fef6 	bl	80007f0 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 8000a04:	f7ff feaa 	bl	800075c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000a08:	bf00      	nop
 8000a0a:	f7ff feb7 	bl	800077c <LL_RCC_PLL_IsReady>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d1fa      	bne.n	8000a0a <SystemClock_Config+0x5e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff fe65 	bl	80006e4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000a1a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000a1e:	f7ff fe75 	bl	800070c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000a22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a26:	f7ff fe85 	bl	8000734 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f7ff fe38 	bl	80006a0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a30:	bf00      	nop
 8000a32:	f7ff fe49 	bl	80006c8 <LL_RCC_GetSysClkSource>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b08      	cmp	r3, #8
 8000a3a:	d1fa      	bne.n	8000a32 <SystemClock_Config+0x86>
  {

  }
  LL_SetSystemCoreClock(168000000);
 8000a3c:	4806      	ldr	r0, [pc, #24]	; (8000a58 <SystemClock_Config+0xac>)
 8000a3e:	f004 fe55 	bl	80056ec <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000a42:	200f      	movs	r0, #15
 8000a44:	f000 fa1c 	bl	8000e80 <HAL_InitTick>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a4e:	f000 f8c5 	bl	8000bdc <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	0a037a00 	.word	0x0a037a00

08000a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08e      	sub	sp, #56	; 0x38
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]
 8000a72:	615a      	str	r2, [r3, #20]
 8000a74:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000a86:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a8a:	f7ff fee9 	bl	8000860 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff fece 	bl	8000830 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000a94:	230c      	movs	r3, #12
 8000a96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4810      	ldr	r0, [pc, #64]	; (8000af4 <MX_USART2_UART_Init+0x98>)
 8000ab2:	f002 fcea 	bl	800348a <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000ab6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000aba:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000ac8:	230c      	movs	r3, #12
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <MX_USART2_UART_Init+0x9c>)
 8000adc:	f003 f8e8 	bl	8003cb0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_USART2_UART_Init+0x9c>)
 8000ae2:	f7ff ff2f 	bl	8000944 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000ae6:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_USART2_UART_Init+0x9c>)
 8000ae8:	f7ff ff1c 	bl	8000924 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	3738      	adds	r7, #56	; 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40020000 	.word	0x40020000
 8000af8:	40004400 	.word	0x40004400

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	463b      	mov	r3, r7
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
 8000b10:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000b12:	2080      	movs	r0, #128	; 0x80
 8000b14:	f7ff fe8c 	bl	8000830 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f7ff fe89 	bl	8000830 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f7ff fe86 	bl	8000830 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000b24:	2008      	movs	r0, #8
 8000b26:	f7ff fe83 	bl	8000830 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000b2a:	2004      	movs	r0, #4
 8000b2c:	f7ff fe80 	bl	8000830 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8000b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b34:	4825      	ldr	r0, [pc, #148]	; (8000bcc <MX_GPIO_Init+0xd0>)
 8000b36:	f7ff ff1b 	bl	8000970 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12);
 8000b3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3e:	4824      	ldr	r0, [pc, #144]	; (8000bd0 <MX_GPIO_Init+0xd4>)
 8000b40:	f7ff ff16 	bl	8000970 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_12);
 8000b44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b48:	4822      	ldr	r0, [pc, #136]	; (8000bd4 <MX_GPIO_Init+0xd8>)
 8000b4a:	f7ff ff11 	bl	8000970 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <MX_GPIO_Init+0xdc>)
 8000b60:	f002 fc93 	bl	800348a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b68:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4813      	ldr	r0, [pc, #76]	; (8000bcc <MX_GPIO_Init+0xd0>)
 8000b80:	f002 fc83 	bl	800348a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b88:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <MX_GPIO_Init+0xd4>)
 8000ba0:	f002 fc73 	bl	800348a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000baa:	2301      	movs	r3, #1
 8000bac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_GPIO_Init+0xd8>)
 8000bc0:	f002 fc63 	bl	800348a <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc4:	bf00      	nop
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40020400 	.word	0x40020400
 8000bd0:	40020c00 	.word	0x40020c00
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020000 	.word	0x40020000

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <HAL_MspInit+0x4c>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800

08000c38 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c58:	d132      	bne.n	8000cc0 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <HAL_PCD_MspInit+0x90>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <HAL_PCD_MspInit+0x90>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_PCD_MspInit+0x90>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c88:	230a      	movs	r3, #10
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	480e      	ldr	r0, [pc, #56]	; (8000ccc <HAL_PCD_MspInit+0x94>)
 8000c94:	f000 fd1a 	bl	80016cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_PCD_MspInit+0x90>)
 8000c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_PCD_MspInit+0x90>)
 8000c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca2:	6353      	str	r3, [r2, #52]	; 0x34
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <HAL_PCD_MspInit+0x90>)
 8000caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cac:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <HAL_PCD_MspInit+0x90>)
 8000cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb2:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <HAL_PCD_MspInit+0x90>)
 8000cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3728      	adds	r7, #40	; 0x28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <HAL_PCD_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspDeInit(PCD_HandleTypeDef* hpcd)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB_OTG_FS)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ce0:	d10a      	bne.n	8000cf8 <HAL_PCD_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <HAL_PCD_MspDeInit+0x30>)
 8000ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce6:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_PCD_MspDeInit+0x30>)
 8000ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000cec:	6353      	str	r3, [r2, #52]	; 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 8000cee:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000cf2:	4804      	ldr	r0, [pc, #16]	; (8000d04 <HAL_PCD_MspDeInit+0x34>)
 8000cf4:	f000 fe86 	bl	8001a04 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 f8c4 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d86:	490e      	ldr	r1, [pc, #56]	; (8000dc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d88:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d9c:	4c0b      	ldr	r4, [pc, #44]	; (8000dcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000daa:	f7ff ffd7 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f008 fa3b 	bl	8009228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fdec 	bl	800098e <main>
  bx  lr    
 8000db6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000db8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8000dc4:	080093d0 	.word	0x080093d0
  ldr r2, =_sbss
 8000dc8:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8000dcc:	200012ec 	.word	0x200012ec

08000dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <HAL_Init+0x40>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_Init+0x40>)
 8000dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_Init+0x40>)
 8000df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f959 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	200f      	movs	r0, #15
 8000e04:	f000 f83c 	bl	8000e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff feee 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023c00 	.word	0x40023c00

08000e18 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <HAL_DeInit+0x54>)
 8000e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e22:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_DeInit+0x54>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <HAL_DeInit+0x54>)
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_DeInit+0x54>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_DeInit+0x54>)
 8000e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_DeInit+0x54>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_DeInit+0x54>)
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <HAL_DeInit+0x54>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_DeInit+0x54>)
 8000e56:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5a:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_DeInit+0x54>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000e62:	f000 f805 	bl	8000e70 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40023800 	.word	0x40023800

08000e70 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x54>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x58>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f92f 	bl	8001102 <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d80a      	bhi.n	8000eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 f905 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_InitTick+0x5c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	200006b4 	.word	0x200006b4

08000f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f006 faf8 	bl	8007504 <HAL_GetTick>
 8000f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f20:	d005      	beq.n	8000f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_Delay+0x44>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2e:	bf00      	nop
 8000f30:	f006 fae8 	bl	8007504 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d8f7      	bhi.n	8000f30 <HAL_Delay+0x28>
  {
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff47 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff5c 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffb0 	bl	8001070 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <HAL_FLASH_Program+0xa0>)
 8001130:	7e1b      	ldrb	r3, [r3, #24]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d101      	bne.n	800113a <HAL_FLASH_Program+0x1e>
 8001136:	2302      	movs	r3, #2
 8001138:	e03b      	b.n	80011b2 <HAL_FLASH_Program+0x96>
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_FLASH_Program+0xa0>)
 800113c:	2201      	movs	r2, #1
 800113e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001140:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001144:	f000 f870 	bl	8001228 <FLASH_WaitForLastOperation>
 8001148:	4603      	mov	r3, r0
 800114a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d12b      	bne.n	80011aa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d105      	bne.n	8001164 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001158:	783b      	ldrb	r3, [r7, #0]
 800115a:	4619      	mov	r1, r3
 800115c:	68b8      	ldr	r0, [r7, #8]
 800115e:	f000 f91b 	bl	8001398 <FLASH_Program_Byte>
 8001162:	e016      	b.n	8001192 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d105      	bne.n	8001176 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800116a:	883b      	ldrh	r3, [r7, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	68b8      	ldr	r0, [r7, #8]
 8001170:	f000 f8ee 	bl	8001350 <FLASH_Program_HalfWord>
 8001174:	e00d      	b.n	8001192 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d105      	bne.n	8001188 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	4619      	mov	r1, r3
 8001180:	68b8      	ldr	r0, [r7, #8]
 8001182:	f000 f8c3 	bl	800130c <FLASH_Program_Word>
 8001186:	e004      	b.n	8001192 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800118c:	68b8      	ldr	r0, [r7, #8]
 800118e:	f000 f88b 	bl	80012a8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001192:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001196:	f000 f847 	bl	8001228 <FLASH_WaitForLastOperation>
 800119a:	4603      	mov	r3, r0
 800119c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_FLASH_Program+0xa4>)
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_FLASH_Program+0xa4>)
 80011a4:	f023 0301 	bic.w	r3, r3, #1
 80011a8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <HAL_FLASH_Program+0xa0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	761a      	strb	r2, [r3, #24]
  
  return status;
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200006b8 	.word	0x200006b8
 80011c0:	40023c00 	.word	0x40023c00

080011c4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_FLASH_Unlock+0x38>)
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	da0b      	bge.n	80011ee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_FLASH_Unlock+0x38>)
 80011d8:	4a09      	ldr	r2, [pc, #36]	; (8001200 <HAL_FLASH_Unlock+0x3c>)
 80011da:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <HAL_FLASH_Unlock+0x38>)
 80011de:	4a09      	ldr	r2, [pc, #36]	; (8001204 <HAL_FLASH_Unlock+0x40>)
 80011e0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_FLASH_Unlock+0x38>)
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da01      	bge.n	80011ee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80011ee:	79fb      	ldrb	r3, [r7, #7]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40023c00 	.word	0x40023c00
 8001200:	45670123 	.word	0x45670123
 8001204:	cdef89ab 	.word	0xcdef89ab

08001208 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_FLASH_Lock+0x1c>)
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	4a04      	ldr	r2, [pc, #16]	; (8001224 <HAL_FLASH_Lock+0x1c>)
 8001212:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001216:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	40023c00 	.word	0x40023c00

08001228 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <FLASH_WaitForLastOperation+0x78>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800123a:	f006 f963 	bl	8007504 <HAL_GetTick>
 800123e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001240:	e010      	b.n	8001264 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001248:	d00c      	beq.n	8001264 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d007      	beq.n	8001260 <FLASH_WaitForLastOperation+0x38>
 8001250:	f006 f958 	bl	8007504 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	429a      	cmp	r2, r3
 800125e:	d201      	bcs.n	8001264 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e019      	b.n	8001298 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <FLASH_WaitForLastOperation+0x7c>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1e8      	bne.n	8001242 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <FLASH_WaitForLastOperation+0x7c>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d002      	beq.n	8001282 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <FLASH_WaitForLastOperation+0x7c>)
 800127e:	2201      	movs	r2, #1
 8001280:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <FLASH_WaitForLastOperation+0x7c>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800128e:	f000 f8a5 	bl	80013dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
  
}  
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200006b8 	.word	0x200006b8
 80012a4:	40023c00 	.word	0x40023c00

080012a8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <FLASH_Program_DoubleWord+0x60>)
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	4a13      	ldr	r2, [pc, #76]	; (8001308 <FLASH_Program_DoubleWord+0x60>)
 80012ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <FLASH_Program_DoubleWord+0x60>)
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	4a10      	ldr	r2, [pc, #64]	; (8001308 <FLASH_Program_DoubleWord+0x60>)
 80012c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80012ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <FLASH_Program_DoubleWord+0x60>)
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <FLASH_Program_DoubleWord+0x60>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80012de:	f3bf 8f6f 	isb	sy
}
 80012e2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80012e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	000a      	movs	r2, r1
 80012f2:	2300      	movs	r3, #0
 80012f4:	68f9      	ldr	r1, [r7, #12]
 80012f6:	3104      	adds	r1, #4
 80012f8:	4613      	mov	r3, r2
 80012fa:	600b      	str	r3, [r1, #0]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	40023c00 	.word	0x40023c00

0800130c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <FLASH_Program_Word+0x40>)
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	4a0c      	ldr	r2, [pc, #48]	; (800134c <FLASH_Program_Word+0x40>)
 800131c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001320:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <FLASH_Program_Word+0x40>)
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	4a09      	ldr	r2, [pc, #36]	; (800134c <FLASH_Program_Word+0x40>)
 8001328:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <FLASH_Program_Word+0x40>)
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	4a06      	ldr	r2, [pc, #24]	; (800134c <FLASH_Program_Word+0x40>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	601a      	str	r2, [r3, #0]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40023c00 	.word	0x40023c00

08001350 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800135c:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <FLASH_Program_HalfWord+0x44>)
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <FLASH_Program_HalfWord+0x44>)
 8001362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001366:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <FLASH_Program_HalfWord+0x44>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	4a09      	ldr	r2, [pc, #36]	; (8001394 <FLASH_Program_HalfWord+0x44>)
 800136e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001372:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <FLASH_Program_HalfWord+0x44>)
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <FLASH_Program_HalfWord+0x44>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	801a      	strh	r2, [r3, #0]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023c00 	.word	0x40023c00

08001398 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <FLASH_Program_Byte+0x40>)
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <FLASH_Program_Byte+0x40>)
 80013aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <FLASH_Program_Byte+0x40>)
 80013b2:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <FLASH_Program_Byte+0x40>)
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <FLASH_Program_Byte+0x40>)
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <FLASH_Program_Byte+0x40>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	78fa      	ldrb	r2, [r7, #3]
 80013c8:	701a      	strb	r2, [r3, #0]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023c00 	.word	0x40023c00

080013dc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <FLASH_SetErrorCode+0xa4>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <FLASH_SetErrorCode+0xa8>)
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	f043 0310 	orr.w	r3, r3, #16
 80013f4:	4a23      	ldr	r2, [pc, #140]	; (8001484 <FLASH_SetErrorCode+0xa8>)
 80013f6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <FLASH_SetErrorCode+0xa4>)
 80013fa:	2210      	movs	r2, #16
 80013fc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <FLASH_SetErrorCode+0xa4>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f003 0320 	and.w	r3, r3, #32
 8001406:	2b00      	cmp	r3, #0
 8001408:	d008      	beq.n	800141c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800140a:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <FLASH_SetErrorCode+0xa8>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f043 0308 	orr.w	r3, r3, #8
 8001412:	4a1c      	ldr	r2, [pc, #112]	; (8001484 <FLASH_SetErrorCode+0xa8>)
 8001414:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <FLASH_SetErrorCode+0xa4>)
 8001418:	2220      	movs	r2, #32
 800141a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <FLASH_SetErrorCode+0xa4>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001424:	2b00      	cmp	r3, #0
 8001426:	d008      	beq.n	800143a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <FLASH_SetErrorCode+0xa8>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <FLASH_SetErrorCode+0xa8>)
 8001432:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <FLASH_SetErrorCode+0xa4>)
 8001436:	2240      	movs	r2, #64	; 0x40
 8001438:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <FLASH_SetErrorCode+0xa4>)
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001442:	2b00      	cmp	r3, #0
 8001444:	d008      	beq.n	8001458 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <FLASH_SetErrorCode+0xa8>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <FLASH_SetErrorCode+0xa8>)
 8001450:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <FLASH_SetErrorCode+0xa4>)
 8001454:	2280      	movs	r2, #128	; 0x80
 8001456:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <FLASH_SetErrorCode+0xa4>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d008      	beq.n	8001476 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <FLASH_SetErrorCode+0xa8>)
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	f043 0320 	orr.w	r3, r3, #32
 800146c:	4a05      	ldr	r2, [pc, #20]	; (8001484 <FLASH_SetErrorCode+0xa8>)
 800146e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <FLASH_SetErrorCode+0xa4>)
 8001472:	2202      	movs	r2, #2
 8001474:	60da      	str	r2, [r3, #12]
  }
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40023c00 	.word	0x40023c00
 8001484:	200006b8 	.word	0x200006b8

08001488 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <HAL_FLASHEx_Erase+0xd8>)
 800149c:	7e1b      	ldrb	r3, [r3, #24]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <HAL_FLASHEx_Erase+0x1e>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e058      	b.n	8001558 <HAL_FLASHEx_Erase+0xd0>
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <HAL_FLASHEx_Erase+0xd8>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014b0:	f7ff feba 	bl	8001228 <FLASH_WaitForLastOperation>
 80014b4:	4603      	mov	r3, r0
 80014b6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d148      	bne.n	8001550 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d115      	bne.n	80014fa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4619      	mov	r1, r3
 80014da:	4610      	mov	r0, r2
 80014dc:	f000 f844 	bl	8001568 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014e4:	f7ff fea0 	bl	8001228 <FLASH_WaitForLastOperation>
 80014e8:	4603      	mov	r3, r0
 80014ea:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <HAL_FLASHEx_Erase+0xdc>)
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <HAL_FLASHEx_Erase+0xdc>)
 80014f2:	f023 0304 	bic.w	r3, r3, #4
 80014f6:	6113      	str	r3, [r2, #16]
 80014f8:	e028      	b.n	800154c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	e01c      	b.n	800153c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4619      	mov	r1, r3
 800150a:	68b8      	ldr	r0, [r7, #8]
 800150c:	f000 f850 	bl	80015b0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001510:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001514:	f7ff fe88 	bl	8001228 <FLASH_WaitForLastOperation>
 8001518:	4603      	mov	r3, r0
 800151a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_FLASHEx_Erase+0xdc>)
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	4a10      	ldr	r2, [pc, #64]	; (8001564 <HAL_FLASHEx_Erase+0xdc>)
 8001522:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001526:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	601a      	str	r2, [r3, #0]
          break;
 8001534:	e00a      	b.n	800154c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3301      	adds	r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4413      	add	r3, r2
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	429a      	cmp	r2, r3
 800154a:	d3da      	bcc.n	8001502 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800154c:	f000 f878 	bl	8001640 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_FLASHEx_Erase+0xd8>)
 8001552:	2200      	movs	r2, #0
 8001554:	761a      	strb	r2, [r3, #24]

  return status;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200006b8 	.word	0x200006b8
 8001564:	40023c00 	.word	0x40023c00

08001568 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <FLASH_MassErase+0x44>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <FLASH_MassErase+0x44>)
 800157a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800157e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <FLASH_MassErase+0x44>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	4a09      	ldr	r2, [pc, #36]	; (80015ac <FLASH_MassErase+0x44>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <FLASH_MassErase+0x44>)
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	4313      	orrs	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <FLASH_MassErase+0x44>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159c:	6113      	str	r3, [r2, #16]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d102      	bne.n	80015cc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	e010      	b.n	80015ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d103      	bne.n	80015da <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80015d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	e009      	b.n	80015ee <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d103      	bne.n	80015e8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80015e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	e002      	b.n	80015ee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80015e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <FLASH_Erase_Sector+0x8c>)
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <FLASH_Erase_Sector+0x8c>)
 80015f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <FLASH_Erase_Sector+0x8c>)
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	490f      	ldr	r1, [pc, #60]	; (800163c <FLASH_Erase_Sector+0x8c>)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <FLASH_Erase_Sector+0x8c>)
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	4a0c      	ldr	r2, [pc, #48]	; (800163c <FLASH_Erase_Sector+0x8c>)
 800160c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001610:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <FLASH_Erase_Sector+0x8c>)
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4313      	orrs	r3, r2
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <FLASH_Erase_Sector+0x8c>)
 800161e:	f043 0302 	orr.w	r3, r3, #2
 8001622:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <FLASH_Erase_Sector+0x8c>)
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <FLASH_Erase_Sector+0x8c>)
 800162a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162e:	6113      	str	r3, [r2, #16]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40023c00 	.word	0x40023c00

08001640 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001644:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <FLASH_FlushCaches+0x88>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800164c:	2b00      	cmp	r3, #0
 800164e:	d017      	beq.n	8001680 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <FLASH_FlushCaches+0x88>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <FLASH_FlushCaches+0x88>)
 8001656:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800165a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <FLASH_FlushCaches+0x88>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a19      	ldr	r2, [pc, #100]	; (80016c8 <FLASH_FlushCaches+0x88>)
 8001662:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <FLASH_FlushCaches+0x88>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a16      	ldr	r2, [pc, #88]	; (80016c8 <FLASH_FlushCaches+0x88>)
 800166e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001672:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <FLASH_FlushCaches+0x88>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <FLASH_FlushCaches+0x88>)
 800167a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <FLASH_FlushCaches+0x88>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001688:	2b00      	cmp	r3, #0
 800168a:	d017      	beq.n	80016bc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800168c:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <FLASH_FlushCaches+0x88>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <FLASH_FlushCaches+0x88>)
 8001692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001696:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <FLASH_FlushCaches+0x88>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <FLASH_FlushCaches+0x88>)
 800169e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <FLASH_FlushCaches+0x88>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <FLASH_FlushCaches+0x88>)
 80016aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <FLASH_FlushCaches+0x88>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <FLASH_FlushCaches+0x88>)
 80016b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ba:	6013      	str	r3, [r2, #0]
  }
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023c00 	.word	0x40023c00

080016cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	e16b      	b.n	80019c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e8:	2201      	movs	r2, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	429a      	cmp	r2, r3
 8001702:	f040 815a 	bne.w	80019ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b01      	cmp	r3, #1
 8001710:	d005      	beq.n	800171e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171a:	2b02      	cmp	r3, #2
 800171c:	d130      	bne.n	8001780 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2203      	movs	r2, #3
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001754:	2201      	movs	r2, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 0201 	and.w	r2, r3, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b03      	cmp	r3, #3
 800178a:	d017      	beq.n	80017bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d123      	bne.n	8001810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	220f      	movs	r2, #15
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	08da      	lsrs	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3208      	adds	r2, #8
 800180a:	69b9      	ldr	r1, [r7, #24]
 800180c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0203 	and.w	r2, r3, #3
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80b4 	beq.w	80019ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b60      	ldr	r3, [pc, #384]	; (80019d8 <HAL_GPIO_Init+0x30c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	4a5f      	ldr	r2, [pc, #380]	; (80019d8 <HAL_GPIO_Init+0x30c>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001860:	6453      	str	r3, [r2, #68]	; 0x44
 8001862:	4b5d      	ldr	r3, [pc, #372]	; (80019d8 <HAL_GPIO_Init+0x30c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800186e:	4a5b      	ldr	r2, [pc, #364]	; (80019dc <HAL_GPIO_Init+0x310>)
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	220f      	movs	r2, #15
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <HAL_GPIO_Init+0x314>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d02b      	beq.n	80018f2 <HAL_GPIO_Init+0x226>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a51      	ldr	r2, [pc, #324]	; (80019e4 <HAL_GPIO_Init+0x318>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d025      	beq.n	80018ee <HAL_GPIO_Init+0x222>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a50      	ldr	r2, [pc, #320]	; (80019e8 <HAL_GPIO_Init+0x31c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d01f      	beq.n	80018ea <HAL_GPIO_Init+0x21e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4f      	ldr	r2, [pc, #316]	; (80019ec <HAL_GPIO_Init+0x320>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d019      	beq.n	80018e6 <HAL_GPIO_Init+0x21a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4e      	ldr	r2, [pc, #312]	; (80019f0 <HAL_GPIO_Init+0x324>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d013      	beq.n	80018e2 <HAL_GPIO_Init+0x216>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4d      	ldr	r2, [pc, #308]	; (80019f4 <HAL_GPIO_Init+0x328>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00d      	beq.n	80018de <HAL_GPIO_Init+0x212>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4c      	ldr	r2, [pc, #304]	; (80019f8 <HAL_GPIO_Init+0x32c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d007      	beq.n	80018da <HAL_GPIO_Init+0x20e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4b      	ldr	r2, [pc, #300]	; (80019fc <HAL_GPIO_Init+0x330>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d101      	bne.n	80018d6 <HAL_GPIO_Init+0x20a>
 80018d2:	2307      	movs	r3, #7
 80018d4:	e00e      	b.n	80018f4 <HAL_GPIO_Init+0x228>
 80018d6:	2308      	movs	r3, #8
 80018d8:	e00c      	b.n	80018f4 <HAL_GPIO_Init+0x228>
 80018da:	2306      	movs	r3, #6
 80018dc:	e00a      	b.n	80018f4 <HAL_GPIO_Init+0x228>
 80018de:	2305      	movs	r3, #5
 80018e0:	e008      	b.n	80018f4 <HAL_GPIO_Init+0x228>
 80018e2:	2304      	movs	r3, #4
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x228>
 80018e6:	2303      	movs	r3, #3
 80018e8:	e004      	b.n	80018f4 <HAL_GPIO_Init+0x228>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e002      	b.n	80018f4 <HAL_GPIO_Init+0x228>
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <HAL_GPIO_Init+0x228>
 80018f2:	2300      	movs	r3, #0
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	f002 0203 	and.w	r2, r2, #3
 80018fa:	0092      	lsls	r2, r2, #2
 80018fc:	4093      	lsls	r3, r2
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001904:	4935      	ldr	r1, [pc, #212]	; (80019dc <HAL_GPIO_Init+0x310>)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	3302      	adds	r3, #2
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001912:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <HAL_GPIO_Init+0x334>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001936:	4a32      	ldr	r2, [pc, #200]	; (8001a00 <HAL_GPIO_Init+0x334>)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800193c:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <HAL_GPIO_Init+0x334>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001960:	4a27      	ldr	r2, [pc, #156]	; (8001a00 <HAL_GPIO_Init+0x334>)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <HAL_GPIO_Init+0x334>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800198a:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <HAL_GPIO_Init+0x334>)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <HAL_GPIO_Init+0x334>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019b4:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <HAL_GPIO_Init+0x334>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3301      	adds	r3, #1
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b0f      	cmp	r3, #15
 80019c4:	f67f ae90 	bls.w	80016e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3724      	adds	r7, #36	; 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40013800 	.word	0x40013800
 80019e0:	40020000 	.word	0x40020000
 80019e4:	40020400 	.word	0x40020400
 80019e8:	40020800 	.word	0x40020800
 80019ec:	40020c00 	.word	0x40020c00
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40021400 	.word	0x40021400
 80019f8:	40021800 	.word	0x40021800
 80019fc:	40021c00 	.word	0x40021c00
 8001a00:	40013c00 	.word	0x40013c00

08001a04 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e0cd      	b.n	8001bbc <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a20:	2201      	movs	r2, #1
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	f040 80bd 	bne.w	8001bb6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001a3c:	4a65      	ldr	r2, [pc, #404]	; (8001bd4 <HAL_GPIO_DeInit+0x1d0>)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a5d      	ldr	r2, [pc, #372]	; (8001bd8 <HAL_GPIO_DeInit+0x1d4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d02b      	beq.n	8001abe <HAL_GPIO_DeInit+0xba>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a5c      	ldr	r2, [pc, #368]	; (8001bdc <HAL_GPIO_DeInit+0x1d8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d025      	beq.n	8001aba <HAL_GPIO_DeInit+0xb6>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a5b      	ldr	r2, [pc, #364]	; (8001be0 <HAL_GPIO_DeInit+0x1dc>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d01f      	beq.n	8001ab6 <HAL_GPIO_DeInit+0xb2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a5a      	ldr	r2, [pc, #360]	; (8001be4 <HAL_GPIO_DeInit+0x1e0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d019      	beq.n	8001ab2 <HAL_GPIO_DeInit+0xae>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a59      	ldr	r2, [pc, #356]	; (8001be8 <HAL_GPIO_DeInit+0x1e4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_GPIO_DeInit+0xaa>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a58      	ldr	r2, [pc, #352]	; (8001bec <HAL_GPIO_DeInit+0x1e8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00d      	beq.n	8001aaa <HAL_GPIO_DeInit+0xa6>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a57      	ldr	r2, [pc, #348]	; (8001bf0 <HAL_GPIO_DeInit+0x1ec>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d007      	beq.n	8001aa6 <HAL_GPIO_DeInit+0xa2>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a56      	ldr	r2, [pc, #344]	; (8001bf4 <HAL_GPIO_DeInit+0x1f0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_GPIO_DeInit+0x9e>
 8001a9e:	2307      	movs	r3, #7
 8001aa0:	e00e      	b.n	8001ac0 <HAL_GPIO_DeInit+0xbc>
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	e00c      	b.n	8001ac0 <HAL_GPIO_DeInit+0xbc>
 8001aa6:	2306      	movs	r3, #6
 8001aa8:	e00a      	b.n	8001ac0 <HAL_GPIO_DeInit+0xbc>
 8001aaa:	2305      	movs	r3, #5
 8001aac:	e008      	b.n	8001ac0 <HAL_GPIO_DeInit+0xbc>
 8001aae:	2304      	movs	r3, #4
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_DeInit+0xbc>
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e004      	b.n	8001ac0 <HAL_GPIO_DeInit+0xbc>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e002      	b.n	8001ac0 <HAL_GPIO_DeInit+0xbc>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_GPIO_DeInit+0xbc>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	f002 0203 	and.w	r2, r2, #3
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	4093      	lsls	r3, r2
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d132      	bne.n	8001b36 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_GPIO_DeInit+0x1f4>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	4947      	ldr	r1, [pc, #284]	; (8001bf8 <HAL_GPIO_DeInit+0x1f4>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001ade:	4b46      	ldr	r3, [pc, #280]	; (8001bf8 <HAL_GPIO_DeInit+0x1f4>)
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4944      	ldr	r1, [pc, #272]	; (8001bf8 <HAL_GPIO_DeInit+0x1f4>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001aec:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <HAL_GPIO_DeInit+0x1f4>)
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	4940      	ldr	r1, [pc, #256]	; (8001bf8 <HAL_GPIO_DeInit+0x1f4>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001afa:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <HAL_GPIO_DeInit+0x1f4>)
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	493d      	ldr	r1, [pc, #244]	; (8001bf8 <HAL_GPIO_DeInit+0x1f4>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	220f      	movs	r2, #15
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001b18:	4a2e      	ldr	r2, [pc, #184]	; (8001bd4 <HAL_GPIO_DeInit+0x1d0>)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	43da      	mvns	r2, r3
 8001b28:	482a      	ldr	r0, [pc, #168]	; (8001bd4 <HAL_GPIO_DeInit+0x1d0>)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	400a      	ands	r2, r1
 8001b30:	3302      	adds	r3, #2
 8001b32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2103      	movs	r1, #3
 8001b40:	fa01 f303 	lsl.w	r3, r1, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	401a      	ands	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	220f      	movs	r2, #15
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	08d2      	lsrs	r2, r2, #3
 8001b6c:	4019      	ands	r1, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3208      	adds	r2, #8
 8001b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	2103      	movs	r1, #3
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	401a      	ands	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	2101      	movs	r1, #1
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2103      	movs	r1, #3
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2b0f      	cmp	r3, #15
 8001bc0:	f67f af2e 	bls.w	8001a20 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	40020000 	.word	0x40020000
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020c00 	.word	0x40020c00
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40021400 	.word	0x40021400
 8001bf0:	40021800 	.word	0x40021800
 8001bf4:	40021c00 	.word	0x40021c00
 8001bf8:	40013c00 	.word	0x40013c00

08001bfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfe:	b08f      	sub	sp, #60	; 0x3c
 8001c00:	af0a      	add	r7, sp, #40	; 0x28
 8001c02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e10f      	b.n	8001e2e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d106      	bne.n	8001c2e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff f805 	bl	8000c38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2203      	movs	r2, #3
 8001c32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d102      	bne.n	8001c48 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 f9c4 	bl	8003fda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	687e      	ldr	r6, [r7, #4]
 8001c5a:	466d      	mov	r5, sp
 8001c5c:	f106 0410 	add.w	r4, r6, #16
 8001c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c70:	1d33      	adds	r3, r6, #4
 8001c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c74:	6838      	ldr	r0, [r7, #0]
 8001c76:	f002 f89b 	bl	8003db0 <USB_CoreInit>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d005      	beq.n	8001c8c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0d0      	b.n	8001e2e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f002 f9b2 	bl	8003ffc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e04a      	b.n	8001d34 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	333d      	adds	r3, #61	; 0x3d
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	333c      	adds	r3, #60	; 0x3c
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	b298      	uxth	r0, r3
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3344      	adds	r3, #68	; 0x44
 8001cda:	4602      	mov	r2, r0
 8001cdc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	3340      	adds	r3, #64	; 0x40
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	3348      	adds	r3, #72	; 0x48
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d06:	7bfa      	ldrb	r2, [r7, #15]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	440b      	add	r3, r1
 8001d14:	334c      	adds	r3, #76	; 0x4c
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	3354      	adds	r3, #84	; 0x54
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	3301      	adds	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d3af      	bcc.n	8001c9e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
 8001d42:	e044      	b.n	8001dce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d86:	7bfa      	ldrb	r2, [r7, #15]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d3b5      	bcc.n	8001d44 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	687e      	ldr	r6, [r7, #4]
 8001de0:	466d      	mov	r5, sp
 8001de2:	f106 0410 	add.w	r4, r6, #16
 8001de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001df2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001df6:	1d33      	adds	r3, r6, #4
 8001df8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dfa:	6838      	ldr	r0, [r7, #0]
 8001dfc:	f002 f94a 	bl	8004094 <USB_DevInit>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d005      	beq.n	8001e12 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2202      	movs	r2, #2
 8001e0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00d      	b.n	8001e2e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 fae8 	bl	80053fc <USB_DevDisconnect>

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e36 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e015      	b.n	8001e74 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 fa3b 	bl	80052d0 <USB_StopDevice>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e007      	b.n	8001e74 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7fe ff33 	bl	8000cd0 <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_PCD_Start+0x1c>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e020      	b.n	8001eda <HAL_PCD_Start+0x5e>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d109      	bne.n	8001ebc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d005      	beq.n	8001ebc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f002 f879 	bl	8003fb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 fa75 	bl	80053ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_PCD_Stop+0x1c>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e026      	b.n	8001f4c <HAL_PCD_Stop+0x6a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f002 f865 	bl	8003fda <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 fa71 	bl	80053fc <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2110      	movs	r1, #16
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 fa1b 	bl	800435c <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d109      	bne.n	8001f42 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d005      	beq.n	8001f42 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b08d      	sub	sp, #52	; 0x34
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 fafa 	bl	8005564 <USB_GetMode>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f040 848a 	bne.w	800288c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fa5e 	bl	800543e <USB_ReadInterrupts>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 8480 	beq.w	800288a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	0a1b      	lsrs	r3, r3, #8
 8001f94:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 fa4b 	bl	800543e <USB_ReadInterrupts>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d107      	bne.n	8001fc2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f002 0202 	and.w	r2, r2, #2
 8001fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 fa39 	bl	800543e <USB_ReadInterrupts>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d161      	bne.n	800209a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0210 	bic.w	r2, r2, #16
 8001fe4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	f003 020f 	and.w	r2, r3, #15
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	3304      	adds	r3, #4
 8002004:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	0c5b      	lsrs	r3, r3, #17
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	2b02      	cmp	r3, #2
 8002010:	d124      	bne.n	800205c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d035      	beq.n	800208a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002028:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800202c:	b29b      	uxth	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	6a38      	ldr	r0, [r7, #32]
 8002032:	f003 f821 	bl	8005078 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002042:	441a      	add	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	6a1a      	ldr	r2, [r3, #32]
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	091b      	lsrs	r3, r3, #4
 8002050:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002054:	441a      	add	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	621a      	str	r2, [r3, #32]
 800205a:	e016      	b.n	800208a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	0c5b      	lsrs	r3, r3, #17
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	2b06      	cmp	r3, #6
 8002066:	d110      	bne.n	800208a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800206e:	2208      	movs	r2, #8
 8002070:	4619      	mov	r1, r3
 8002072:	6a38      	ldr	r0, [r7, #32]
 8002074:	f003 f800 	bl	8005078 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	6a1a      	ldr	r2, [r3, #32]
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	091b      	lsrs	r3, r3, #4
 8002080:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002084:	441a      	add	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699a      	ldr	r2, [r3, #24]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0210 	orr.w	r2, r2, #16
 8002098:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 f9cd 	bl	800543e <USB_ReadInterrupts>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020ae:	f040 80a7 	bne.w	8002200 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 f9d2 	bl	8005464 <USB_ReadDevAllOutEpInterrupt>
 80020c0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020c2:	e099      	b.n	80021f8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 808e 	beq.w	80021ec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	4611      	mov	r1, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f003 f9f6 	bl	80054cc <USB_ReadDevOutEPInterrupt>
 80020e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00c      	beq.n	8002106 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f8:	461a      	mov	r2, r3
 80020fa:	2301      	movs	r3, #1
 80020fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 ff1f 	bl	8002f44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00c      	beq.n	800212a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	4413      	add	r3, r2
 8002118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800211c:	461a      	mov	r2, r3
 800211e:	2308      	movs	r3, #8
 8002120:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fff5 	bl	8003114 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	4413      	add	r3, r2
 800213c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002140:	461a      	mov	r2, r3
 8002142:	2310      	movs	r3, #16
 8002144:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d030      	beq.n	80021b2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002158:	2b80      	cmp	r3, #128	; 0x80
 800215a:	d109      	bne.n	8002170 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800216a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	3304      	adds	r3, #4
 8002184:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	78db      	ldrb	r3, [r3, #3]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d108      	bne.n	80021a0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2200      	movs	r2, #0
 8002192:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	b2db      	uxtb	r3, r3
 8002198:	4619      	mov	r1, r3
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f006 fd50 	bl	8008c40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ac:	461a      	mov	r2, r3
 80021ae:	2302      	movs	r3, #2
 80021b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	015a      	lsls	r2, r3, #5
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c8:	461a      	mov	r2, r3
 80021ca:	2320      	movs	r3, #32
 80021cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d009      	beq.n	80021ec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e4:	461a      	mov	r2, r3
 80021e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	3301      	adds	r3, #1
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f4:	085b      	lsrs	r3, r3, #1
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f47f af62 	bne.w	80020c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f003 f91a 	bl	800543e <USB_ReadInterrupts>
 800220a:	4603      	mov	r3, r0
 800220c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002210:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002214:	f040 80db 	bne.w	80023ce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f003 f93b 	bl	8005498 <USB_ReadDevAllInEpInterrupt>
 8002222:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002228:	e0cd      	b.n	80023c6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80c2 	beq.w	80023ba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f003 f961 	bl	8005508 <USB_ReadDevInEPInterrupt>
 8002246:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d057      	beq.n	8002302 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	2201      	movs	r2, #1
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	43db      	mvns	r3, r3
 800226c:	69f9      	ldr	r1, [r7, #28]
 800226e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002272:	4013      	ands	r3, r2
 8002274:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	4413      	add	r3, r2
 800227e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002282:	461a      	mov	r2, r3
 8002284:	2301      	movs	r3, #1
 8002286:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d132      	bne.n	80022f6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	334c      	adds	r3, #76	; 0x4c
 80022a0:	6819      	ldr	r1, [r3, #0]
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4403      	add	r3, r0
 80022b0:	3348      	adds	r3, #72	; 0x48
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4419      	add	r1, r3
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4403      	add	r3, r0
 80022c4:	334c      	adds	r3, #76	; 0x4c
 80022c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d113      	bne.n	80022f6 <HAL_PCD_IRQHandler+0x3a2>
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	3354      	adds	r3, #84	; 0x54
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d108      	bne.n	80022f6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022ee:	461a      	mov	r2, r3
 80022f0:	2101      	movs	r1, #1
 80022f2:	f003 f969 	bl	80055c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	4619      	mov	r1, r3
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f006 fc17 	bl	8008b30 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	015a      	lsls	r2, r3, #5
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	4413      	add	r3, r2
 8002314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002318:	461a      	mov	r2, r3
 800231a:	2308      	movs	r3, #8
 800231c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	4413      	add	r3, r2
 8002330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002334:	461a      	mov	r2, r3
 8002336:	2310      	movs	r3, #16
 8002338:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	4413      	add	r3, r2
 800234c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002350:	461a      	mov	r2, r3
 8002352:	2340      	movs	r3, #64	; 0x40
 8002354:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d023      	beq.n	80023a8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002362:	6a38      	ldr	r0, [r7, #32]
 8002364:	f001 fffa 	bl	800435c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	3338      	adds	r3, #56	; 0x38
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	4413      	add	r3, r2
 8002378:	3304      	adds	r3, #4
 800237a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	78db      	ldrb	r3, [r3, #3]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d108      	bne.n	8002396 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2200      	movs	r2, #0
 8002388:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	b2db      	uxtb	r3, r3
 800238e:	4619      	mov	r1, r3
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f006 fc67 	bl	8008c64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	4413      	add	r3, r2
 800239e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a2:	461a      	mov	r2, r3
 80023a4:	2302      	movs	r3, #2
 80023a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 fd37 	bl	8002e28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	3301      	adds	r3, #1
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f47f af2e 	bne.w	800222a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f003 f833 	bl	800543e <USB_ReadInterrupts>
 80023d8:	4603      	mov	r3, r0
 80023da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023e2:	d122      	bne.n	800242a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023f2:	f023 0301 	bic.w	r3, r3, #1
 80023f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d108      	bne.n	8002414 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800240a:	2100      	movs	r1, #0
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 ff1f 	bl	8003250 <HAL_PCDEx_LPM_Callback>
 8002412:	e002      	b.n	800241a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f006 fc03 	bl	8008c20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002428:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f003 f805 	bl	800543e <USB_ReadInterrupts>
 8002434:	4603      	mov	r3, r0
 8002436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800243e:	d112      	bne.n	8002466 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b01      	cmp	r3, #1
 800244e:	d102      	bne.n	8002456 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f006 fbbd 	bl	8008bd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002464:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f002 ffe7 	bl	800543e <USB_ReadInterrupts>
 8002470:	4603      	mov	r3, r0
 8002472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247a:	f040 80b7 	bne.w	80025ec <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2110      	movs	r1, #16
 8002498:	4618      	mov	r0, r3
 800249a:	f001 ff5f 	bl	800435c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249e:	2300      	movs	r3, #0
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a2:	e046      	b.n	8002532 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b0:	461a      	mov	r2, r3
 80024b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024b6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c8:	0151      	lsls	r1, r2, #5
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	440a      	add	r2, r1
 80024ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e4:	461a      	mov	r2, r3
 80024e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024ea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024fc:	0151      	lsls	r1, r2, #5
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	440a      	add	r2, r1
 8002502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002506:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800250a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	4413      	add	r3, r2
 8002514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251c:	0151      	lsls	r1, r2, #5
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	440a      	add	r2, r1
 8002522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002526:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800252a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	3301      	adds	r3, #1
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002538:	429a      	cmp	r2, r3
 800253a:	d3b3      	bcc.n	80024a4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800254a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800254e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	2b00      	cmp	r3, #0
 8002556:	d016      	beq.n	8002586 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002568:	f043 030b 	orr.w	r3, r3, #11
 800256c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800257e:	f043 030b 	orr.w	r3, r3, #11
 8002582:	6453      	str	r3, [r2, #68]	; 0x44
 8002584:	e015      	b.n	80025b2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002594:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002598:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800259c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ac:	f043 030b 	orr.w	r3, r3, #11
 80025b0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025c4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025d6:	461a      	mov	r2, r3
 80025d8:	f002 fff6 	bl	80055c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f002 ff24 	bl	800543e <USB_ReadInterrupts>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002600:	d124      	bne.n	800264c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f002 ffba 	bl	8005580 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f001 ff20 	bl	8004456 <USB_GetDevSpeed>
 8002616:	4603      	mov	r3, r0
 8002618:	461a      	mov	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681c      	ldr	r4, [r3, #0]
 8002622:	f000 fe21 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 8002626:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	4620      	mov	r0, r4
 8002632:	f001 fc1f 	bl	8003e74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f006 faa2 	bl	8008b80 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800264a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f002 fef4 	bl	800543e <USB_ReadInterrupts>
 8002656:	4603      	mov	r3, r0
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b08      	cmp	r3, #8
 800265e:	d10a      	bne.n	8002676 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f006 fa7f 	bl	8008b64 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f002 0208 	and.w	r2, r2, #8
 8002674:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f002 fedf 	bl	800543e <USB_ReadInterrupts>
 8002680:	4603      	mov	r3, r0
 8002682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002686:	2b80      	cmp	r3, #128	; 0x80
 8002688:	d122      	bne.n	80026d0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002696:	2301      	movs	r3, #1
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
 800269a:	e014      	b.n	80026c6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	4619      	mov	r1, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fb83 	bl	8002dc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	3301      	adds	r3, #1
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d3e5      	bcc.n	800269c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f002 feb2 	bl	800543e <USB_ReadInterrupts>
 80026da:	4603      	mov	r3, r0
 80026dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026e4:	d13b      	bne.n	800275e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026e6:	2301      	movs	r3, #1
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ea:	e02b      	b.n	8002744 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002700:	4613      	mov	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	3340      	adds	r3, #64	; 0x40
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d115      	bne.n	800273e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002712:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002714:	2b00      	cmp	r3, #0
 8002716:	da12      	bge.n	800273e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	333f      	adds	r3, #63	; 0x3f
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002734:	b2db      	uxtb	r3, r3
 8002736:	4619      	mov	r1, r3
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fb44 	bl	8002dc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	3301      	adds	r3, #1
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274a:	429a      	cmp	r2, r3
 800274c:	d3ce      	bcc.n	80026ec <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695a      	ldr	r2, [r3, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800275c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f002 fe6b 	bl	800543e <USB_ReadInterrupts>
 8002768:	4603      	mov	r3, r0
 800276a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002772:	d155      	bne.n	8002820 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002774:	2301      	movs	r3, #1
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
 8002778:	e045      	b.n	8002806 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	4413      	add	r3, r2
 8002782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d12e      	bne.n	8002800 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027a2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	da2b      	bge.n	8002800 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80027b4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d121      	bne.n	8002800 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10a      	bne.n	8002800 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027fc:	6053      	str	r3, [r2, #4]
            break;
 80027fe:	e007      	b.n	8002810 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	3301      	adds	r3, #1
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280c:	429a      	cmp	r2, r3
 800280e:	d3b4      	bcc.n	800277a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800281e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f002 fe0a 	bl	800543e <USB_ReadInterrupts>
 800282a:	4603      	mov	r3, r0
 800282c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002834:	d10a      	bne.n	800284c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f006 fa26 	bl	8008c88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800284a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f002 fdf4 	bl	800543e <USB_ReadInterrupts>
 8002856:	4603      	mov	r3, r0
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b04      	cmp	r3, #4
 800285e:	d115      	bne.n	800288c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f006 fa19 	bl	8008caa <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	430a      	orrs	r2, r1
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	e000      	b.n	800288c <HAL_PCD_IRQHandler+0x938>
      return;
 800288a:	bf00      	nop
    }
  }
}
 800288c:	3734      	adds	r7, #52	; 0x34
 800288e:	46bd      	mov	sp, r7
 8002890:	bd90      	pop	{r4, r7, pc}

08002892 <HAL_PCD_DevConnect>:
  * @brief  Connect the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_PCD_DevConnect+0x1c>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e01b      	b.n	80028e6 <HAL_PCD_DevConnect+0x54>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d109      	bne.n	80028d2 <HAL_PCD_DevConnect+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d005      	beq.n	80028d2 <HAL_PCD_DevConnect+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  (void)USB_DevConnect(hpcd->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 fd6f 	bl	80053ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_PCD_DevDisconnect>:
  * @brief  Disconnect the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_PCD_DevDisconnect+0x1c>
 8002906:	2302      	movs	r3, #2
 8002908:	e01b      	b.n	8002942 <HAL_PCD_DevDisconnect+0x54>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DevDisconnect(hpcd->Instance);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f002 fd70 	bl	80053fc <USB_DevDisconnect>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	2b01      	cmp	r3, #1
 8002922:	d109      	bne.n	8002938 <HAL_PCD_DevDisconnect+0x4a>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002928:	2b01      	cmp	r3, #1
 800292a:	d005      	beq.n	8002938 <HAL_PCD_DevDisconnect+0x4a>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	460b      	mov	r3, r1
 8002954:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_PCD_SetAddress+0x1a>
 8002960:	2302      	movs	r3, #2
 8002962:	e013      	b.n	800298c <HAL_PCD_SetAddress+0x42>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f002 fcf6 	bl	800536e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	4608      	mov	r0, r1
 800299e:	4611      	mov	r1, r2
 80029a0:	461a      	mov	r2, r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	70fb      	strb	r3, [r7, #3]
 80029a6:	460b      	mov	r3, r1
 80029a8:	803b      	strh	r3, [r7, #0]
 80029aa:	4613      	mov	r3, r2
 80029ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	da0f      	bge.n	80029da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 020f 	and.w	r2, r3, #15
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	3338      	adds	r3, #56	; 0x38
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	3304      	adds	r3, #4
 80029d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2201      	movs	r2, #1
 80029d6:	705a      	strb	r2, [r3, #1]
 80029d8:	e00f      	b.n	80029fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	f003 020f 	and.w	r2, r3, #15
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	4413      	add	r3, r2
 80029f0:	3304      	adds	r3, #4
 80029f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a06:	883a      	ldrh	r2, [r7, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	78ba      	ldrb	r2, [r7, #2]
 8002a10:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	785b      	ldrb	r3, [r3, #1]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d004      	beq.n	8002a24 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a24:	78bb      	ldrb	r3, [r7, #2]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d102      	bne.n	8002a30 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_PCD_EP_Open+0xaa>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e00e      	b.n	8002a5c <HAL_PCD_EP_Open+0xc8>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68f9      	ldr	r1, [r7, #12]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f001 fd27 	bl	80044a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002a5a:	7afb      	ldrb	r3, [r7, #11]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	da0f      	bge.n	8002a98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	f003 020f 	and.w	r2, r3, #15
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	3338      	adds	r3, #56	; 0x38
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2201      	movs	r2, #1
 8002a94:	705a      	strb	r2, [r3, #1]
 8002a96:	e00f      	b.n	8002ab8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	f003 020f 	and.w	r2, r3, #15
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	3304      	adds	r3, #4
 8002ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_PCD_EP_Close+0x6e>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e00e      	b.n	8002af0 <HAL_PCD_EP_Close+0x8c>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68f9      	ldr	r1, [r7, #12]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 fd65 	bl	80045b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	460b      	mov	r3, r1
 8002b06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b08:	7afb      	ldrb	r3, [r7, #11]
 8002b0a:	f003 020f 	and.w	r2, r3, #15
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3304      	adds	r3, #4
 8002b20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2200      	movs	r2, #0
 8002b32:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2200      	movs	r2, #0
 8002b38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b3a:	7afb      	ldrb	r3, [r7, #11]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d102      	bne.n	8002b54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b54:	7afb      	ldrb	r3, [r7, #11]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	6979      	ldr	r1, [r7, #20]
 8002b6c:	f002 f844 	bl	8004bf8 <USB_EP0StartXfer>
 8002b70:	e008      	b.n	8002b84 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	6979      	ldr	r1, [r7, #20]
 8002b80:	f001 fdf2 	bl	8004768 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	460b      	mov	r3, r1
 8002b98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	f003 020f 	and.w	r2, r3, #15
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002bb0:	681b      	ldr	r3, [r3, #0]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bce:	7afb      	ldrb	r3, [r7, #11]
 8002bd0:	f003 020f 	and.w	r2, r3, #15
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	3338      	adds	r3, #56	; 0x38
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4413      	add	r3, r2
 8002be2:	3304      	adds	r3, #4
 8002be4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d102      	bne.n	8002c18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c18:	7afb      	ldrb	r3, [r7, #11]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	6979      	ldr	r1, [r7, #20]
 8002c30:	f001 ffe2 	bl	8004bf8 <USB_EP0StartXfer>
 8002c34:	e008      	b.n	8002c48 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	6979      	ldr	r1, [r7, #20]
 8002c44:	f001 fd90 	bl	8004768 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	f003 020f 	and.w	r2, r3, #15
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d901      	bls.n	8002c70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e050      	b.n	8002d12 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	da0f      	bge.n	8002c98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	f003 020f 	and.w	r2, r3, #15
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	3338      	adds	r3, #56	; 0x38
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2201      	movs	r2, #1
 8002c94:	705a      	strb	r2, [r3, #1]
 8002c96:	e00d      	b.n	8002cb4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	3304      	adds	r3, #4
 8002cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_PCD_EP_SetStall+0x82>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e01e      	b.n	8002d12 <HAL_PCD_EP_SetStall+0xc0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68f9      	ldr	r1, [r7, #12]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f002 fa20 	bl	8005128 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10a      	bne.n	8002d08 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	b2d9      	uxtb	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d02:	461a      	mov	r2, r3
 8002d04:	f002 fc60 	bl	80055c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	f003 020f 	and.w	r2, r3, #15
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d901      	bls.n	8002d38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e042      	b.n	8002dbe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	da0f      	bge.n	8002d60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	f003 020f 	and.w	r2, r3, #15
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	3338      	adds	r3, #56	; 0x38
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	3304      	adds	r3, #4
 8002d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	705a      	strb	r2, [r3, #1]
 8002d5e:	e00f      	b.n	8002d80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	f003 020f 	and.w	r2, r3, #15
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	3304      	adds	r3, #4
 8002d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_PCD_EP_ClrStall+0x86>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e00e      	b.n	8002dbe <HAL_PCD_EP_ClrStall+0xa4>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68f9      	ldr	r1, [r7, #12]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f002 fa28 	bl	8005204 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	da0c      	bge.n	8002df4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 020f 	and.w	r2, r3, #15
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	3338      	adds	r3, #56	; 0x38
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	3304      	adds	r3, #4
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	e00c      	b.n	8002e0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	f003 020f 	and.w	r2, r3, #15
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68f9      	ldr	r1, [r7, #12]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f002 f847 	bl	8004ea8 <USB_EPStopXfer>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	; 0x28
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	3338      	adds	r3, #56	; 0x38
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a1a      	ldr	r2, [r3, #32]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d901      	bls.n	8002e60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e06c      	b.n	8002f3a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	699a      	ldr	r2, [r3, #24]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d902      	bls.n	8002e7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	3303      	adds	r3, #3
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e84:	e02b      	b.n	8002ede <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	699a      	ldr	r2, [r3, #24]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d902      	bls.n	8002ea2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3303      	adds	r3, #3
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6919      	ldr	r1, [r3, #16]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	6978      	ldr	r0, [r7, #20]
 8002ec2:	f002 f89b 	bl	8004ffc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	441a      	add	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1a      	ldr	r2, [r3, #32]
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	441a      	add	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d809      	bhi.n	8002f08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a1a      	ldr	r2, [r3, #32]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d203      	bcs.n	8002f08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1be      	bne.n	8002e86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	699a      	ldr	r2, [r3, #24]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d811      	bhi.n	8002f38 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	6939      	ldr	r1, [r7, #16]
 8002f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f34:	4013      	ands	r3, r2
 8002f36:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3720      	adds	r7, #32
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	333c      	adds	r3, #60	; 0x3c
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d17b      	bne.n	8003072 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d015      	beq.n	8002fb0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	4a61      	ldr	r2, [pc, #388]	; (800310c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	f240 80b9 	bls.w	8003100 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80b3 	beq.w	8003100 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fac:	6093      	str	r3, [r2, #8]
 8002fae:	e0a7      	b.n	8003100 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2320      	movs	r3, #32
 8002fca:	6093      	str	r3, [r2, #8]
 8002fcc:	e098      	b.n	8003100 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f040 8093 	bne.w	8003100 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	4a4b      	ldr	r2, [pc, #300]	; (800310c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d90f      	bls.n	8003002 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ffe:	6093      	str	r3, [r2, #8]
 8003000:	e07e      	b.n	8003100 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	3304      	adds	r3, #4
 8003016:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	0159      	lsls	r1, r3, #5
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	440b      	add	r3, r1
 8003024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302e:	1ad2      	subs	r2, r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d114      	bne.n	8003064 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800304c:	461a      	mov	r2, r3
 800304e:	2101      	movs	r1, #1
 8003050:	f002 faba 	bl	80055c8 <USB_EP0_OutStart>
 8003054:	e006      	b.n	8003064 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	441a      	add	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	4619      	mov	r1, r3
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f005 fd45 	bl	8008afa <HAL_PCD_DataOutStageCallback>
 8003070:	e046      	b.n	8003100 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	4a26      	ldr	r2, [pc, #152]	; (8003110 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d124      	bne.n	80030c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	4413      	add	r3, r2
 800308c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003090:	461a      	mov	r2, r3
 8003092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003096:	6093      	str	r3, [r2, #8]
 8003098:	e032      	b.n	8003100 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b0:	461a      	mov	r2, r3
 80030b2:	2320      	movs	r3, #32
 80030b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	4619      	mov	r1, r3
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f005 fd1c 	bl	8008afa <HAL_PCD_DataOutStageCallback>
 80030c2:	e01d      	b.n	8003100 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d114      	bne.n	80030f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d108      	bne.n	80030f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030ec:	461a      	mov	r2, r3
 80030ee:	2100      	movs	r1, #0
 80030f0:	f002 fa6a 	bl	80055c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	4619      	mov	r1, r3
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f005 fcfd 	bl	8008afa <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3720      	adds	r7, #32
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	4f54300a 	.word	0x4f54300a
 8003110:	4f54310a 	.word	0x4f54310a

08003114 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	333c      	adds	r3, #60	; 0x3c
 800312c:	3304      	adds	r3, #4
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4413      	add	r3, r2
 800313a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4a15      	ldr	r2, [pc, #84]	; (800319c <PCD_EP_OutSetupPacket_int+0x88>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d90e      	bls.n	8003168 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003150:	2b00      	cmp	r3, #0
 8003152:	d009      	beq.n	8003168 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003160:	461a      	mov	r2, r3
 8003162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003166:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f005 fcb4 	bl	8008ad6 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a0a      	ldr	r2, [pc, #40]	; (800319c <PCD_EP_OutSetupPacket_int+0x88>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d90c      	bls.n	8003190 <PCD_EP_OutSetupPacket_int+0x7c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d108      	bne.n	8003190 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003188:	461a      	mov	r2, r3
 800318a:	2101      	movs	r1, #1
 800318c:	f002 fa1c 	bl	80055c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	4f54300a 	.word	0x4f54300a

080031a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	70fb      	strb	r3, [r7, #3]
 80031ac:	4613      	mov	r3, r2
 80031ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d107      	bne.n	80031ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031be:	883b      	ldrh	r3, [r7, #0]
 80031c0:	0419      	lsls	r1, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28
 80031cc:	e028      	b.n	8003220 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	0c1b      	lsrs	r3, r3, #16
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	4413      	add	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031dc:	2300      	movs	r3, #0
 80031de:	73fb      	strb	r3, [r7, #15]
 80031e0:	e00d      	b.n	80031fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	3340      	adds	r3, #64	; 0x40
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	4413      	add	r3, r2
 80031f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	3301      	adds	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	3b01      	subs	r3, #1
 8003204:	429a      	cmp	r2, r3
 8003206:	d3ec      	bcc.n	80031e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003208:	883b      	ldrh	r3, [r7, #0]
 800320a:	0418      	lsls	r0, r3, #16
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6819      	ldr	r1, [r3, #0]
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	3b01      	subs	r3, #1
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	4302      	orrs	r2, r0
 8003218:	3340      	adds	r3, #64	; 0x40
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	460b      	mov	r3, r1
 8003238:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <HAL_RCC_GetHCLKFreq+0x14>)
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000000 	.word	0x20000000

08003280 <LL_GPIO_SetPinMode>:
{
 8003280:	b480      	push	{r7}
 8003282:	b089      	sub	sp, #36	; 0x24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	fa93 f3a3 	rbit	r3, r3
 800329a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2103      	movs	r1, #3
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	401a      	ands	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	61bb      	str	r3, [r7, #24]
  return result;
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	431a      	orrs	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	601a      	str	r2, [r3, #0]
}
 80032d2:	bf00      	nop
 80032d4:	3724      	adds	r7, #36	; 0x24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <LL_GPIO_SetPinOutputType>:
{
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	401a      	ands	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	431a      	orrs	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	605a      	str	r2, [r3, #4]
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <LL_GPIO_SetPinSpeed>:
{
 800330e:	b480      	push	{r7}
 8003310:	b089      	sub	sp, #36	; 0x24
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	fa93 f3a3 	rbit	r3, r3
 8003328:	613b      	str	r3, [r7, #16]
  return result;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	b2db      	uxtb	r3, r3
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	2103      	movs	r1, #3
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	401a      	ands	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	61bb      	str	r3, [r7, #24]
  return result;
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	fa01 f303 	lsl.w	r3, r1, r3
 800335a:	431a      	orrs	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	609a      	str	r2, [r3, #8]
}
 8003360:	bf00      	nop
 8003362:	3724      	adds	r7, #36	; 0x24
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <LL_GPIO_SetPinPull>:
{
 800336c:	b480      	push	{r7}
 800336e:	b089      	sub	sp, #36	; 0x24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	fa93 f3a3 	rbit	r3, r3
 8003386:	613b      	str	r3, [r7, #16]
  return result;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	2103      	movs	r1, #3
 8003394:	fa01 f303 	lsl.w	r3, r1, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	401a      	ands	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	61bb      	str	r3, [r7, #24]
  return result;
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	fa01 f303 	lsl.w	r3, r1, r3
 80033b8:	431a      	orrs	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	60da      	str	r2, [r3, #12]
}
 80033be:	bf00      	nop
 80033c0:	3724      	adds	r7, #36	; 0x24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <LL_GPIO_SetAFPin_0_7>:
{
 80033ca:	b480      	push	{r7}
 80033cc:	b089      	sub	sp, #36	; 0x24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a1a      	ldr	r2, [r3, #32]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	fa93 f3a3 	rbit	r3, r3
 80033e4:	613b      	str	r3, [r7, #16]
  return result;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	210f      	movs	r1, #15
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	401a      	ands	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa93 f3a3 	rbit	r3, r3
 8003404:	61bb      	str	r3, [r7, #24]
  return result;
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	431a      	orrs	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	621a      	str	r2, [r3, #32]
}
 800341c:	bf00      	nop
 800341e:	3724      	adds	r7, #36	; 0x24
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <LL_GPIO_SetAFPin_8_15>:
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	; 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	0a1b      	lsrs	r3, r3, #8
 800343c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	613b      	str	r3, [r7, #16]
  return result;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	fab3 f383 	clz	r3, r3
 800344c:	b2db      	uxtb	r3, r3
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	210f      	movs	r1, #15
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	401a      	ands	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	0a1b      	lsrs	r3, r3, #8
 800345e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	61bb      	str	r3, [r7, #24]
  return result;
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	fa01 f303 	lsl.w	r3, r1, r3
 8003478:	431a      	orrs	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800347e:	bf00      	nop
 8003480:	3724      	adds	r7, #36	; 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b088      	sub	sp, #32
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003498:	2300      	movs	r3, #0
 800349a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	613b      	str	r3, [r7, #16]
  return result;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80034b4:	e050      	b.n	8003558 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	2101      	movs	r1, #1
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	fa01 f303 	lsl.w	r3, r1, r3
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d042      	beq.n	8003552 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d003      	beq.n	80034dc <LL_GPIO_Init+0x52>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d10d      	bne.n	80034f8 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	461a      	mov	r2, r3
 80034e2:	69b9      	ldr	r1, [r7, #24]
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff12 	bl	800330e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	461a      	mov	r2, r3
 80034f0:	69b9      	ldr	r1, [r7, #24]
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff fef3 	bl	80032de <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	461a      	mov	r2, r3
 80034fe:	69b9      	ldr	r1, [r7, #24]
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ff33 	bl	800336c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d11a      	bne.n	8003544 <LL_GPIO_Init+0xba>
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	60bb      	str	r3, [r7, #8]
  return result;
 800351a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b07      	cmp	r3, #7
 8003524:	d807      	bhi.n	8003536 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	461a      	mov	r2, r3
 800352c:	69b9      	ldr	r1, [r7, #24]
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7ff ff4b 	bl	80033ca <LL_GPIO_SetAFPin_0_7>
 8003534:	e006      	b.n	8003544 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	461a      	mov	r2, r3
 800353c:	69b9      	ldr	r1, [r7, #24]
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff ff72 	bl	8003428 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	461a      	mov	r2, r3
 800354a:	69b9      	ldr	r1, [r7, #24]
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff fe97 	bl	8003280 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3301      	adds	r3, #1
 8003556:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	fa22 f303 	lsr.w	r3, r2, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1a7      	bne.n	80034b6 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3720      	adds	r7, #32
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <LL_RCC_GetSysClkSource>:
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <LL_RCC_GetSysClkSource+0x18>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 030c 	and.w	r3, r3, #12
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800

0800358c <LL_RCC_GetAHBPrescaler>:
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <LL_RCC_GetAHBPrescaler+0x18>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800

080035a8 <LL_RCC_GetAPB1Prescaler>:
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800

080035c4 <LL_RCC_GetAPB2Prescaler>:
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80035c8:	4b04      	ldr	r3, [pc, #16]	; (80035dc <LL_RCC_GetAPB2Prescaler+0x18>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800

080035e0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <LL_RCC_PLL_GetMainSource+0x18>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800

080035fc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <LL_RCC_PLL_GetN+0x18>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	099b      	lsrs	r3, r3, #6
 8003606:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800360a:	4618      	mov	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40023800 	.word	0x40023800

08003618 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800361c:	4b04      	ldr	r3, [pc, #16]	; (8003630 <LL_RCC_PLL_GetP+0x18>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800

08003634 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003638:	4b04      	ldr	r3, [pc, #16]	; (800364c <LL_RCC_PLL_GetDivider+0x18>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8003640:	4618      	mov	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40023800 	.word	0x40023800

08003650 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003658:	f000 f820 	bl	800369c <RCC_GetSystemClockFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f840 	bl	80036ec <RCC_GetHCLKClockFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f84e 	bl	8003718 <RCC_GetPCLK1ClockFreq>
 800367c:	4602      	mov	r2, r0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f85a 	bl	8003740 <RCC_GetPCLK2ClockFreq>
 800368c:	4602      	mov	r2, r0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60da      	str	r2, [r3, #12]
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80036a6:	f7ff ff63 	bl	8003570 <LL_RCC_GetSysClkSource>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d00c      	beq.n	80036ca <RCC_GetSystemClockFreq+0x2e>
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d80f      	bhi.n	80036d4 <RCC_GetSystemClockFreq+0x38>
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <RCC_GetSystemClockFreq+0x22>
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d003      	beq.n	80036c4 <RCC_GetSystemClockFreq+0x28>
 80036bc:	e00a      	b.n	80036d4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <RCC_GetSystemClockFreq+0x48>)
 80036c0:	607b      	str	r3, [r7, #4]
      break;
 80036c2:	e00a      	b.n	80036da <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80036c4:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <RCC_GetSystemClockFreq+0x4c>)
 80036c6:	607b      	str	r3, [r7, #4]
      break;
 80036c8:	e007      	b.n	80036da <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80036ca:	2008      	movs	r0, #8
 80036cc:	f000 f84c 	bl	8003768 <RCC_PLL_GetFreqDomain_SYS>
 80036d0:	6078      	str	r0, [r7, #4]
      break;
 80036d2:	e002      	b.n	80036da <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <RCC_GetSystemClockFreq+0x48>)
 80036d6:	607b      	str	r3, [r7, #4]
      break;
 80036d8:	bf00      	nop
  }

  return frequency;
 80036da:	687b      	ldr	r3, [r7, #4]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	00f42400 	.word	0x00f42400
 80036e8:	007a1200 	.word	0x007a1200

080036ec <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80036f4:	f7ff ff4a 	bl	800358c <LL_RCC_GetAHBPrescaler>
 80036f8:	4603      	mov	r3, r0
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	4a04      	ldr	r2, [pc, #16]	; (8003714 <RCC_GetHCLKClockFreq+0x28>)
 8003702:	5cd3      	ldrb	r3, [r2, r3]
 8003704:	461a      	mov	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	40d3      	lsrs	r3, r2
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	08009358 	.word	0x08009358

08003718 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003720:	f7ff ff42 	bl	80035a8 <LL_RCC_GetAPB1Prescaler>
 8003724:	4603      	mov	r3, r0
 8003726:	0a9b      	lsrs	r3, r3, #10
 8003728:	4a04      	ldr	r2, [pc, #16]	; (800373c <RCC_GetPCLK1ClockFreq+0x24>)
 800372a:	5cd3      	ldrb	r3, [r2, r3]
 800372c:	461a      	mov	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	40d3      	lsrs	r3, r2
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	08009368 	.word	0x08009368

08003740 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003748:	f7ff ff3c 	bl	80035c4 <LL_RCC_GetAPB2Prescaler>
 800374c:	4603      	mov	r3, r0
 800374e:	0b5b      	lsrs	r3, r3, #13
 8003750:	4a04      	ldr	r2, [pc, #16]	; (8003764 <RCC_GetPCLK2ClockFreq+0x24>)
 8003752:	5cd3      	ldrb	r3, [r2, r3]
 8003754:	461a      	mov	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	40d3      	lsrs	r3, r2
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	08009368 	.word	0x08009368

08003768 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	2300      	movs	r3, #0
 800377a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800377c:	f7ff ff30 	bl	80035e0 <LL_RCC_PLL_GetMainSource>
 8003780:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d004      	beq.n	8003792 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800378e:	d003      	beq.n	8003798 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003790:	e005      	b.n	800379e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003792:	4b12      	ldr	r3, [pc, #72]	; (80037dc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003794:	617b      	str	r3, [r7, #20]
      break;
 8003796:	e005      	b.n	80037a4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800379a:	617b      	str	r3, [r7, #20]
      break;
 800379c:	e002      	b.n	80037a4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800379e:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80037a0:	617b      	str	r3, [r7, #20]
      break;
 80037a2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d113      	bne.n	80037d2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80037aa:	f7ff ff43 	bl	8003634 <LL_RCC_PLL_GetDivider>
 80037ae:	4602      	mov	r2, r0
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	fbb3 f4f2 	udiv	r4, r3, r2
 80037b6:	f7ff ff21 	bl	80035fc <LL_RCC_PLL_GetN>
 80037ba:	4603      	mov	r3, r0
 80037bc:	fb03 f404 	mul.w	r4, r3, r4
 80037c0:	f7ff ff2a 	bl	8003618 <LL_RCC_PLL_GetP>
 80037c4:	4603      	mov	r3, r0
 80037c6:	0c1b      	lsrs	r3, r3, #16
 80037c8:	3301      	adds	r3, #1
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	fbb4 f3f3 	udiv	r3, r4, r3
 80037d0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80037d2:	693b      	ldr	r3, [r7, #16]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd90      	pop	{r4, r7, pc}
 80037dc:	00f42400 	.word	0x00f42400
 80037e0:	007a1200 	.word	0x007a1200

080037e4 <LL_USART_IsEnabled>:
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_USART_SetStopBitsLength>:
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	611a      	str	r2, [r3, #16]
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <LL_USART_SetHWFlowCtrl>:
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	615a      	str	r2, [r3, #20]
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <LL_USART_SetBaudRate>:
{
 8003858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800385c:	b0c0      	sub	sp, #256	; 0x100
 800385e:	af00      	add	r7, sp, #0
 8003860:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003864:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8003868:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800386c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003878:	f040 810c 	bne.w	8003a94 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800387c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003880:	2200      	movs	r2, #0
 8003882:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003886:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800388a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800388e:	4622      	mov	r2, r4
 8003890:	462b      	mov	r3, r5
 8003892:	1891      	adds	r1, r2, r2
 8003894:	6639      	str	r1, [r7, #96]	; 0x60
 8003896:	415b      	adcs	r3, r3
 8003898:	667b      	str	r3, [r7, #100]	; 0x64
 800389a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800389e:	4621      	mov	r1, r4
 80038a0:	eb12 0801 	adds.w	r8, r2, r1
 80038a4:	4629      	mov	r1, r5
 80038a6:	eb43 0901 	adc.w	r9, r3, r1
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038be:	4690      	mov	r8, r2
 80038c0:	4699      	mov	r9, r3
 80038c2:	4623      	mov	r3, r4
 80038c4:	eb18 0303 	adds.w	r3, r8, r3
 80038c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038cc:	462b      	mov	r3, r5
 80038ce:	eb49 0303 	adc.w	r3, r9, r3
 80038d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80038da:	2200      	movs	r2, #0
 80038dc:	469a      	mov	sl, r3
 80038de:	4693      	mov	fp, r2
 80038e0:	eb1a 030a 	adds.w	r3, sl, sl
 80038e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80038e6:	eb4b 030b 	adc.w	r3, fp, fp
 80038ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038f4:	f7fc fc68 	bl	80001c8 <__aeabi_uldivmod>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4b64      	ldr	r3, [pc, #400]	; (8003a90 <LL_USART_SetBaudRate+0x238>)
 80038fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	b29b      	uxth	r3, r3
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	b29c      	uxth	r4, r3
 800390a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800390e:	2200      	movs	r2, #0
 8003910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003914:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003918:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800391c:	4642      	mov	r2, r8
 800391e:	464b      	mov	r3, r9
 8003920:	1891      	adds	r1, r2, r2
 8003922:	6539      	str	r1, [r7, #80]	; 0x50
 8003924:	415b      	adcs	r3, r3
 8003926:	657b      	str	r3, [r7, #84]	; 0x54
 8003928:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800392c:	4641      	mov	r1, r8
 800392e:	1851      	adds	r1, r2, r1
 8003930:	64b9      	str	r1, [r7, #72]	; 0x48
 8003932:	4649      	mov	r1, r9
 8003934:	414b      	adcs	r3, r1
 8003936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8003944:	4659      	mov	r1, fp
 8003946:	00cb      	lsls	r3, r1, #3
 8003948:	4651      	mov	r1, sl
 800394a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800394e:	4651      	mov	r1, sl
 8003950:	00ca      	lsls	r2, r1, #3
 8003952:	4610      	mov	r0, r2
 8003954:	4619      	mov	r1, r3
 8003956:	4603      	mov	r3, r0
 8003958:	4642      	mov	r2, r8
 800395a:	189b      	adds	r3, r3, r2
 800395c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003960:	464b      	mov	r3, r9
 8003962:	460a      	mov	r2, r1
 8003964:	eb42 0303 	adc.w	r3, r2, r3
 8003968:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800396c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003970:	2200      	movs	r2, #0
 8003972:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003976:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800397a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800397e:	460b      	mov	r3, r1
 8003980:	18db      	adds	r3, r3, r3
 8003982:	643b      	str	r3, [r7, #64]	; 0x40
 8003984:	4613      	mov	r3, r2
 8003986:	eb42 0303 	adc.w	r3, r2, r3
 800398a:	647b      	str	r3, [r7, #68]	; 0x44
 800398c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003990:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003994:	f7fc fc18 	bl	80001c8 <__aeabi_uldivmod>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4611      	mov	r1, r2
 800399e:	4b3c      	ldr	r3, [pc, #240]	; (8003a90 <LL_USART_SetBaudRate+0x238>)
 80039a0:	fba3 2301 	umull	r2, r3, r3, r1
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	2264      	movs	r2, #100	; 0x64
 80039a8:	fb02 f303 	mul.w	r3, r2, r3
 80039ac:	1acb      	subs	r3, r1, r3
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80039b4:	4b36      	ldr	r3, [pc, #216]	; (8003a90 <LL_USART_SetBaudRate+0x238>)
 80039b6:	fba3 2302 	umull	r2, r3, r3, r2
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	b29b      	uxth	r3, r3
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	4423      	add	r3, r4
 80039ca:	b29c      	uxth	r4, r3
 80039cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039d0:	2200      	movs	r2, #0
 80039d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039d6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039da:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80039de:	4642      	mov	r2, r8
 80039e0:	464b      	mov	r3, r9
 80039e2:	1891      	adds	r1, r2, r2
 80039e4:	63b9      	str	r1, [r7, #56]	; 0x38
 80039e6:	415b      	adcs	r3, r3
 80039e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039ee:	4641      	mov	r1, r8
 80039f0:	1851      	adds	r1, r2, r1
 80039f2:	6339      	str	r1, [r7, #48]	; 0x30
 80039f4:	4649      	mov	r1, r9
 80039f6:	414b      	adcs	r3, r1
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a06:	4659      	mov	r1, fp
 8003a08:	00cb      	lsls	r3, r1, #3
 8003a0a:	4651      	mov	r1, sl
 8003a0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a10:	4651      	mov	r1, sl
 8003a12:	00ca      	lsls	r2, r1, #3
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4642      	mov	r2, r8
 8003a1c:	189b      	adds	r3, r3, r2
 8003a1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a22:	464b      	mov	r3, r9
 8003a24:	460a      	mov	r2, r1
 8003a26:	eb42 0303 	adc.w	r3, r2, r3
 8003a2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003a2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a38:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003a3c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003a40:	460b      	mov	r3, r1
 8003a42:	18db      	adds	r3, r3, r3
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a46:	4613      	mov	r3, r2
 8003a48:	eb42 0303 	adc.w	r3, r2, r3
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a52:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003a56:	f7fc fbb7 	bl	80001c8 <__aeabi_uldivmod>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <LL_USART_SetBaudRate+0x238>)
 8003a60:	fba3 1302 	umull	r1, r3, r3, r2
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	2164      	movs	r1, #100	; 0x64
 8003a68:	fb01 f303 	mul.w	r3, r1, r3
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	3332      	adds	r3, #50	; 0x32
 8003a72:	4a07      	ldr	r2, [pc, #28]	; (8003a90 <LL_USART_SetBaudRate+0x238>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	4423      	add	r3, r4
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a8c:	609a      	str	r2, [r3, #8]
}
 8003a8e:	e107      	b.n	8003ca0 <LL_USART_SetBaudRate+0x448>
 8003a90:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003a94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a9e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003aa2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003aa6:	4642      	mov	r2, r8
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	1891      	adds	r1, r2, r2
 8003aac:	6239      	str	r1, [r7, #32]
 8003aae:	415b      	adcs	r3, r3
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ab6:	4641      	mov	r1, r8
 8003ab8:	1854      	adds	r4, r2, r1
 8003aba:	4649      	mov	r1, r9
 8003abc:	eb43 0501 	adc.w	r5, r3, r1
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	00eb      	lsls	r3, r5, #3
 8003aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ace:	00e2      	lsls	r2, r4, #3
 8003ad0:	4614      	mov	r4, r2
 8003ad2:	461d      	mov	r5, r3
 8003ad4:	4643      	mov	r3, r8
 8003ad6:	18e3      	adds	r3, r4, r3
 8003ad8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003adc:	464b      	mov	r3, r9
 8003ade:	eb45 0303 	adc.w	r3, r5, r3
 8003ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ae6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003af0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003b00:	4629      	mov	r1, r5
 8003b02:	008b      	lsls	r3, r1, #2
 8003b04:	4621      	mov	r1, r4
 8003b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	008a      	lsls	r2, r1, #2
 8003b0e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003b12:	f7fc fb59 	bl	80001c8 <__aeabi_uldivmod>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4b64      	ldr	r3, [pc, #400]	; (8003cac <LL_USART_SetBaudRate+0x454>)
 8003b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	b29c      	uxth	r4, r3
 8003b28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b36:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003b3a:	4642      	mov	r2, r8
 8003b3c:	464b      	mov	r3, r9
 8003b3e:	1891      	adds	r1, r2, r2
 8003b40:	61b9      	str	r1, [r7, #24]
 8003b42:	415b      	adcs	r3, r3
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b4a:	4641      	mov	r1, r8
 8003b4c:	1851      	adds	r1, r2, r1
 8003b4e:	6139      	str	r1, [r7, #16]
 8003b50:	4649      	mov	r1, r9
 8003b52:	414b      	adcs	r3, r1
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b62:	4659      	mov	r1, fp
 8003b64:	00cb      	lsls	r3, r1, #3
 8003b66:	4651      	mov	r1, sl
 8003b68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b6c:	4651      	mov	r1, sl
 8003b6e:	00ca      	lsls	r2, r1, #3
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	4603      	mov	r3, r0
 8003b76:	4642      	mov	r2, r8
 8003b78:	189b      	adds	r3, r3, r2
 8003b7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b7e:	464b      	mov	r3, r9
 8003b80:	460a      	mov	r2, r1
 8003b82:	eb42 0303 	adc.w	r3, r2, r3
 8003b86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003b8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b94:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003ba4:	4649      	mov	r1, r9
 8003ba6:	008b      	lsls	r3, r1, #2
 8003ba8:	4641      	mov	r1, r8
 8003baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bae:	4641      	mov	r1, r8
 8003bb0:	008a      	lsls	r2, r1, #2
 8003bb2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003bb6:	f7fc fb07 	bl	80001c8 <__aeabi_uldivmod>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4b3b      	ldr	r3, [pc, #236]	; (8003cac <LL_USART_SetBaudRate+0x454>)
 8003bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	2164      	movs	r1, #100	; 0x64
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	3332      	adds	r3, #50	; 0x32
 8003bd2:	4a36      	ldr	r2, [pc, #216]	; (8003cac <LL_USART_SetBaudRate+0x454>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	4423      	add	r3, r4
 8003be4:	b29c      	uxth	r4, r3
 8003be6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bea:	2200      	movs	r2, #0
 8003bec:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003bf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003bf4:	4642      	mov	r2, r8
 8003bf6:	464b      	mov	r3, r9
 8003bf8:	1891      	adds	r1, r2, r2
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	415b      	adcs	r3, r3
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c04:	4641      	mov	r1, r8
 8003c06:	1851      	adds	r1, r2, r1
 8003c08:	6039      	str	r1, [r7, #0]
 8003c0a:	4649      	mov	r1, r9
 8003c0c:	414b      	adcs	r3, r1
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c1c:	4659      	mov	r1, fp
 8003c1e:	00cb      	lsls	r3, r1, #3
 8003c20:	4651      	mov	r1, sl
 8003c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c26:	4651      	mov	r1, sl
 8003c28:	00ca      	lsls	r2, r1, #3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4642      	mov	r2, r8
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	673b      	str	r3, [r7, #112]	; 0x70
 8003c36:	464b      	mov	r3, r9
 8003c38:	460a      	mov	r2, r1
 8003c3a:	eb42 0303 	adc.w	r3, r2, r3
 8003c3e:	677b      	str	r3, [r7, #116]	; 0x74
 8003c40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003c44:	2200      	movs	r2, #0
 8003c46:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c48:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003c56:	4649      	mov	r1, r9
 8003c58:	008b      	lsls	r3, r1, #2
 8003c5a:	4641      	mov	r1, r8
 8003c5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c60:	4641      	mov	r1, r8
 8003c62:	008a      	lsls	r2, r1, #2
 8003c64:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003c68:	f7fc faae 	bl	80001c8 <__aeabi_uldivmod>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <LL_USART_SetBaudRate+0x454>)
 8003c72:	fba3 1302 	umull	r1, r3, r3, r2
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	2164      	movs	r1, #100	; 0x64
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	3332      	adds	r3, #50	; 0x32
 8003c84:	4a09      	ldr	r2, [pc, #36]	; (8003cac <LL_USART_SetBaudRate+0x454>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	4423      	add	r3, r4
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c9e:	609a      	str	r2, [r3, #8]
}
 8003ca0:	bf00      	nop
 8003ca2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cac:	51eb851f 	.word	0x51eb851f

08003cb0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff fd8e 	bl	80037e4 <LL_USART_IsEnabled>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d15e      	bne.n	8003d8c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003cd6:	f023 030c 	bic.w	r3, r3, #12
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	6851      	ldr	r1, [r2, #4]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	68d2      	ldr	r2, [r2, #12]
 8003ce2:	4311      	orrs	r1, r2
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	6912      	ldr	r2, [r2, #16]
 8003ce8:	4311      	orrs	r1, r2
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	6992      	ldr	r2, [r2, #24]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7ff fd85 	bl	800380c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	4619      	mov	r1, r3
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff fd92 	bl	8003832 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003d0e:	f107 0308 	add.w	r3, r7, #8
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fc9c 	bl	8003650 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a1f      	ldr	r2, [pc, #124]	; (8003d98 <LL_USART_Init+0xe8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d102      	bne.n	8003d26 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	e021      	b.n	8003d6a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a1c      	ldr	r2, [pc, #112]	; (8003d9c <LL_USART_Init+0xec>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d102      	bne.n	8003d34 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	e01a      	b.n	8003d6a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a1a      	ldr	r2, [pc, #104]	; (8003da0 <LL_USART_Init+0xf0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d102      	bne.n	8003d42 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	61bb      	str	r3, [r7, #24]
 8003d40:	e013      	b.n	8003d6a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a17      	ldr	r2, [pc, #92]	; (8003da4 <LL_USART_Init+0xf4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d102      	bne.n	8003d50 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	e00c      	b.n	8003d6a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a15      	ldr	r2, [pc, #84]	; (8003da8 <LL_USART_Init+0xf8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d102      	bne.n	8003d5e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	e005      	b.n	8003d6a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a12      	ldr	r2, [pc, #72]	; (8003dac <LL_USART_Init+0xfc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d101      	bne.n	8003d6a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00d      	beq.n	8003d8c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	699a      	ldr	r2, [r3, #24]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69b9      	ldr	r1, [r7, #24]
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff fd66 	bl	8003858 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003d8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40011000 	.word	0x40011000
 8003d9c:	40004400 	.word	0x40004400
 8003da0:	40004800 	.word	0x40004800
 8003da4:	40011400 	.word	0x40011400
 8003da8:	40004c00 	.word	0x40004c00
 8003dac:	40005000 	.word	0x40005000

08003db0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003db0:	b084      	sub	sp, #16
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	f107 001c 	add.w	r0, r7, #28
 8003dbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d122      	bne.n	8003e0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d105      	bne.n	8003e02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f001 fc3e 	bl	8005684 <USB_CoreReset>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	73fb      	strb	r3, [r7, #15]
 8003e0c:	e01a      	b.n	8003e44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f001 fc32 	bl	8005684 <USB_CoreReset>
 8003e20:	4603      	mov	r3, r0
 8003e22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	639a      	str	r2, [r3, #56]	; 0x38
 8003e36:	e005      	b.n	8003e44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d10b      	bne.n	8003e62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f043 0206 	orr.w	r2, r3, #6
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f043 0220 	orr.w	r2, r3, #32
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e6e:	b004      	add	sp, #16
 8003e70:	4770      	bx	lr
	...

08003e74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d165      	bne.n	8003f54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4a41      	ldr	r2, [pc, #260]	; (8003f90 <USB_SetTurnaroundTime+0x11c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d906      	bls.n	8003e9e <USB_SetTurnaroundTime+0x2a>
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4a40      	ldr	r2, [pc, #256]	; (8003f94 <USB_SetTurnaroundTime+0x120>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d202      	bcs.n	8003e9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e98:	230f      	movs	r3, #15
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	e062      	b.n	8003f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	4a3c      	ldr	r2, [pc, #240]	; (8003f94 <USB_SetTurnaroundTime+0x120>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d306      	bcc.n	8003eb4 <USB_SetTurnaroundTime+0x40>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4a3b      	ldr	r2, [pc, #236]	; (8003f98 <USB_SetTurnaroundTime+0x124>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d202      	bcs.n	8003eb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003eae:	230e      	movs	r3, #14
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	e057      	b.n	8003f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4a38      	ldr	r2, [pc, #224]	; (8003f98 <USB_SetTurnaroundTime+0x124>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d306      	bcc.n	8003eca <USB_SetTurnaroundTime+0x56>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4a37      	ldr	r2, [pc, #220]	; (8003f9c <USB_SetTurnaroundTime+0x128>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d202      	bcs.n	8003eca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003ec4:	230d      	movs	r3, #13
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	e04c      	b.n	8003f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4a33      	ldr	r2, [pc, #204]	; (8003f9c <USB_SetTurnaroundTime+0x128>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d306      	bcc.n	8003ee0 <USB_SetTurnaroundTime+0x6c>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4a32      	ldr	r2, [pc, #200]	; (8003fa0 <USB_SetTurnaroundTime+0x12c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d802      	bhi.n	8003ee0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003eda:	230c      	movs	r3, #12
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	e041      	b.n	8003f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4a2f      	ldr	r2, [pc, #188]	; (8003fa0 <USB_SetTurnaroundTime+0x12c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d906      	bls.n	8003ef6 <USB_SetTurnaroundTime+0x82>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4a2e      	ldr	r2, [pc, #184]	; (8003fa4 <USB_SetTurnaroundTime+0x130>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d802      	bhi.n	8003ef6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003ef0:	230b      	movs	r3, #11
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e036      	b.n	8003f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <USB_SetTurnaroundTime+0x130>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d906      	bls.n	8003f0c <USB_SetTurnaroundTime+0x98>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <USB_SetTurnaroundTime+0x134>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d802      	bhi.n	8003f0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f06:	230a      	movs	r3, #10
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	e02b      	b.n	8003f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <USB_SetTurnaroundTime+0x134>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d906      	bls.n	8003f22 <USB_SetTurnaroundTime+0xae>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4a25      	ldr	r2, [pc, #148]	; (8003fac <USB_SetTurnaroundTime+0x138>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d202      	bcs.n	8003f22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f1c:	2309      	movs	r3, #9
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	e020      	b.n	8003f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4a21      	ldr	r2, [pc, #132]	; (8003fac <USB_SetTurnaroundTime+0x138>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d306      	bcc.n	8003f38 <USB_SetTurnaroundTime+0xc4>
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4a20      	ldr	r2, [pc, #128]	; (8003fb0 <USB_SetTurnaroundTime+0x13c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d802      	bhi.n	8003f38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003f32:	2308      	movs	r3, #8
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	e015      	b.n	8003f64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4a1d      	ldr	r2, [pc, #116]	; (8003fb0 <USB_SetTurnaroundTime+0x13c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d906      	bls.n	8003f4e <USB_SetTurnaroundTime+0xda>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4a1c      	ldr	r2, [pc, #112]	; (8003fb4 <USB_SetTurnaroundTime+0x140>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d202      	bcs.n	8003f4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003f48:	2307      	movs	r3, #7
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	e00a      	b.n	8003f64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003f4e:	2306      	movs	r3, #6
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	e007      	b.n	8003f64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d102      	bne.n	8003f60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003f5a:	2309      	movs	r3, #9
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	e001      	b.n	8003f64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003f60:	2309      	movs	r3, #9
 8003f62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	029b      	lsls	r3, r3, #10
 8003f78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	00d8acbf 	.word	0x00d8acbf
 8003f94:	00e4e1c0 	.word	0x00e4e1c0
 8003f98:	00f42400 	.word	0x00f42400
 8003f9c:	01067380 	.word	0x01067380
 8003fa0:	011a499f 	.word	0x011a499f
 8003fa4:	01312cff 	.word	0x01312cff
 8003fa8:	014ca43f 	.word	0x014ca43f
 8003fac:	016e3600 	.word	0x016e3600
 8003fb0:	01a6ab1f 	.word	0x01a6ab1f
 8003fb4:	01e84800 	.word	0x01e84800

08003fb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f043 0201 	orr.w	r2, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f023 0201 	bic.w	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d115      	bne.n	800404a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800402a:	2001      	movs	r0, #1
 800402c:	f7fc ff6c 	bl	8000f08 <HAL_Delay>
      ms++;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3301      	adds	r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f001 fa94 	bl	8005564 <USB_GetMode>
 800403c:	4603      	mov	r3, r0
 800403e:	2b01      	cmp	r3, #1
 8004040:	d01e      	beq.n	8004080 <USB_SetCurrentMode+0x84>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b31      	cmp	r3, #49	; 0x31
 8004046:	d9f0      	bls.n	800402a <USB_SetCurrentMode+0x2e>
 8004048:	e01a      	b.n	8004080 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800404a:	78fb      	ldrb	r3, [r7, #3]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d115      	bne.n	800407c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800405c:	2001      	movs	r0, #1
 800405e:	f7fc ff53 	bl	8000f08 <HAL_Delay>
      ms++;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3301      	adds	r3, #1
 8004066:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f001 fa7b 	bl	8005564 <USB_GetMode>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <USB_SetCurrentMode+0x84>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b31      	cmp	r3, #49	; 0x31
 8004078:	d9f0      	bls.n	800405c <USB_SetCurrentMode+0x60>
 800407a:	e001      	b.n	8004080 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e005      	b.n	800408c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b32      	cmp	r3, #50	; 0x32
 8004084:	d101      	bne.n	800408a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004094:	b084      	sub	sp, #16
 8004096:	b580      	push	{r7, lr}
 8004098:	b086      	sub	sp, #24
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040ae:	2300      	movs	r3, #0
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	e009      	b.n	80040c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	3340      	adds	r3, #64	; 0x40
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	2200      	movs	r2, #0
 80040c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	3301      	adds	r3, #1
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b0e      	cmp	r3, #14
 80040cc:	d9f2      	bls.n	80040b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80040ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d11c      	bne.n	800410e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040e2:	f043 0302 	orr.w	r3, r3, #2
 80040e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	639a      	str	r2, [r3, #56]	; 0x38
 800410c:	e00b      	b.n	8004126 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800412c:	461a      	mov	r2, r3
 800412e:	2300      	movs	r3, #0
 8004130:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004138:	4619      	mov	r1, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004140:	461a      	mov	r2, r3
 8004142:	680b      	ldr	r3, [r1, #0]
 8004144:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004148:	2b01      	cmp	r3, #1
 800414a:	d10c      	bne.n	8004166 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d104      	bne.n	800415c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004152:	2100      	movs	r1, #0
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f965 	bl	8004424 <USB_SetDevSpeed>
 800415a:	e008      	b.n	800416e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800415c:	2101      	movs	r1, #1
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f960 	bl	8004424 <USB_SetDevSpeed>
 8004164:	e003      	b.n	800416e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004166:	2103      	movs	r1, #3
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f95b 	bl	8004424 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800416e:	2110      	movs	r1, #16
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f8f3 	bl	800435c <USB_FlushTxFifo>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f91f 	bl	80043c4 <USB_FlushRxFifo>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004196:	461a      	mov	r2, r3
 8004198:	2300      	movs	r3, #0
 800419a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a2:	461a      	mov	r2, r3
 80041a4:	2300      	movs	r3, #0
 80041a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ae:	461a      	mov	r2, r3
 80041b0:	2300      	movs	r3, #0
 80041b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041b4:	2300      	movs	r3, #0
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	e043      	b.n	8004242 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041d0:	d118      	bne.n	8004204 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e4:	461a      	mov	r2, r3
 80041e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	e013      	b.n	8004216 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fa:	461a      	mov	r2, r3
 80041fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e008      	b.n	8004216 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004210:	461a      	mov	r2, r3
 8004212:	2300      	movs	r3, #0
 8004214:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004222:	461a      	mov	r2, r3
 8004224:	2300      	movs	r3, #0
 8004226:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004234:	461a      	mov	r2, r3
 8004236:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800423a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	3301      	adds	r3, #1
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	429a      	cmp	r2, r3
 8004248:	d3b7      	bcc.n	80041ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800424a:	2300      	movs	r3, #0
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	e043      	b.n	80042d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004266:	d118      	bne.n	800429a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427a:	461a      	mov	r2, r3
 800427c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	e013      	b.n	80042ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004290:	461a      	mov	r2, r3
 8004292:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	e008      	b.n	80042ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a6:	461a      	mov	r2, r3
 80042a8:	2300      	movs	r3, #0
 80042aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b8:	461a      	mov	r2, r3
 80042ba:	2300      	movs	r3, #0
 80042bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ca:	461a      	mov	r2, r3
 80042cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	3301      	adds	r3, #1
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d3b7      	bcc.n	8004250 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004300:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	2b00      	cmp	r3, #0
 8004306:	d105      	bne.n	8004314 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	f043 0210 	orr.w	r2, r3, #16
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699a      	ldr	r2, [r3, #24]
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <USB_DevInit+0x2c4>)
 800431a:	4313      	orrs	r3, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f043 0208 	orr.w	r2, r3, #8
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d107      	bne.n	8004348 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004340:	f043 0304 	orr.w	r3, r3, #4
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004354:	b004      	add	sp, #16
 8004356:	4770      	bx	lr
 8004358:	803c3800 	.word	0x803c3800

0800435c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	3301      	adds	r3, #1
 800436e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4a13      	ldr	r2, [pc, #76]	; (80043c0 <USB_FlushTxFifo+0x64>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e01b      	b.n	80043b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	daf2      	bge.n	800436a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	019b      	lsls	r3, r3, #6
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3301      	adds	r3, #1
 8004398:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4a08      	ldr	r2, [pc, #32]	; (80043c0 <USB_FlushTxFifo+0x64>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d901      	bls.n	80043a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e006      	b.n	80043b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d0f0      	beq.n	8004394 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	00030d40 	.word	0x00030d40

080043c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3301      	adds	r3, #1
 80043d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4a11      	ldr	r2, [pc, #68]	; (8004420 <USB_FlushRxFifo+0x5c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e018      	b.n	8004414 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	daf2      	bge.n	80043d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2210      	movs	r2, #16
 80043f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3301      	adds	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4a08      	ldr	r2, [pc, #32]	; (8004420 <USB_FlushRxFifo+0x5c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e006      	b.n	8004414 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0310 	and.w	r3, r3, #16
 800440e:	2b10      	cmp	r3, #16
 8004410:	d0f0      	beq.n	80043f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	00030d40 	.word	0x00030d40

08004424 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	68f9      	ldr	r1, [r7, #12]
 8004440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004444:	4313      	orrs	r3, r2
 8004446:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004456:	b480      	push	{r7}
 8004458:	b087      	sub	sp, #28
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0306 	and.w	r3, r3, #6
 800446e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004476:	2300      	movs	r3, #0
 8004478:	75fb      	strb	r3, [r7, #23]
 800447a:	e00a      	b.n	8004492 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d002      	beq.n	8004488 <USB_GetDevSpeed+0x32>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b06      	cmp	r3, #6
 8004486:	d102      	bne.n	800448e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004488:	2302      	movs	r3, #2
 800448a:	75fb      	strb	r3, [r7, #23]
 800448c:	e001      	b.n	8004492 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800448e:	230f      	movs	r3, #15
 8004490:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004492:	7dfb      	ldrb	r3, [r7, #23]
}
 8004494:	4618      	mov	r0, r3
 8004496:	371c      	adds	r7, #28
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	785b      	ldrb	r3, [r3, #1]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d13a      	bne.n	8004532 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	2101      	movs	r1, #1
 80044ce:	fa01 f303 	lsl.w	r3, r1, r3
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	68f9      	ldr	r1, [r7, #12]
 80044d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044da:	4313      	orrs	r3, r2
 80044dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d155      	bne.n	80045a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	791b      	ldrb	r3, [r3, #4]
 800450e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004510:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	059b      	lsls	r3, r3, #22
 8004516:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004518:	4313      	orrs	r3, r2
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	0151      	lsls	r1, r2, #5
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	440a      	add	r2, r1
 8004522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	e036      	b.n	80045a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004538:	69da      	ldr	r2, [r3, #28]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	2101      	movs	r1, #1
 8004544:	fa01 f303 	lsl.w	r3, r1, r3
 8004548:	041b      	lsls	r3, r3, #16
 800454a:	68f9      	ldr	r1, [r7, #12]
 800454c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004550:	4313      	orrs	r3, r2
 8004552:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d11a      	bne.n	80045a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	791b      	ldrb	r3, [r3, #4]
 8004584:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004586:	430b      	orrs	r3, r1
 8004588:	4313      	orrs	r3, r2
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	0151      	lsls	r1, r2, #5
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	440a      	add	r2, r1
 8004592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800459e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	785b      	ldrb	r3, [r3, #1]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d161      	bne.n	8004690 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045e2:	d11f      	bne.n	8004624 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	0151      	lsls	r1, r2, #5
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	440a      	add	r2, r1
 80045fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004602:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	0151      	lsls	r1, r2, #5
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	440a      	add	r2, r1
 800461a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800461e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004622:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	2101      	movs	r1, #1
 8004636:	fa01 f303 	lsl.w	r3, r1, r3
 800463a:	b29b      	uxth	r3, r3
 800463c:	43db      	mvns	r3, r3
 800463e:	68f9      	ldr	r1, [r7, #12]
 8004640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004644:	4013      	ands	r3, r2
 8004646:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	f003 030f 	and.w	r3, r3, #15
 8004658:	2101      	movs	r1, #1
 800465a:	fa01 f303 	lsl.w	r3, r1, r3
 800465e:	b29b      	uxth	r3, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	68f9      	ldr	r1, [r7, #12]
 8004664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004668:	4013      	ands	r3, r2
 800466a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	0159      	lsls	r1, r3, #5
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	440b      	add	r3, r1
 8004682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004686:	4619      	mov	r1, r3
 8004688:	4b35      	ldr	r3, [pc, #212]	; (8004760 <USB_DeactivateEndpoint+0x1b0>)
 800468a:	4013      	ands	r3, r2
 800468c:	600b      	str	r3, [r1, #0]
 800468e:	e060      	b.n	8004752 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046a6:	d11f      	bne.n	80046e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	0151      	lsls	r1, r2, #5
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	440a      	add	r2, r1
 80046de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	f003 030f 	and.w	r3, r3, #15
 80046f8:	2101      	movs	r1, #1
 80046fa:	fa01 f303 	lsl.w	r3, r1, r3
 80046fe:	041b      	lsls	r3, r3, #16
 8004700:	43db      	mvns	r3, r3
 8004702:	68f9      	ldr	r1, [r7, #12]
 8004704:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004708:	4013      	ands	r3, r2
 800470a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	2101      	movs	r1, #1
 800471e:	fa01 f303 	lsl.w	r3, r1, r3
 8004722:	041b      	lsls	r3, r3, #16
 8004724:	43db      	mvns	r3, r3
 8004726:	68f9      	ldr	r1, [r7, #12]
 8004728:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800472c:	4013      	ands	r3, r2
 800472e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	0159      	lsls	r1, r3, #5
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	440b      	add	r3, r1
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	4619      	mov	r1, r3
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <USB_DeactivateEndpoint+0x1b4>)
 800474e:	4013      	ands	r3, r2
 8004750:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	ec337800 	.word	0xec337800
 8004764:	eff37800 	.word	0xeff37800

08004768 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	4613      	mov	r3, r2
 8004774:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	2b01      	cmp	r3, #1
 8004786:	f040 815c 	bne.w	8004a42 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d132      	bne.n	80047f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	0151      	lsls	r1, r2, #5
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	440a      	add	r2, r1
 80047cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	0151      	lsls	r1, r2, #5
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	440a      	add	r2, r1
 80047ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f0:	0cdb      	lsrs	r3, r3, #19
 80047f2:	04db      	lsls	r3, r3, #19
 80047f4:	6113      	str	r3, [r2, #16]
 80047f6:	e074      	b.n	80048e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	440a      	add	r2, r1
 800480e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004812:	0cdb      	lsrs	r3, r3, #19
 8004814:	04db      	lsls	r3, r3, #19
 8004816:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	440a      	add	r2, r1
 800482e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004832:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004836:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800483a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	6999      	ldr	r1, [r3, #24]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	440b      	add	r3, r1
 8004854:	1e59      	subs	r1, r3, #1
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	fbb1 f3f3 	udiv	r3, r1, r3
 800485e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004860:	4b9d      	ldr	r3, [pc, #628]	; (8004ad8 <USB_EPStartXfer+0x370>)
 8004862:	400b      	ands	r3, r1
 8004864:	69b9      	ldr	r1, [r7, #24]
 8004866:	0148      	lsls	r0, r1, #5
 8004868:	69f9      	ldr	r1, [r7, #28]
 800486a:	4401      	add	r1, r0
 800486c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004870:	4313      	orrs	r3, r2
 8004872:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004880:	691a      	ldr	r2, [r3, #16]
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800488a:	69b9      	ldr	r1, [r7, #24]
 800488c:	0148      	lsls	r0, r1, #5
 800488e:	69f9      	ldr	r1, [r7, #28]
 8004890:	4401      	add	r1, r0
 8004892:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004896:	4313      	orrs	r3, r2
 8004898:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	791b      	ldrb	r3, [r3, #4]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d11f      	bne.n	80048e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	0151      	lsls	r1, r2, #5
 80048b4:	69fa      	ldr	r2, [r7, #28]
 80048b6:	440a      	add	r2, r1
 80048b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80048c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	0151      	lsls	r1, r2, #5
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	440a      	add	r2, r1
 80048d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80048e2:	79fb      	ldrb	r3, [r7, #7]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d14b      	bne.n	8004980 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d009      	beq.n	8004904 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fc:	461a      	mov	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	791b      	ldrb	r3, [r3, #4]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d128      	bne.n	800495e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d110      	bne.n	800493e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	0151      	lsls	r1, r2, #5
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	440a      	add	r2, r1
 8004932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004936:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	e00f      	b.n	800495e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	0151      	lsls	r1, r2, #5
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	440a      	add	r2, r1
 8004954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	0151      	lsls	r1, r2, #5
 8004970:	69fa      	ldr	r2, [r7, #28]
 8004972:	440a      	add	r2, r1
 8004974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004978:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e133      	b.n	8004be8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	0151      	lsls	r1, r2, #5
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	440a      	add	r2, r1
 8004996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800499a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800499e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	791b      	ldrb	r3, [r3, #4]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d015      	beq.n	80049d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 811b 	beq.w	8004be8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	2101      	movs	r1, #1
 80049c4:	fa01 f303 	lsl.w	r3, r1, r3
 80049c8:	69f9      	ldr	r1, [r7, #28]
 80049ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ce:	4313      	orrs	r3, r2
 80049d0:	634b      	str	r3, [r1, #52]	; 0x34
 80049d2:	e109      	b.n	8004be8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d110      	bne.n	8004a06 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	0151      	lsls	r1, r2, #5
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	440a      	add	r2, r1
 80049fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	e00f      	b.n	8004a26 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	0151      	lsls	r1, r2, #5
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	440a      	add	r2, r1
 8004a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a24:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	6919      	ldr	r1, [r3, #16]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	781a      	ldrb	r2, [r3, #0]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	b298      	uxth	r0, r3
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	4603      	mov	r3, r0
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 fade 	bl	8004ffc <USB_WritePacket>
 8004a40:	e0d2      	b.n	8004be8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	0151      	lsls	r1, r2, #5
 8004a54:	69fa      	ldr	r2, [r7, #28]
 8004a56:	440a      	add	r2, r1
 8004a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a5c:	0cdb      	lsrs	r3, r3, #19
 8004a5e:	04db      	lsls	r3, r3, #19
 8004a60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	0151      	lsls	r1, r2, #5
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	440a      	add	r2, r1
 8004a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d126      	bne.n	8004adc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa4:	69b9      	ldr	r1, [r7, #24]
 8004aa6:	0148      	lsls	r0, r1, #5
 8004aa8:	69f9      	ldr	r1, [r7, #28]
 8004aaa:	4401      	add	r1, r0
 8004aac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ace:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ad2:	6113      	str	r3, [r2, #16]
 8004ad4:	e03a      	b.n	8004b4c <USB_EPStartXfer+0x3e4>
 8004ad6:	bf00      	nop
 8004ad8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	699a      	ldr	r2, [r3, #24]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	1e5a      	subs	r2, r3, #1
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	8afa      	ldrh	r2, [r7, #22]
 8004af8:	fb03 f202 	mul.w	r2, r3, r2
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	8afb      	ldrh	r3, [r7, #22]
 8004b10:	04d9      	lsls	r1, r3, #19
 8004b12:	4b38      	ldr	r3, [pc, #224]	; (8004bf4 <USB_EPStartXfer+0x48c>)
 8004b14:	400b      	ands	r3, r1
 8004b16:	69b9      	ldr	r1, [r7, #24]
 8004b18:	0148      	lsls	r0, r1, #5
 8004b1a:	69f9      	ldr	r1, [r7, #28]
 8004b1c:	4401      	add	r1, r0
 8004b1e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b22:	4313      	orrs	r3, r2
 8004b24:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b3c:	69b9      	ldr	r1, [r7, #24]
 8004b3e:	0148      	lsls	r0, r1, #5
 8004b40:	69f9      	ldr	r1, [r7, #28]
 8004b42:	4401      	add	r1, r0
 8004b44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b4c:	79fb      	ldrb	r3, [r7, #7]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d10d      	bne.n	8004b6e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	6919      	ldr	r1, [r3, #16]
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6a:	460a      	mov	r2, r1
 8004b6c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	791b      	ldrb	r3, [r3, #4]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d128      	bne.n	8004bc8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d110      	bne.n	8004ba8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	0151      	lsls	r1, r2, #5
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	440a      	add	r2, r1
 8004b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	e00f      	b.n	8004bc8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	0151      	lsls	r1, r2, #5
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	440a      	add	r2, r1
 8004bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	0151      	lsls	r1, r2, #5
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	440a      	add	r2, r1
 8004bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004be6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3720      	adds	r7, #32
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	1ff80000 	.word	0x1ff80000

08004bf8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	4613      	mov	r3, r2
 8004c04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	785b      	ldrb	r3, [r3, #1]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	f040 80ce 	bne.w	8004db6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d132      	bne.n	8004c88 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	0151      	lsls	r1, r2, #5
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	440a      	add	r2, r1
 8004c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	0151      	lsls	r1, r2, #5
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	440a      	add	r2, r1
 8004c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	0151      	lsls	r1, r2, #5
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	440a      	add	r2, r1
 8004c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c80:	0cdb      	lsrs	r3, r3, #19
 8004c82:	04db      	lsls	r3, r3, #19
 8004c84:	6113      	str	r3, [r2, #16]
 8004c86:	e04e      	b.n	8004d26 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	0151      	lsls	r1, r2, #5
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	440a      	add	r2, r1
 8004c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca2:	0cdb      	lsrs	r3, r3, #19
 8004ca4:	04db      	lsls	r3, r3, #19
 8004ca6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	0151      	lsls	r1, r2, #5
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	440a      	add	r2, r1
 8004cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	699a      	ldr	r2, [r3, #24]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d903      	bls.n	8004ce0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	0151      	lsls	r1, r2, #5
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d16:	6939      	ldr	r1, [r7, #16]
 8004d18:	0148      	lsls	r0, r1, #5
 8004d1a:	6979      	ldr	r1, [r7, #20]
 8004d1c:	4401      	add	r1, r0
 8004d1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d22:	4313      	orrs	r3, r2
 8004d24:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d11e      	bne.n	8004d6a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d009      	beq.n	8004d48 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d40:	461a      	mov	r2, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	0151      	lsls	r1, r2, #5
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	440a      	add	r2, r1
 8004d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	e097      	b.n	8004e9a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	0151      	lsls	r1, r2, #5
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	440a      	add	r2, r1
 8004d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d88:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 8083 	beq.w	8004e9a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	2101      	movs	r1, #1
 8004da6:	fa01 f303 	lsl.w	r3, r1, r3
 8004daa:	6979      	ldr	r1, [r7, #20]
 8004dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db0:	4313      	orrs	r3, r2
 8004db2:	634b      	str	r3, [r1, #52]	; 0x34
 8004db4:	e071      	b.n	8004e9a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	0151      	lsls	r1, r2, #5
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	440a      	add	r2, r1
 8004dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd0:	0cdb      	lsrs	r3, r3, #19
 8004dd2:	04db      	lsls	r3, r3, #19
 8004dd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	0151      	lsls	r1, r2, #5
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	440a      	add	r2, r1
 8004dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004df4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004df8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e48:	6939      	ldr	r1, [r7, #16]
 8004e4a:	0148      	lsls	r0, r1, #5
 8004e4c:	6979      	ldr	r1, [r7, #20]
 8004e4e:	4401      	add	r1, r0
 8004e50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e54:	4313      	orrs	r3, r2
 8004e56:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d10d      	bne.n	8004e7a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d009      	beq.n	8004e7a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	6919      	ldr	r1, [r3, #16]
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e76:	460a      	mov	r2, r1
 8004e78:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	0151      	lsls	r1, r2, #5
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	440a      	add	r2, r1
 8004e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	371c      	adds	r7, #28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	785b      	ldrb	r3, [r3, #1]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d14a      	bne.n	8004f5c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ede:	f040 8086 	bne.w	8004fee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	7812      	ldrb	r2, [r2, #0]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f04:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	7812      	ldrb	r2, [r2, #0]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d902      	bls.n	8004f40 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	75fb      	strb	r3, [r7, #23]
          break;
 8004f3e:	e056      	b.n	8004fee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f58:	d0e7      	beq.n	8004f2a <USB_EPStopXfer+0x82>
 8004f5a:	e048      	b.n	8004fee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f74:	d13b      	bne.n	8004fee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	7812      	ldrb	r2, [r2, #0]
 8004f8a:	0151      	lsls	r1, r2, #5
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	440a      	add	r2, r1
 8004f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f98:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	7812      	ldrb	r2, [r2, #0]
 8004fae:	0151      	lsls	r1, r2, #5
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	440a      	add	r2, r1
 8004fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d902      	bls.n	8004fd4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	75fb      	strb	r3, [r7, #23]
          break;
 8004fd2:	e00c      	b.n	8004fee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fec:	d0e7      	beq.n	8004fbe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b089      	sub	sp, #36	; 0x24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	4611      	mov	r1, r2
 8005008:	461a      	mov	r2, r3
 800500a:	460b      	mov	r3, r1
 800500c:	71fb      	strb	r3, [r7, #7]
 800500e:	4613      	mov	r3, r2
 8005010:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800501a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800501e:	2b00      	cmp	r3, #0
 8005020:	d123      	bne.n	800506a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005022:	88bb      	ldrh	r3, [r7, #4]
 8005024:	3303      	adds	r3, #3
 8005026:	089b      	lsrs	r3, r3, #2
 8005028:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800502a:	2300      	movs	r3, #0
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	e018      	b.n	8005062 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005030:	79fb      	ldrb	r3, [r7, #7]
 8005032:	031a      	lsls	r2, r3, #12
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	4413      	add	r3, r2
 8005038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800503c:	461a      	mov	r2, r3
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	3301      	adds	r3, #1
 8005048:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	3301      	adds	r3, #1
 800504e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	3301      	adds	r3, #1
 8005054:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	3301      	adds	r3, #1
 800505a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	3301      	adds	r3, #1
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	429a      	cmp	r2, r3
 8005068:	d3e2      	bcc.n	8005030 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3724      	adds	r7, #36	; 0x24
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005078:	b480      	push	{r7}
 800507a:	b08b      	sub	sp, #44	; 0x2c
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	4613      	mov	r3, r2
 8005084:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	089b      	lsrs	r3, r3, #2
 8005092:	b29b      	uxth	r3, r3
 8005094:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800509e:	2300      	movs	r3, #0
 80050a0:	623b      	str	r3, [r7, #32]
 80050a2:	e014      	b.n	80050ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	3301      	adds	r3, #1
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	3301      	adds	r3, #1
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	3301      	adds	r3, #1
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	3301      	adds	r3, #1
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	3301      	adds	r3, #1
 80050cc:	623b      	str	r3, [r7, #32]
 80050ce:	6a3a      	ldr	r2, [r7, #32]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d3e6      	bcc.n	80050a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050d6:	8bfb      	ldrh	r3, [r7, #30]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01e      	beq.n	800511a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e6:	461a      	mov	r2, r3
 80050e8:	f107 0310 	add.w	r3, r7, #16
 80050ec:	6812      	ldr	r2, [r2, #0]
 80050ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	701a      	strb	r2, [r3, #0]
      i++;
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	3301      	adds	r3, #1
 8005106:	623b      	str	r3, [r7, #32]
      pDest++;
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	3301      	adds	r3, #1
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800510e:	8bfb      	ldrh	r3, [r7, #30]
 8005110:	3b01      	subs	r3, #1
 8005112:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005114:	8bfb      	ldrh	r3, [r7, #30]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1ea      	bne.n	80050f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800511c:	4618      	mov	r0, r3
 800511e:	372c      	adds	r7, #44	; 0x2c
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	785b      	ldrb	r3, [r3, #1]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d12c      	bne.n	800519e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	db12      	blt.n	800517c <USB_EPSetStall+0x54>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00f      	beq.n	800517c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005176:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800517a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	0151      	lsls	r1, r2, #5
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	440a      	add	r2, r1
 8005192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005196:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	e02b      	b.n	80051f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	db12      	blt.n	80051d6 <USB_EPSetStall+0xae>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00f      	beq.n	80051d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	785b      	ldrb	r3, [r3, #1]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d128      	bne.n	8005272 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	440a      	add	r2, r1
 8005236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800523e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	791b      	ldrb	r3, [r3, #4]
 8005244:	2b03      	cmp	r3, #3
 8005246:	d003      	beq.n	8005250 <USB_EPClearStall+0x4c>
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	791b      	ldrb	r3, [r3, #4]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d138      	bne.n	80052c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	0151      	lsls	r1, r2, #5
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	440a      	add	r2, r1
 8005266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800526a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	e027      	b.n	80052c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	0151      	lsls	r1, r2, #5
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	440a      	add	r2, r1
 8005288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800528c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005290:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	791b      	ldrb	r3, [r3, #4]
 8005296:	2b03      	cmp	r3, #3
 8005298:	d003      	beq.n	80052a2 <USB_EPClearStall+0x9e>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	791b      	ldrb	r3, [r3, #4]
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d10f      	bne.n	80052c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 80052dc:	2300      	movs	r3, #0
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	e016      	b.n	8005310 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ee:	461a      	mov	r2, r3
 80052f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052f4:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005302:	461a      	mov	r2, r3
 8005304:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005308:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	3301      	adds	r3, #1
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2b0e      	cmp	r3, #14
 8005314:	d9e5      	bls.n	80052e2 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531c:	461a      	mov	r2, r3
 800531e:	2300      	movs	r3, #0
 8005320:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005328:	461a      	mov	r2, r3
 800532a:	2300      	movs	r3, #0
 800532c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005334:	461a      	mov	r2, r3
 8005336:	2300      	movs	r3, #0
 8005338:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff f842 	bl	80043c4 <USB_FlushRxFifo>
 8005340:	4603      	mov	r3, r0
 8005342:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <USB_StopDevice+0x7e>
  {
    return ret;
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	e00b      	b.n	8005366 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 800534e:	2110      	movs	r1, #16
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff f803 	bl	800435c <USB_FlushTxFifo>
 8005356:	4603      	mov	r3, r0
 8005358:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <USB_StopDevice+0x94>
  {
    return ret;
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	e000      	b.n	8005366 <USB_StopDevice+0x96>
  }

  return ret;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800536e:	b480      	push	{r7}
 8005370:	b085      	sub	sp, #20
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	460b      	mov	r3, r1
 8005378:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800538c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005390:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80053a2:	68f9      	ldr	r1, [r7, #12]
 80053a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053a8:	4313      	orrs	r3, r2
 80053aa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053d4:	f023 0303 	bic.w	r3, r3, #3
 80053d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053e8:	f023 0302 	bic.w	r3, r3, #2
 80053ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005416:	f023 0303 	bic.w	r3, r3, #3
 800541a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800542a:	f043 0302 	orr.w	r3, r3, #2
 800542e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800543e:	b480      	push	{r7}
 8005440:	b085      	sub	sp, #20
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4013      	ands	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005456:	68fb      	ldr	r3, [r7, #12]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	4013      	ands	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	0c1b      	lsrs	r3, r3, #16
}
 800548c:	4618      	mov	r0, r3
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	4013      	ands	r3, r2
 80054ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	b29b      	uxth	r3, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	4013      	ands	r3, r2
 80054f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054fa:	68bb      	ldr	r3, [r7, #8]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
 8005538:	01db      	lsls	r3, r3, #7
 800553a:	b2db      	uxtb	r3, r3
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4013      	ands	r3, r2
 8005554:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005556:	68bb      	ldr	r3, [r7, #8]
}
 8005558:	4618      	mov	r0, r3
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	f003 0301 	and.w	r3, r3, #1
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800559e:	f023 0307 	bic.w	r3, r3, #7
 80055a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	460b      	mov	r3, r1
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	333c      	adds	r3, #60	; 0x3c
 80055de:	3304      	adds	r3, #4
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	4a26      	ldr	r2, [pc, #152]	; (8005680 <USB_EP0_OutStart+0xb8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d90a      	bls.n	8005602 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055fc:	d101      	bne.n	8005602 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	e037      	b.n	8005672 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005608:	461a      	mov	r2, r3
 800560a:	2300      	movs	r3, #0
 800560c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800561c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005620:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005630:	f043 0318 	orr.w	r3, r3, #24
 8005634:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005644:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005648:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800564a:	7afb      	ldrb	r3, [r7, #11]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d10f      	bne.n	8005670 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005656:	461a      	mov	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800566e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	4f54300a 	.word	0x4f54300a

08005684 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	3301      	adds	r3, #1
 8005694:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4a13      	ldr	r2, [pc, #76]	; (80056e8 <USB_CoreReset+0x64>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d901      	bls.n	80056a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e01b      	b.n	80056da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	daf2      	bge.n	8005690 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f043 0201 	orr.w	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3301      	adds	r3, #1
 80056be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4a09      	ldr	r2, [pc, #36]	; (80056e8 <USB_CoreReset+0x64>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d901      	bls.n	80056cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e006      	b.n	80056da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d0f0      	beq.n	80056ba <USB_CoreReset+0x36>

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	00030d40 	.word	0x00030d40

080056ec <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80056f4:	4a04      	ldr	r2, [pc, #16]	; (8005708 <LL_SetSystemCoreClock+0x1c>)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6013      	str	r3, [r2, #0]
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	20000000 	.word	0x20000000

0800570c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	4613      	mov	r3, r2
 8005718:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005720:	2303      	movs	r3, #3
 8005722:	e025      	b.n	8005770 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	79fa      	ldrb	r2, [r7, #7]
 8005762:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f003 fab1 	bl	8008ccc <USBD_LL_Init>
 800576a:	4603      	mov	r3, r0
 800576c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800576e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <USBD_DeInit+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6852      	ldr	r2, [r2, #4]
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	4611      	mov	r1, r2
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	4798      	blx	r3
  }

  if (pdev->pConfDesc != NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <USBD_DeInit+0x40>
  {
    pdev->pConfDesc = NULL;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Stop the low level driver  */
  ret = USBD_LL_Stop(pdev);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f003 fb3d 	bl	8008e38 <USBD_LL_Stop>
 80057be:	4603      	mov	r3, r0
 80057c0:	73fb      	strb	r3, [r7, #15]

  if (ret != USBD_OK)
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <USBD_DeInit+0x54>
  {
    return ret;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	e005      	b.n	80057d8 <USBD_DeInit+0x60>
  }

  /* Initialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f003 facf 	bl	8008d70 <USBD_LL_DeInit>
 80057d2:	4603      	mov	r3, r0
 80057d4:	73fb      	strb	r3, [r7, #15]

  return ret;
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e010      	b.n	800581a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	f107 020e 	add.w	r2, r7, #14
 800580c:	4610      	mov	r0, r2
 800580e:	4798      	blx	r3
 8005810:	4602      	mov	r2, r0
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
#endif /* USE_USB_FS */


  return USBD_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b082      	sub	sp, #8
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f003 fad2 	bl	8008dd4 <USBD_LL_Start>
 8005830:	4603      	mov	r3, r0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800585c:	2303      	movs	r3, #3
 800585e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d009      	beq.n	800587e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	78fa      	ldrb	r2, [r7, #3]
 8005874:	4611      	mov	r1, r2
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
 800587a:	4603      	mov	r3, r0
 800587c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800587e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d007      	beq.n	80058ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	78fa      	ldrb	r2, [r7, #3]
 80058a8:	4611      	mov	r1, r2
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	4798      	blx	r3
  }

  return USBD_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 ff65 	bl	800679a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80058de:	461a      	mov	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d01a      	beq.n	800592a <USBD_LL_SetupStage+0x72>
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d822      	bhi.n	800593e <USBD_LL_SetupStage+0x86>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <USBD_LL_SetupStage+0x4a>
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d00a      	beq.n	8005916 <USBD_LL_SetupStage+0x5e>
 8005900:	e01d      	b.n	800593e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005908:	4619      	mov	r1, r3
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fa18 	bl	8005d40 <USBD_StdDevReq>
 8005910:	4603      	mov	r3, r0
 8005912:	73fb      	strb	r3, [r7, #15]
      break;
 8005914:	e020      	b.n	8005958 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800591c:	4619      	mov	r1, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fa7c 	bl	8005e1c <USBD_StdItfReq>
 8005924:	4603      	mov	r3, r0
 8005926:	73fb      	strb	r3, [r7, #15]
      break;
 8005928:	e016      	b.n	8005958 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 faba 	bl	8005eac <USBD_StdEPReq>
 8005938:	4603      	mov	r3, r0
 800593a:	73fb      	strb	r3, [r7, #15]
      break;
 800593c:	e00c      	b.n	8005958 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005944:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005948:	b2db      	uxtb	r3, r3
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f003 fb19 	bl	8008f84 <USBD_LL_StallEP>
 8005952:	4603      	mov	r3, r0
 8005954:	73fb      	strb	r3, [r7, #15]
      break;
 8005956:	bf00      	nop
  }

  return ret;
 8005958:	7bfb      	ldrb	r3, [r7, #15]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b086      	sub	sp, #24
 8005966:	af00      	add	r7, sp, #0
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	460b      	mov	r3, r1
 800596c:	607a      	str	r2, [r7, #4]
 800596e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005970:	7afb      	ldrb	r3, [r7, #11]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d137      	bne.n	80059e6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800597c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005984:	2b03      	cmp	r3, #3
 8005986:	d14a      	bne.n	8005a1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	429a      	cmp	r2, r3
 8005992:	d913      	bls.n	80059bc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	1ad2      	subs	r2, r2, r3
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	4293      	cmp	r3, r2
 80059ac:	bf28      	it	cs
 80059ae:	4613      	movcs	r3, r2
 80059b0:	461a      	mov	r2, r3
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 ffc7 	bl	8006948 <USBD_CtlContinueRx>
 80059ba:	e030      	b.n	8005a1e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d105      	bne.n	80059de <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 ffc3 	bl	800696a <USBD_CtlSendStatus>
 80059e4:	e01b      	b.n	8005a1e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d013      	beq.n	8005a1a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d10e      	bne.n	8005a1a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	7afa      	ldrb	r2, [r7, #11]
 8005a06:	4611      	mov	r1, r2
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	4798      	blx	r3
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005a10:	7dfb      	ldrb	r3, [r7, #23]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
 8005a18:	e002      	b.n	8005a20 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e000      	b.n	8005a20 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	460b      	mov	r3, r1
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005a36:	7afb      	ldrb	r3, [r7, #11]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d16a      	bne.n	8005b12 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3314      	adds	r3, #20
 8005a40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d155      	bne.n	8005af8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d914      	bls.n	8005a82 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	1ad2      	subs	r2, r2, r3
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 ff59 	bl	8006926 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a74:	2300      	movs	r3, #0
 8005a76:	2200      	movs	r2, #0
 8005a78:	2100      	movs	r1, #0
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f003 fb88 	bl	8009190 <USBD_LL_PrepareReceive>
 8005a80:	e03a      	b.n	8005af8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d11c      	bne.n	8005ac8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d316      	bcc.n	8005ac8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d20f      	bcs.n	8005ac8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2100      	movs	r1, #0
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 ff3a 	bl	8006926 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005aba:	2300      	movs	r3, #0
 8005abc:	2200      	movs	r2, #0
 8005abe:	2100      	movs	r1, #0
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f003 fb65 	bl	8009190 <USBD_LL_PrepareReceive>
 8005ac6:	e017      	b.n	8005af8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00a      	beq.n	8005aea <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d105      	bne.n	8005aea <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005aea:	2180      	movs	r1, #128	; 0x80
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f003 fa49 	bl	8008f84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 ff4c 	bl	8006990 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d123      	bne.n	8005b4a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f7ff fe99 	bl	800583a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b10:	e01b      	b.n	8005b4a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d013      	beq.n	8005b46 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d10e      	bne.n	8005b46 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	7afa      	ldrb	r2, [r7, #11]
 8005b32:	4611      	mov	r1, r2
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	4798      	blx	r3
 8005b38:	4603      	mov	r3, r0
 8005b3a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005b42:	7dfb      	ldrb	r3, [r7, #23]
 8005b44:	e002      	b.n	8005b4c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e000      	b.n	8005b4c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6852      	ldr	r2, [r2, #4]
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	4611      	mov	r1, r2
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005b98:	2340      	movs	r3, #64	; 0x40
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f003 f97c 	bl	8008e9c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2240      	movs	r2, #64	; 0x40
 8005bb0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bb4:	2340      	movs	r3, #64	; 0x40
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2180      	movs	r1, #128	; 0x80
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f003 f96e 	bl	8008e9c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2240      	movs	r2, #64	; 0x40
 8005bca:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	460b      	mov	r3, r1
 8005be0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	78fa      	ldrb	r2, [r7, #3]
 8005be6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2204      	movs	r2, #4
 8005c0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d105      	bne.n	8005c3e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d10b      	bne.n	8005c76 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b082      	sub	sp, #8
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d009      	beq.n	8005cf8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6852      	ldr	r2, [r2, #4]
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	4798      	blx	r3
  }

  return USBD_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b087      	sub	sp, #28
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	3301      	adds	r3, #1
 8005d18:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005d20:	8a3b      	ldrh	r3, [r7, #16]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	b21a      	sxth	r2, r3
 8005d26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	b21b      	sxth	r3, r3
 8005d2e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005d30:	89fb      	ldrh	r3, [r7, #14]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
	...

08005d40 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d56:	2b40      	cmp	r3, #64	; 0x40
 8005d58:	d005      	beq.n	8005d66 <USBD_StdDevReq+0x26>
 8005d5a:	2b40      	cmp	r3, #64	; 0x40
 8005d5c:	d853      	bhi.n	8005e06 <USBD_StdDevReq+0xc6>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00b      	beq.n	8005d7a <USBD_StdDevReq+0x3a>
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d14f      	bne.n	8005e06 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	6839      	ldr	r1, [r7, #0]
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	4798      	blx	r3
 8005d74:	4603      	mov	r3, r0
 8005d76:	73fb      	strb	r3, [r7, #15]
    break;
 8005d78:	e04a      	b.n	8005e10 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	785b      	ldrb	r3, [r3, #1]
 8005d7e:	2b09      	cmp	r3, #9
 8005d80:	d83b      	bhi.n	8005dfa <USBD_StdDevReq+0xba>
 8005d82:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <USBD_StdDevReq+0x48>)
 8005d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d88:	08005ddd 	.word	0x08005ddd
 8005d8c:	08005df1 	.word	0x08005df1
 8005d90:	08005dfb 	.word	0x08005dfb
 8005d94:	08005de7 	.word	0x08005de7
 8005d98:	08005dfb 	.word	0x08005dfb
 8005d9c:	08005dbb 	.word	0x08005dbb
 8005da0:	08005db1 	.word	0x08005db1
 8005da4:	08005dfb 	.word	0x08005dfb
 8005da8:	08005dd3 	.word	0x08005dd3
 8005dac:	08005dc5 	.word	0x08005dc5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f9d8 	bl	8006168 <USBD_GetDescriptor>
      break;
 8005db8:	e024      	b.n	8005e04 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fb67 	bl	8006490 <USBD_SetAddress>
      break;
 8005dc2:	e01f      	b.n	8005e04 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fba6 	bl	8006518 <USBD_SetConfig>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd0:	e018      	b.n	8005e04 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005dd2:	6839      	ldr	r1, [r7, #0]
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fc43 	bl	8006660 <USBD_GetConfig>
      break;
 8005dda:	e013      	b.n	8005e04 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005ddc:	6839      	ldr	r1, [r7, #0]
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fc73 	bl	80066ca <USBD_GetStatus>
      break;
 8005de4:	e00e      	b.n	8005e04 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005de6:	6839      	ldr	r1, [r7, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fca1 	bl	8006730 <USBD_SetFeature>
      break;
 8005dee:	e009      	b.n	8005e04 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005df0:	6839      	ldr	r1, [r7, #0]
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fcb0 	bl	8006758 <USBD_ClrFeature>
      break;
 8005df8:	e004      	b.n	8005e04 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fd06 	bl	800680e <USBD_CtlError>
      break;
 8005e02:	bf00      	nop
    }
    break;
 8005e04:	e004      	b.n	8005e10 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fd00 	bl	800680e <USBD_CtlError>
    break;
 8005e0e:	bf00      	nop
  }

  return ret;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop

08005e1c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e32:	2b40      	cmp	r3, #64	; 0x40
 8005e34:	d005      	beq.n	8005e42 <USBD_StdItfReq+0x26>
 8005e36:	2b40      	cmp	r3, #64	; 0x40
 8005e38:	d82e      	bhi.n	8005e98 <USBD_StdItfReq+0x7c>
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <USBD_StdItfReq+0x26>
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	d12a      	bne.n	8005e98 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d81d      	bhi.n	8005e8a <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	889b      	ldrh	r3, [r3, #4]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d813      	bhi.n	8005e80 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	4798      	blx	r3
 8005e66:	4603      	mov	r3, r0
 8005e68:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	88db      	ldrh	r3, [r3, #6]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d110      	bne.n	8005e94 <USBD_StdItfReq+0x78>
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10d      	bne.n	8005e94 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fd76 	bl	800696a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005e7e:	e009      	b.n	8005e94 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fcc3 	bl	800680e <USBD_CtlError>
      break;
 8005e88:	e004      	b.n	8005e94 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fcbe 	bl	800680e <USBD_CtlError>
      break;
 8005e92:	e000      	b.n	8005e96 <USBD_StdItfReq+0x7a>
      break;
 8005e94:	bf00      	nop
    }
    break;
 8005e96:	e004      	b.n	8005ea2 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8005e98:	6839      	ldr	r1, [r7, #0]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fcb7 	bl	800680e <USBD_CtlError>
    break;
 8005ea0:	bf00      	nop
  }

  return ret;
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	889b      	ldrh	r3, [r3, #4]
 8005ebe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ec8:	2b40      	cmp	r3, #64	; 0x40
 8005eca:	d007      	beq.n	8005edc <USBD_StdEPReq+0x30>
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	f200 8140 	bhi.w	8006152 <USBD_StdEPReq+0x2a6>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00c      	beq.n	8005ef0 <USBD_StdEPReq+0x44>
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	f040 813b 	bne.w	8006152 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	6839      	ldr	r1, [r7, #0]
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	4798      	blx	r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	73fb      	strb	r3, [r7, #15]
    break;
 8005eee:	e135      	b.n	800615c <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	785b      	ldrb	r3, [r3, #1]
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d007      	beq.n	8005f08 <USBD_StdEPReq+0x5c>
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	f300 8124 	bgt.w	8006146 <USBD_StdEPReq+0x29a>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d07b      	beq.n	8005ffa <USBD_StdEPReq+0x14e>
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d03b      	beq.n	8005f7e <USBD_StdEPReq+0xd2>
 8005f06:	e11e      	b.n	8006146 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d002      	beq.n	8005f18 <USBD_StdEPReq+0x6c>
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d016      	beq.n	8005f44 <USBD_StdEPReq+0x98>
 8005f16:	e02c      	b.n	8005f72 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f18:	7bbb      	ldrb	r3, [r7, #14]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00d      	beq.n	8005f3a <USBD_StdEPReq+0x8e>
 8005f1e:	7bbb      	ldrb	r3, [r7, #14]
 8005f20:	2b80      	cmp	r3, #128	; 0x80
 8005f22:	d00a      	beq.n	8005f3a <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f003 f82b 	bl	8008f84 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f2e:	2180      	movs	r1, #128	; 0x80
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f003 f827 	bl	8008f84 <USBD_LL_StallEP>
 8005f36:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005f38:	e020      	b.n	8005f7c <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fc66 	bl	800680e <USBD_CtlError>
        break;
 8005f42:	e01b      	b.n	8005f7c <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	885b      	ldrh	r3, [r3, #2]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10e      	bne.n	8005f6a <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f4c:	7bbb      	ldrb	r3, [r7, #14]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00b      	beq.n	8005f6a <USBD_StdEPReq+0xbe>
 8005f52:	7bbb      	ldrb	r3, [r7, #14]
 8005f54:	2b80      	cmp	r3, #128	; 0x80
 8005f56:	d008      	beq.n	8005f6a <USBD_StdEPReq+0xbe>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	88db      	ldrh	r3, [r3, #6]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f60:	7bbb      	ldrb	r3, [r7, #14]
 8005f62:	4619      	mov	r1, r3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f003 f80d 	bl	8008f84 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fcfd 	bl	800696a <USBD_CtlSendStatus>

        break;
 8005f70:	e004      	b.n	8005f7c <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8005f72:	6839      	ldr	r1, [r7, #0]
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fc4a 	bl	800680e <USBD_CtlError>
        break;
 8005f7a:	bf00      	nop
      }
      break;
 8005f7c:	e0e8      	b.n	8006150 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d002      	beq.n	8005f8e <USBD_StdEPReq+0xe2>
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d016      	beq.n	8005fba <USBD_StdEPReq+0x10e>
 8005f8c:	e02e      	b.n	8005fec <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f8e:	7bbb      	ldrb	r3, [r7, #14]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00d      	beq.n	8005fb0 <USBD_StdEPReq+0x104>
 8005f94:	7bbb      	ldrb	r3, [r7, #14]
 8005f96:	2b80      	cmp	r3, #128	; 0x80
 8005f98:	d00a      	beq.n	8005fb0 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f9a:	7bbb      	ldrb	r3, [r7, #14]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f002 fff0 	bl	8008f84 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fa4:	2180      	movs	r1, #128	; 0x80
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f002 ffec 	bl	8008f84 <USBD_LL_StallEP>
 8005fac:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005fae:	e023      	b.n	8005ff8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fc2b 	bl	800680e <USBD_CtlError>
        break;
 8005fb8:	e01e      	b.n	8005ff8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	885b      	ldrh	r3, [r3, #2]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d119      	bne.n	8005ff6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005fc2:	7bbb      	ldrb	r3, [r7, #14]
 8005fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d004      	beq.n	8005fd6 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005fcc:	7bbb      	ldrb	r3, [r7, #14]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f003 f80d 	bl	8008ff0 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fcc7 	bl	800696a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	4798      	blx	r3
        }
        break;
 8005fea:	e004      	b.n	8005ff6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fc0d 	bl	800680e <USBD_CtlError>
        break;
 8005ff4:	e000      	b.n	8005ff8 <USBD_StdEPReq+0x14c>
        break;
 8005ff6:	bf00      	nop
      }
      break;
 8005ff8:	e0aa      	b.n	8006150 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006000:	2b02      	cmp	r3, #2
 8006002:	d002      	beq.n	800600a <USBD_StdEPReq+0x15e>
 8006004:	2b03      	cmp	r3, #3
 8006006:	d032      	beq.n	800606e <USBD_StdEPReq+0x1c2>
 8006008:	e097      	b.n	800613a <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800600a:	7bbb      	ldrb	r3, [r7, #14]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <USBD_StdEPReq+0x174>
 8006010:	7bbb      	ldrb	r3, [r7, #14]
 8006012:	2b80      	cmp	r3, #128	; 0x80
 8006014:	d004      	beq.n	8006020 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fbf8 	bl	800680e <USBD_CtlError>
          break;
 800601e:	e091      	b.n	8006144 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006024:	2b00      	cmp	r3, #0
 8006026:	da0b      	bge.n	8006040 <USBD_StdEPReq+0x194>
 8006028:	7bbb      	ldrb	r3, [r7, #14]
 800602a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	3310      	adds	r3, #16
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	4413      	add	r3, r2
 800603c:	3304      	adds	r3, #4
 800603e:	e00b      	b.n	8006058 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006040:	7bbb      	ldrb	r3, [r7, #14]
 8006042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006046:	4613      	mov	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	4413      	add	r3, r2
 8006056:	3304      	adds	r3, #4
 8006058:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2200      	movs	r2, #0
 800605e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2202      	movs	r2, #2
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fc42 	bl	80068f0 <USBD_CtlSendData>
        break;
 800606c:	e06a      	b.n	8006144 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800606e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006072:	2b00      	cmp	r3, #0
 8006074:	da11      	bge.n	800609a <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	f003 020f 	and.w	r2, r3, #15
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	440b      	add	r3, r1
 8006088:	3324      	adds	r3, #36	; 0x24
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d117      	bne.n	80060c0 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fbbb 	bl	800680e <USBD_CtlError>
            break;
 8006098:	e054      	b.n	8006144 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800609a:	7bbb      	ldrb	r3, [r7, #14]
 800609c:	f003 020f 	and.w	r2, r3, #15
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	440b      	add	r3, r1
 80060ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 80060b6:	6839      	ldr	r1, [r7, #0]
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fba8 	bl	800680e <USBD_CtlError>
            break;
 80060be:	e041      	b.n	8006144 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	da0b      	bge.n	80060e0 <USBD_StdEPReq+0x234>
 80060c8:	7bbb      	ldrb	r3, [r7, #14]
 80060ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	3310      	adds	r3, #16
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	4413      	add	r3, r2
 80060dc:	3304      	adds	r3, #4
 80060de:	e00b      	b.n	80060f8 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80060e0:	7bbb      	ldrb	r3, [r7, #14]
 80060e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	4413      	add	r3, r2
 80060f6:	3304      	adds	r3, #4
 80060f8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060fa:	7bbb      	ldrb	r3, [r7, #14]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <USBD_StdEPReq+0x25a>
 8006100:	7bbb      	ldrb	r3, [r7, #14]
 8006102:	2b80      	cmp	r3, #128	; 0x80
 8006104:	d103      	bne.n	800610e <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	e00e      	b.n	800612c <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800610e:	7bbb      	ldrb	r3, [r7, #14]
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f002 ffa2 	bl	800905c <USBD_LL_IsStallEP>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2201      	movs	r2, #1
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	e002      	b.n	800612c <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2202      	movs	r2, #2
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fbdc 	bl	80068f0 <USBD_CtlSendData>
          break;
 8006138:	e004      	b.n	8006144 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fb66 	bl	800680e <USBD_CtlError>
        break;
 8006142:	bf00      	nop
      }
      break;
 8006144:	e004      	b.n	8006150 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fb60 	bl	800680e <USBD_CtlError>
      break;
 800614e:	bf00      	nop
    }
    break;
 8006150:	e004      	b.n	800615c <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8006152:	6839      	ldr	r1, [r7, #0]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fb5a 	bl	800680e <USBD_CtlError>
    break;
 800615a:	bf00      	nop
  }

  return ret;
 800615c:	7bfb      	ldrb	r3, [r7, #15]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	885b      	ldrh	r3, [r3, #2]
 8006182:	0a1b      	lsrs	r3, r3, #8
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	2b0e      	cmp	r3, #14
 800618a:	f200 8152 	bhi.w	8006432 <USBD_GetDescriptor+0x2ca>
 800618e:	a201      	add	r2, pc, #4	; (adr r2, 8006194 <USBD_GetDescriptor+0x2c>)
 8006190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006194:	08006205 	.word	0x08006205
 8006198:	0800621d 	.word	0x0800621d
 800619c:	0800625d 	.word	0x0800625d
 80061a0:	08006433 	.word	0x08006433
 80061a4:	08006433 	.word	0x08006433
 80061a8:	080063d3 	.word	0x080063d3
 80061ac:	080063ff 	.word	0x080063ff
 80061b0:	08006433 	.word	0x08006433
 80061b4:	08006433 	.word	0x08006433
 80061b8:	08006433 	.word	0x08006433
 80061bc:	08006433 	.word	0x08006433
 80061c0:	08006433 	.word	0x08006433
 80061c4:	08006433 	.word	0x08006433
 80061c8:	08006433 	.word	0x08006433
 80061cc:	080061d1 	.word	0x080061d1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00b      	beq.n	80061f4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	7c12      	ldrb	r2, [r2, #16]
 80061e8:	f107 0108 	add.w	r1, r7, #8
 80061ec:	4610      	mov	r0, r2
 80061ee:	4798      	blx	r3
 80061f0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80061f2:	e126      	b.n	8006442 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fb09 	bl	800680e <USBD_CtlError>
      err++;
 80061fc:	7afb      	ldrb	r3, [r7, #11]
 80061fe:	3301      	adds	r3, #1
 8006200:	72fb      	strb	r3, [r7, #11]
    break;
 8006202:	e11e      	b.n	8006442 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	7c12      	ldrb	r2, [r2, #16]
 8006210:	f107 0108 	add.w	r1, r7, #8
 8006214:	4610      	mov	r0, r2
 8006216:	4798      	blx	r3
 8006218:	60f8      	str	r0, [r7, #12]
    break;
 800621a:	e112      	b.n	8006442 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	7c1b      	ldrb	r3, [r3, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10d      	bne.n	8006240 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622c:	f107 0208 	add.w	r2, r7, #8
 8006230:	4610      	mov	r0, r2
 8006232:	4798      	blx	r3
 8006234:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3301      	adds	r3, #1
 800623a:	2202      	movs	r2, #2
 800623c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800623e:	e100      	b.n	8006442 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	f107 0208 	add.w	r2, r7, #8
 800624c:	4610      	mov	r0, r2
 800624e:	4798      	blx	r3
 8006250:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3301      	adds	r3, #1
 8006256:	2202      	movs	r2, #2
 8006258:	701a      	strb	r2, [r3, #0]
    break;
 800625a:	e0f2      	b.n	8006442 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	885b      	ldrh	r3, [r3, #2]
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b05      	cmp	r3, #5
 8006264:	f200 80ac 	bhi.w	80063c0 <USBD_GetDescriptor+0x258>
 8006268:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <USBD_GetDescriptor+0x108>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	08006289 	.word	0x08006289
 8006274:	080062bd 	.word	0x080062bd
 8006278:	080062f1 	.word	0x080062f1
 800627c:	08006325 	.word	0x08006325
 8006280:	08006359 	.word	0x08006359
 8006284:	0800638d 	.word	0x0800638d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00b      	beq.n	80062ac <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	7c12      	ldrb	r2, [r2, #16]
 80062a0:	f107 0108 	add.w	r1, r7, #8
 80062a4:	4610      	mov	r0, r2
 80062a6:	4798      	blx	r3
 80062a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062aa:	e091      	b.n	80063d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 faad 	bl	800680e <USBD_CtlError>
        err++;
 80062b4:	7afb      	ldrb	r3, [r7, #11]
 80062b6:	3301      	adds	r3, #1
 80062b8:	72fb      	strb	r3, [r7, #11]
      break;
 80062ba:	e089      	b.n	80063d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00b      	beq.n	80062e0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	7c12      	ldrb	r2, [r2, #16]
 80062d4:	f107 0108 	add.w	r1, r7, #8
 80062d8:	4610      	mov	r0, r2
 80062da:	4798      	blx	r3
 80062dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062de:	e077      	b.n	80063d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fa93 	bl	800680e <USBD_CtlError>
        err++;
 80062e8:	7afb      	ldrb	r3, [r7, #11]
 80062ea:	3301      	adds	r3, #1
 80062ec:	72fb      	strb	r3, [r7, #11]
      break;
 80062ee:	e06f      	b.n	80063d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	7c12      	ldrb	r2, [r2, #16]
 8006308:	f107 0108 	add.w	r1, r7, #8
 800630c:	4610      	mov	r0, r2
 800630e:	4798      	blx	r3
 8006310:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006312:	e05d      	b.n	80063d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fa79 	bl	800680e <USBD_CtlError>
        err++;
 800631c:	7afb      	ldrb	r3, [r7, #11]
 800631e:	3301      	adds	r3, #1
 8006320:	72fb      	strb	r3, [r7, #11]
      break;
 8006322:	e055      	b.n	80063d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	7c12      	ldrb	r2, [r2, #16]
 800633c:	f107 0108 	add.w	r1, r7, #8
 8006340:	4610      	mov	r0, r2
 8006342:	4798      	blx	r3
 8006344:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006346:	e043      	b.n	80063d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa5f 	bl	800680e <USBD_CtlError>
        err++;
 8006350:	7afb      	ldrb	r3, [r7, #11]
 8006352:	3301      	adds	r3, #1
 8006354:	72fb      	strb	r3, [r7, #11]
      break;
 8006356:	e03b      	b.n	80063d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00b      	beq.n	800637c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	7c12      	ldrb	r2, [r2, #16]
 8006370:	f107 0108 	add.w	r1, r7, #8
 8006374:	4610      	mov	r0, r2
 8006376:	4798      	blx	r3
 8006378:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800637a:	e029      	b.n	80063d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fa45 	bl	800680e <USBD_CtlError>
        err++;
 8006384:	7afb      	ldrb	r3, [r7, #11]
 8006386:	3301      	adds	r3, #1
 8006388:	72fb      	strb	r3, [r7, #11]
      break;
 800638a:	e021      	b.n	80063d0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00b      	beq.n	80063b0 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	7c12      	ldrb	r2, [r2, #16]
 80063a4:	f107 0108 	add.w	r1, r7, #8
 80063a8:	4610      	mov	r0, r2
 80063aa:	4798      	blx	r3
 80063ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063ae:	e00f      	b.n	80063d0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fa2b 	bl	800680e <USBD_CtlError>
        err++;
 80063b8:	7afb      	ldrb	r3, [r7, #11]
 80063ba:	3301      	adds	r3, #1
 80063bc:	72fb      	strb	r3, [r7, #11]
      break;
 80063be:	e007      	b.n	80063d0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fa23 	bl	800680e <USBD_CtlError>
      err++;
 80063c8:	7afb      	ldrb	r3, [r7, #11]
 80063ca:	3301      	adds	r3, #1
 80063cc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80063ce:	bf00      	nop
    }
    break;
 80063d0:	e037      	b.n	8006442 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	7c1b      	ldrb	r3, [r3, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d109      	bne.n	80063ee <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e2:	f107 0208 	add.w	r2, r7, #8
 80063e6:	4610      	mov	r0, r2
 80063e8:	4798      	blx	r3
 80063ea:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80063ec:	e029      	b.n	8006442 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80063ee:	6839      	ldr	r1, [r7, #0]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fa0c 	bl	800680e <USBD_CtlError>
      err++;
 80063f6:	7afb      	ldrb	r3, [r7, #11]
 80063f8:	3301      	adds	r3, #1
 80063fa:	72fb      	strb	r3, [r7, #11]
    break;
 80063fc:	e021      	b.n	8006442 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	7c1b      	ldrb	r3, [r3, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10d      	bne.n	8006422 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	f107 0208 	add.w	r2, r7, #8
 8006412:	4610      	mov	r0, r2
 8006414:	4798      	blx	r3
 8006416:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3301      	adds	r3, #1
 800641c:	2207      	movs	r2, #7
 800641e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006420:	e00f      	b.n	8006442 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006422:	6839      	ldr	r1, [r7, #0]
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f9f2 	bl	800680e <USBD_CtlError>
      err++;
 800642a:	7afb      	ldrb	r3, [r7, #11]
 800642c:	3301      	adds	r3, #1
 800642e:	72fb      	strb	r3, [r7, #11]
    break;
 8006430:	e007      	b.n	8006442 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f9ea 	bl	800680e <USBD_CtlError>
    err++;
 800643a:	7afb      	ldrb	r3, [r7, #11]
 800643c:	3301      	adds	r3, #1
 800643e:	72fb      	strb	r3, [r7, #11]
    break;
 8006440:	bf00      	nop
  }

  if (err != 0U)
 8006442:	7afb      	ldrb	r3, [r7, #11]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d11e      	bne.n	8006486 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	88db      	ldrh	r3, [r3, #6]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d016      	beq.n	800647e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8006450:	893b      	ldrh	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00e      	beq.n	8006474 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	88da      	ldrh	r2, [r3, #6]
 800645a:	893b      	ldrh	r3, [r7, #8]
 800645c:	4293      	cmp	r3, r2
 800645e:	bf28      	it	cs
 8006460:	4613      	movcs	r3, r2
 8006462:	b29b      	uxth	r3, r3
 8006464:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006466:	893b      	ldrh	r3, [r7, #8]
 8006468:	461a      	mov	r2, r3
 800646a:	68f9      	ldr	r1, [r7, #12]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fa3f 	bl	80068f0 <USBD_CtlSendData>
 8006472:	e009      	b.n	8006488 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f9c9 	bl	800680e <USBD_CtlError>
 800647c:	e004      	b.n	8006488 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fa73 	bl	800696a <USBD_CtlSendStatus>
 8006484:	e000      	b.n	8006488 <USBD_GetDescriptor+0x320>
    return;
 8006486:	bf00      	nop
    }
  }
}
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop

08006490 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	889b      	ldrh	r3, [r3, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d130      	bne.n	8006504 <USBD_SetAddress+0x74>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	88db      	ldrh	r3, [r3, #6]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d12c      	bne.n	8006504 <USBD_SetAddress+0x74>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	885b      	ldrh	r3, [r3, #2]
 80064ae:	2b7f      	cmp	r3, #127	; 0x7f
 80064b0:	d828      	bhi.n	8006504 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	885b      	ldrh	r3, [r3, #2]
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d104      	bne.n	80064d2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80064c8:	6839      	ldr	r1, [r7, #0]
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f99f 	bl	800680e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d0:	e01d      	b.n	800650e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	7bfa      	ldrb	r2, [r7, #15]
 80064d6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f002 fde8 	bl	80090b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fa40 	bl	800696a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d004      	beq.n	80064fa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064f8:	e009      	b.n	800650e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006502:	e004      	b.n	800650e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f981 	bl	800680e <USBD_CtlError>
  }
}
 800650c:	bf00      	nop
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	885b      	ldrh	r3, [r3, #2]
 800652a:	b2da      	uxtb	r2, r3
 800652c:	4b4b      	ldr	r3, [pc, #300]	; (800665c <USBD_SetConfig+0x144>)
 800652e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006530:	4b4a      	ldr	r3, [pc, #296]	; (800665c <USBD_SetConfig+0x144>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d905      	bls.n	8006544 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f967 	bl	800680e <USBD_CtlError>
    return USBD_FAIL;
 8006540:	2303      	movs	r3, #3
 8006542:	e087      	b.n	8006654 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800654a:	2b02      	cmp	r3, #2
 800654c:	d002      	beq.n	8006554 <USBD_SetConfig+0x3c>
 800654e:	2b03      	cmp	r3, #3
 8006550:	d025      	beq.n	800659e <USBD_SetConfig+0x86>
 8006552:	e071      	b.n	8006638 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006554:	4b41      	ldr	r3, [pc, #260]	; (800665c <USBD_SetConfig+0x144>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d01c      	beq.n	8006596 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800655c:	4b3f      	ldr	r3, [pc, #252]	; (800665c <USBD_SetConfig+0x144>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	461a      	mov	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006566:	4b3d      	ldr	r3, [pc, #244]	; (800665c <USBD_SetConfig+0x144>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	4619      	mov	r1, r3
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff f96f 	bl	8005850 <USBD_SetClassConfig>
 8006572:	4603      	mov	r3, r0
 8006574:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d004      	beq.n	8006586 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f945 	bl	800680e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006584:	e065      	b.n	8006652 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f9ef 	bl	800696a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2203      	movs	r2, #3
 8006590:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006594:	e05d      	b.n	8006652 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f9e7 	bl	800696a <USBD_CtlSendStatus>
    break;
 800659c:	e059      	b.n	8006652 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800659e:	4b2f      	ldr	r3, [pc, #188]	; (800665c <USBD_SetConfig+0x144>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d112      	bne.n	80065cc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2202      	movs	r2, #2
 80065aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80065ae:	4b2b      	ldr	r3, [pc, #172]	; (800665c <USBD_SetConfig+0x144>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065b8:	4b28      	ldr	r3, [pc, #160]	; (800665c <USBD_SetConfig+0x144>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff f962 	bl	8005888 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f9d0 	bl	800696a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80065ca:	e042      	b.n	8006652 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80065cc:	4b23      	ldr	r3, [pc, #140]	; (800665c <USBD_SetConfig+0x144>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	461a      	mov	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d02a      	beq.n	8006630 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff f950 	bl	8005888 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80065e8:	4b1c      	ldr	r3, [pc, #112]	; (800665c <USBD_SetConfig+0x144>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80065f2:	4b1a      	ldr	r3, [pc, #104]	; (800665c <USBD_SetConfig+0x144>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff f929 	bl	8005850 <USBD_SetClassConfig>
 80065fe:	4603      	mov	r3, r0
 8006600:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00f      	beq.n	8006628 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f8ff 	bl	800680e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff f935 	bl	8005888 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2202      	movs	r2, #2
 8006622:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006626:	e014      	b.n	8006652 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f99e 	bl	800696a <USBD_CtlSendStatus>
    break;
 800662e:	e010      	b.n	8006652 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f99a 	bl	800696a <USBD_CtlSendStatus>
    break;
 8006636:	e00c      	b.n	8006652 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f8e7 	bl	800680e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <USBD_SetConfig+0x144>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	4619      	mov	r1, r3
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff f91e 	bl	8005888 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800664c:	2303      	movs	r3, #3
 800664e:	73fb      	strb	r3, [r7, #15]
    break;
 8006650:	bf00      	nop
  }

  return ret;
 8006652:	7bfb      	ldrb	r3, [r7, #15]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	200006d8 	.word	0x200006d8

08006660 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	88db      	ldrh	r3, [r3, #6]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d004      	beq.n	800667c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f8ca 	bl	800680e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800667a:	e022      	b.n	80066c2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006682:	2b02      	cmp	r3, #2
 8006684:	dc02      	bgt.n	800668c <USBD_GetConfig+0x2c>
 8006686:	2b00      	cmp	r3, #0
 8006688:	dc03      	bgt.n	8006692 <USBD_GetConfig+0x32>
 800668a:	e015      	b.n	80066b8 <USBD_GetConfig+0x58>
 800668c:	2b03      	cmp	r3, #3
 800668e:	d00b      	beq.n	80066a8 <USBD_GetConfig+0x48>
 8006690:	e012      	b.n	80066b8 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3308      	adds	r3, #8
 800669c:	2201      	movs	r2, #1
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f925 	bl	80068f0 <USBD_CtlSendData>
      break;
 80066a6:	e00c      	b.n	80066c2 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3304      	adds	r3, #4
 80066ac:	2201      	movs	r2, #1
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f91d 	bl	80068f0 <USBD_CtlSendData>
      break;
 80066b6:	e004      	b.n	80066c2 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f8a7 	bl	800680e <USBD_CtlError>
      break;
 80066c0:	bf00      	nop
}
 80066c2:	bf00      	nop
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066da:	3b01      	subs	r3, #1
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d81e      	bhi.n	800671e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	88db      	ldrh	r3, [r3, #6]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d004      	beq.n	80066f2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f88f 	bl	800680e <USBD_CtlError>
      break;
 80066f0:	e01a      	b.n	8006728 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f043 0202 	orr.w	r2, r3, #2
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	330c      	adds	r3, #12
 8006712:	2202      	movs	r2, #2
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f8ea 	bl	80068f0 <USBD_CtlSendData>
    break;
 800671c:	e004      	b.n	8006728 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f874 	bl	800680e <USBD_CtlError>
    break;
 8006726:	bf00      	nop
  }
}
 8006728:	bf00      	nop
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	885b      	ldrh	r3, [r3, #2]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d106      	bne.n	8006750 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f90d 	bl	800696a <USBD_CtlSendStatus>
  }
}
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006768:	3b01      	subs	r3, #1
 800676a:	2b02      	cmp	r3, #2
 800676c:	d80b      	bhi.n	8006786 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	885b      	ldrh	r3, [r3, #2]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d10c      	bne.n	8006790 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f8f3 	bl	800696a <USBD_CtlSendStatus>
      }
      break;
 8006784:	e004      	b.n	8006790 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f840 	bl	800680e <USBD_CtlError>
      break;
 800678e:	e000      	b.n	8006792 <USBD_ClrFeature+0x3a>
      break;
 8006790:	bf00      	nop
  }
}
 8006792:	bf00      	nop
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	781a      	ldrb	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3301      	adds	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	781a      	ldrb	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f7ff fa9c 	bl	8005d02 <SWAPBYTE>
 80067ca:	4603      	mov	r3, r0
 80067cc:	461a      	mov	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3301      	adds	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3301      	adds	r3, #1
 80067dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f7ff fa8f 	bl	8005d02 <SWAPBYTE>
 80067e4:	4603      	mov	r3, r0
 80067e6:	461a      	mov	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3301      	adds	r3, #1
 80067f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3301      	adds	r3, #1
 80067f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f7ff fa82 	bl	8005d02 <SWAPBYTE>
 80067fe:	4603      	mov	r3, r0
 8006800:	461a      	mov	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	80da      	strh	r2, [r3, #6]
}
 8006806:	bf00      	nop
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b082      	sub	sp, #8
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006818:	2180      	movs	r1, #128	; 0x80
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f002 fbb2 	bl	8008f84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006820:	2100      	movs	r1, #0
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f002 fbae 	bl	8008f84 <USBD_LL_StallEP>
}
 8006828:	bf00      	nop
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d036      	beq.n	80068b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800684a:	6938      	ldr	r0, [r7, #16]
 800684c:	f000 f836 	bl	80068bc <USBD_GetLen>
 8006850:	4603      	mov	r3, r0
 8006852:	3301      	adds	r3, #1
 8006854:	b29b      	uxth	r3, r3
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	b29a      	uxth	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800685e:	7dfb      	ldrb	r3, [r7, #23]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	4413      	add	r3, r2
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	7812      	ldrb	r2, [r2, #0]
 8006868:	701a      	strb	r2, [r3, #0]
  idx++;
 800686a:	7dfb      	ldrb	r3, [r7, #23]
 800686c:	3301      	adds	r3, #1
 800686e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	4413      	add	r3, r2
 8006876:	2203      	movs	r2, #3
 8006878:	701a      	strb	r2, [r3, #0]
  idx++;
 800687a:	7dfb      	ldrb	r3, [r7, #23]
 800687c:	3301      	adds	r3, #1
 800687e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006880:	e013      	b.n	80068aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006882:	7dfb      	ldrb	r3, [r7, #23]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	4413      	add	r3, r2
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	7812      	ldrb	r2, [r2, #0]
 800688c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	3301      	adds	r3, #1
 8006892:	613b      	str	r3, [r7, #16]
    idx++;
 8006894:	7dfb      	ldrb	r3, [r7, #23]
 8006896:	3301      	adds	r3, #1
 8006898:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800689a:	7dfb      	ldrb	r3, [r7, #23]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	4413      	add	r3, r2
 80068a0:	2200      	movs	r2, #0
 80068a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	3301      	adds	r3, #1
 80068a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e7      	bne.n	8006882 <USBD_GetString+0x52>
 80068b2:	e000      	b.n	80068b6 <USBD_GetString+0x86>
    return;
 80068b4:	bf00      	nop
  }
}
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80068cc:	e005      	b.n	80068da <USBD_GetLen+0x1e>
  {
    len++;
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	3301      	adds	r3, #1
 80068d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	3301      	adds	r3, #1
 80068d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f5      	bne.n	80068ce <USBD_GetLen+0x12>
  }

  return len;
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2202      	movs	r2, #2
 8006900:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	2100      	movs	r1, #0
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f002 fc02 	bl	8009120 <USBD_LL_Transmit>

  return USBD_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	60f8      	str	r0, [r7, #12]
 800692e:	60b9      	str	r1, [r7, #8]
 8006930:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	2100      	movs	r1, #0
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f002 fbf1 	bl	8009120 <USBD_LL_Transmit>

  return USBD_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	2100      	movs	r1, #0
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f002 fc18 	bl	8009190 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2204      	movs	r2, #4
 8006976:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800697a:	2300      	movs	r3, #0
 800697c:	2200      	movs	r2, #0
 800697e:	2100      	movs	r1, #0
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f002 fbcd 	bl	8009120 <USBD_LL_Transmit>

  return USBD_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2205      	movs	r2, #5
 800699c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069a0:	2300      	movs	r3, #0
 80069a2:	2200      	movs	r2, #0
 80069a4:	2100      	movs	r1, #0
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f002 fbf2 	bl	8009190 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <CpuIrqDisable>:
** \brief     Disable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
 80069b6:	b480      	push	{r7}
 80069b8:	af00      	add	r7, sp, #0
  __asm volatile ("cpsid i");
 80069ba:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 80069bc:	bf00      	nop
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <CpuIrqEnable>:
** \brief     Enable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
 80069c6:	b480      	push	{r7}
 80069c8:	af00      	add	r7, sp, #0
  __asm volatile ("cpsie i");
 80069ca:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 80069cc:	bf00      	nop
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	af00      	add	r7, sp, #0
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 80069da:	f7ff ffec 	bl	80069b6 <CpuIrqDisable>
} /*** end of CpuInit ***/
 80069de:	bf00      	nop
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 80069ea:	f000 fbcd 	bl	8007188 <NvmVerifyChecksum>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01e      	beq.n	8006a32 <CpuStartUserProgram+0x4e>
    /* not a valid user program so it cannot be started */
    return;
  }
#if (BOOT_CPU_USER_PROGRAM_START_HOOK > 0)
  /* invoke callback */
  if (CpuUserProgramStartHook() == BLT_FALSE)
 80069f4:	f7f9 fdc0 	bl	8000578 <CpuUserProgramStartHook>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d01b      	beq.n	8006a36 <CpuStartUserProgram+0x52>
    return;
  }
#endif
#if (BOOT_COM_ENABLE > 0)
  /* release the communication interface */
  ComFree();
 80069fe:	f001 f97d 	bl	8007cfc <ComFree>
#endif
  /* reset the HAL */
  HAL_DeInit();
 8006a02:	f7fa fa09 	bl	8000e18 <HAL_DeInit>
  /* reset the timer */
  TimerReset();
 8006a06:	f000 fd4b 	bl	80074a0 <TimerReset>
  /* remap user program's vector table */
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 8006a0a:	f000 fbc4 	bl	8007196 <NvmGetUserProgBaseAddress>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	4a0b      	ldr	r2, [pc, #44]	; (8006a40 <CpuStartUserProgram+0x5c>)
 8006a12:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006a16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a1a:	6093      	str	r3, [r2, #8]
  /* set the address where the bootloader needs to jump to. this is the address of
   * the 2nd entry in the user program's vector table. this address points to the
   * user program's reset handler.
   */
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 8006a1c:	f000 fbbb 	bl	8007196 <NvmGetUserProgBaseAddress>
 8006a20:	4603      	mov	r3, r0
 8006a22:	3304      	adds	r3, #4
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	607b      	str	r3, [r7, #4]
  /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
   * explicitly disables these for security reasons. Enable them here again, so it does 
   * not have to be done by the user program.
   */
  CpuIrqEnable();
 8006a28:	f7ff ffcd 	bl	80069c6 <CpuIrqEnable>
  /* start the user program by activating its reset interrupt service routine */
  pProgResetHandler();
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4798      	blx	r3
 8006a30:	e002      	b.n	8006a38 <CpuStartUserProgram+0x54>
    return;
 8006a32:	bf00      	nop
 8006a34:	e000      	b.n	8006a38 <CpuStartUserProgram+0x54>
    return;
 8006a36:	bf00      	nop
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
#endif
} /*** end of CpuStartUserProgram ***/
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	e000ed00 	.word	0xe000ed00

08006a44 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	80fb      	strh	r3, [r7, #6]
  blt_int8u *from, *to;

  /* set casted pointers */
  from = (blt_int8u *)src;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	617b      	str	r3, [r7, #20]
  to = (blt_int8u *)dest;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	613b      	str	r3, [r7, #16]

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 8006a5a:	e009      	b.n	8006a70 <CpuMemCopy+0x2c>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	1c53      	adds	r3, r2, #1
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	1c59      	adds	r1, r3, #1
 8006a66:	6139      	str	r1, [r7, #16]
 8006a68:	7812      	ldrb	r2, [r2, #0]
 8006a6a:	701a      	strb	r2, [r3, #0]
    /* keep the watchdog happy */
    CopService();
 8006a6c:	f001 f9da 	bl	8007e24 <CopService>
  while (len-- > 0)
 8006a70:	88fb      	ldrh	r3, [r7, #6]
 8006a72:	1e5a      	subs	r2, r3, #1
 8006a74:	80fa      	strh	r2, [r7, #6]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1f0      	bne.n	8006a5c <CpuMemCopy+0x18>
  }
} /*** end of CpuMemCopy ***/
 8006a7a:	bf00      	nop
 8006a7c:	bf00      	nop
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <FlashInit>:
** \brief     Initializes the flash driver.
** \return    none.
**
****************************************************************************************/
void FlashInit(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  /* init the flash block info structs by setting the address to an invalid address */
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8006a88:	4b06      	ldr	r3, [pc, #24]	; (8006aa4 <FlashInit+0x20>)
 8006a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8e:	601a      	str	r2, [r3, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8006a90:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <FlashInit+0x24>)
 8006a92:	f04f 32ff 	mov.w	r2, #4294967295
 8006a96:	601a      	str	r2, [r3, #0]
} /*** end of FlashInit ***/
 8006a98:	bf00      	nop
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	200006dc 	.word	0x200006dc
 8006aa8:	200008e0 	.word	0x200008e0

08006aac <FlashWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  blt_addr base_addr;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	1e5a      	subs	r2, r3, #1
 8006abc:	491c      	ldr	r1, [pc, #112]	; (8006b30 <FlashWrite+0x84>)
 8006abe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ac2:	4419      	add	r1, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	1acb      	subs	r3, r1, r3
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d901      	bls.n	8006ad2 <FlashWrite+0x26>
  {
    return BLT_FALSE;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e02a      	b.n	8006b28 <FlashWrite+0x7c>
  }
  
  /* make sure the addresses are within the flash device */
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 faf0 	bl	80070b8 <FlashGetSector>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2bff      	cmp	r3, #255	; 0xff
 8006adc:	d009      	beq.n	8006af2 <FlashWrite+0x46>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fae6 	bl	80070b8 <FlashGetSector>
 8006aec:	4603      	mov	r3, r0
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8006aee:	2bff      	cmp	r3, #255	; 0xff
 8006af0:	d101      	bne.n	8006af6 <FlashWrite+0x4a>
  {
    return BLT_FALSE;
 8006af2:	2300      	movs	r3, #0
 8006af4:	e018      	b.n	8006b28 <FlashWrite+0x7c>
  }

  /* if this is the bootblock, then let the boot block manager handle it */
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006afc:	f023 0301 	bic.w	r3, r3, #1
 8006b00:	617b      	str	r3, [r7, #20]
  if (base_addr == flashLayout[0].sector_start)
 8006b02:	4a0c      	ldr	r2, [pc, #48]	; (8006b34 <FlashWrite+0x88>)
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d107      	bne.n	8006b1a <FlashWrite+0x6e>
  {
    /* let the boot block manager handle it */
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	68f9      	ldr	r1, [r7, #12]
 8006b10:	4809      	ldr	r0, [pc, #36]	; (8006b38 <FlashWrite+0x8c>)
 8006b12:	f000 f967 	bl	8006de4 <FlashAddToBlock>
 8006b16:	4603      	mov	r3, r0
 8006b18:	e006      	b.n	8006b28 <FlashWrite+0x7c>
  }
  /* let the block manager handle it */
  return FlashAddToBlock(&blockInfo, addr, data, len);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	68f9      	ldr	r1, [r7, #12]
 8006b20:	4806      	ldr	r0, [pc, #24]	; (8006b3c <FlashWrite+0x90>)
 8006b22:	f000 f95f 	bl	8006de4 <FlashAddToBlock>
 8006b26:	4603      	mov	r3, r0
} /*** end of FlashWrite ***/
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	08060000 	.word	0x08060000
 8006b34:	08008000 	.word	0x08008000
 8006b38:	200008e0 	.word	0x200008e0
 8006b3c:	200006dc 	.word	0x200006dc

08006b40 <FlashErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashErase(blt_addr addr, blt_int32u len)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  blt_int8u first_sector;
  blt_int8u last_sector;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	1e5a      	subs	r2, r3, #1
 8006b4e:	4916      	ldr	r1, [pc, #88]	; (8006ba8 <FlashErase+0x68>)
 8006b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b54:	4419      	add	r1, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	1acb      	subs	r3, r1, r3
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d901      	bls.n	8006b64 <FlashErase+0x24>
  {
    return BLT_FALSE;
 8006b60:	2300      	movs	r3, #0
 8006b62:	e01c      	b.n	8006b9e <FlashErase+0x5e>
  }
  
  /* obtain the first and last sector number */
  first_sector = FlashGetSector(addr);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 faa7 	bl	80070b8 <FlashGetSector>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	73fb      	strb	r3, [r7, #15]
  last_sector  = FlashGetSector(addr+len-1);
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	4413      	add	r3, r2
 8006b74:	3b01      	subs	r3, #1
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 fa9e 	bl	80070b8 <FlashGetSector>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	73bb      	strb	r3, [r7, #14]
  /* check them */
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
 8006b82:	2bff      	cmp	r3, #255	; 0xff
 8006b84:	d002      	beq.n	8006b8c <FlashErase+0x4c>
 8006b86:	7bbb      	ldrb	r3, [r7, #14]
 8006b88:	2bff      	cmp	r3, #255	; 0xff
 8006b8a:	d101      	bne.n	8006b90 <FlashErase+0x50>
  {
    return BLT_FALSE;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e006      	b.n	8006b9e <FlashErase+0x5e>
  }
  /* erase the sectors */
  return FlashEraseSectors(first_sector, last_sector);
 8006b90:	7bba      	ldrb	r2, [r7, #14]
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	4611      	mov	r1, r2
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fa30 	bl	8006ffc <FlashEraseSectors>
 8006b9c:	4603      	mov	r3, r0
} /*** end of FlashErase ***/
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	08060000 	.word	0x08060000

08006bac <FlashWriteChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWriteChecksum(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	607b      	str	r3, [r7, #4]

  /* first check that the bootblock contains valid data. if not, this means the
   * bootblock is not part of the reprogramming this time and therefore no
   * new checksum needs to be written
   */
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 8006bb6:	4b1e      	ldr	r3, [pc, #120]	; (8006c30 <FlashWriteChecksum+0x84>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbe:	d101      	bne.n	8006bc4 <FlashWriteChecksum+0x18>
  {
    return BLT_TRUE;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e031      	b.n	8006c28 <FlashWriteChecksum+0x7c>
#endif

  /* compute the checksum. note that the user program's vectors are not yet written
   * to flash but are present in the bootblock data structure at this point.
   */
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 8006bc4:	4b1b      	ldr	r3, [pc, #108]	; (8006c34 <FlashWriteChecksum+0x88>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4413      	add	r3, r2
 8006bcc:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 8006bce:	4b1a      	ldr	r3, [pc, #104]	; (8006c38 <FlashWriteChecksum+0x8c>)
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 8006bd8:	4b18      	ldr	r3, [pc, #96]	; (8006c3c <FlashWriteChecksum+0x90>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4413      	add	r3, r2
 8006be0:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 8006be2:	4b17      	ldr	r3, [pc, #92]	; (8006c40 <FlashWriteChecksum+0x94>)
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4413      	add	r3, r2
 8006bea:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 8006bec:	4b15      	ldr	r3, [pc, #84]	; (8006c44 <FlashWriteChecksum+0x98>)
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 8006bf6:	4b14      	ldr	r3, [pc, #80]	; (8006c48 <FlashWriteChecksum+0x9c>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8006c00:	4b12      	ldr	r3, [pc, #72]	; (8006c4c <FlashWriteChecksum+0xa0>)
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4413      	add	r3, r2
 8006c08:	607b      	str	r3, [r7, #4]
  signature_checksum  = ~signature_checksum; /* one's complement */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	607b      	str	r3, [r7, #4]
  signature_checksum += 1; /* two's complement */
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3301      	adds	r3, #1
 8006c14:	607b      	str	r3, [r7, #4]

  /* write the checksum */
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 8006c16:	4b0e      	ldr	r3, [pc, #56]	; (8006c50 <FlashWriteChecksum+0xa4>)
 8006c18:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006c1c:	1d3a      	adds	r2, r7, #4
 8006c1e:	2104      	movs	r1, #4
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff ff43 	bl	8006aac <FlashWrite>
 8006c26:	4603      	mov	r3, r0
                    sizeof(blt_addr), (blt_int8u *)&signature_checksum);
} /*** end of FlashWriteChecksum ***/
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	200008e0 	.word	0x200008e0
 8006c34:	200008e4 	.word	0x200008e4
 8006c38:	200008e8 	.word	0x200008e8
 8006c3c:	200008ec 	.word	0x200008ec
 8006c40:	200008f0 	.word	0x200008f0
 8006c44:	200008f4 	.word	0x200008f4
 8006c48:	200008f8 	.word	0x200008f8
 8006c4c:	200008fc 	.word	0x200008fc
 8006c50:	08008000 	.word	0x08008000

08006c54 <FlashVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashVerifyChecksum(void)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	607b      	str	r3, [r7, #4]

  /* verify the checksum based on how it was written by CpuWriteChecksum() */
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 8006c5e:	4b1e      	ldr	r3, [pc, #120]	; (8006cd8 <FlashVerifyChecksum+0x84>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	4413      	add	r3, r2
 8006c66:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 8006c68:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <FlashVerifyChecksum+0x84>)
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	4413      	add	r3, r2
 8006c72:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 8006c74:	4b18      	ldr	r3, [pc, #96]	; (8006cd8 <FlashVerifyChecksum+0x84>)
 8006c76:	3308      	adds	r3, #8
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 8006c80:	4b15      	ldr	r3, [pc, #84]	; (8006cd8 <FlashVerifyChecksum+0x84>)
 8006c82:	330c      	adds	r3, #12
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	4413      	add	r3, r2
 8006c8a:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 8006c8c:	4b12      	ldr	r3, [pc, #72]	; (8006cd8 <FlashVerifyChecksum+0x84>)
 8006c8e:	3310      	adds	r3, #16
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	4413      	add	r3, r2
 8006c96:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 8006c98:	4b0f      	ldr	r3, [pc, #60]	; (8006cd8 <FlashVerifyChecksum+0x84>)
 8006c9a:	3314      	adds	r3, #20
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 8006ca4:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <FlashVerifyChecksum+0x84>)
 8006ca6:	3318      	adds	r3, #24
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	4413      	add	r3, r2
 8006cae:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 8006cb0:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <FlashVerifyChecksum+0x84>)
 8006cb2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	4413      	add	r3, r2
 8006cbc:	607b      	str	r3, [r7, #4]
  /* sum should add up to an unsigned 32-bit value of 0 */
  if (signature_checksum == 0)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <FlashVerifyChecksum+0x74>
  {
    /* checksum okay */
    return BLT_TRUE;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e000      	b.n	8006cca <FlashVerifyChecksum+0x76>
  }
  /* checksum incorrect */
  return BLT_FALSE;
 8006cc8:	2300      	movs	r3, #0
} /*** end of FlashVerifyChecksum ***/
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	08008000 	.word	0x08008000

08006cdc <FlashDone>:
**            the currently active block that needs to be flashed.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashDone(void)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	af00      	add	r7, sp, #0
  /* check if there is still data waiting to be programmed in the boot block */
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8006ce0:	4b0e      	ldr	r3, [pc, #56]	; (8006d1c <FlashDone+0x40>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce8:	d007      	beq.n	8006cfa <FlashDone+0x1e>
  {
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 8006cea:	480c      	ldr	r0, [pc, #48]	; (8006d1c <FlashDone+0x40>)
 8006cec:	f000 f8dc 	bl	8006ea8 <FlashWriteBlock>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <FlashDone+0x1e>
    {
      return BLT_FALSE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e00d      	b.n	8006d16 <FlashDone+0x3a>
    }
  }

  /* check if there is still data waiting to be programmed */
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8006cfa:	4b09      	ldr	r3, [pc, #36]	; (8006d20 <FlashDone+0x44>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d02:	d007      	beq.n	8006d14 <FlashDone+0x38>
  {
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 8006d04:	4806      	ldr	r0, [pc, #24]	; (8006d20 <FlashDone+0x44>)
 8006d06:	f000 f8cf 	bl	8006ea8 <FlashWriteBlock>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <FlashDone+0x38>
    {
      return BLT_FALSE;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e000      	b.n	8006d16 <FlashDone+0x3a>
    }
  }
  /* still here so all is okay */
  return BLT_TRUE;
 8006d14:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 8006d16:	4618      	mov	r0, r3
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	200008e0 	.word	0x200008e0
 8006d20:	200006dc 	.word	0x200006dc

08006d24 <FlashGetUserProgBaseAddress>:
**            This is basically the first address in the flashLayout table.
** \return    Base address.
**
****************************************************************************************/
blt_addr FlashGetUserProgBaseAddress(void)
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
  return flashLayout[0].sector_start;
 8006d28:	4b02      	ldr	r3, [pc, #8]	; (8006d34 <FlashGetUserProgBaseAddress+0x10>)
} /*** end of FlashGetUserProgBaseAddress ***/
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	08008000 	.word	0x08008000

08006d38 <FlashInitBlock>:
** \param     address Base address of the block data.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashInitBlock(tFlashBlockInfo *block, blt_addr address)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  /* check address alignment */
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <FlashInitBlock+0x18>
  {
    return BLT_FALSE;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e012      	b.n	8006d76 <FlashInitBlock+0x3e>
  }
  /* make sure that we are initializing a new block and not the same one */
  if (block->base_addr == address)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d101      	bne.n	8006d5e <FlashInitBlock+0x26>
  {
    /* block already initialized, so nothing to do */
    return BLT_TRUE;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e00b      	b.n	8006d76 <FlashInitBlock+0x3e>
  }
  /* set the base address and copies the current data from flash */
  block->base_addr = address;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	601a      	str	r2, [r3, #0]
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3304      	adds	r3, #4
 8006d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7ff fe68 	bl	8006a44 <CpuMemCopy>
  return BLT_TRUE;
 8006d74:	2301      	movs	r3, #1
} /*** end of FlashInitBlock ***/
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <FlashSwitchBlock>:
** \return    The pointer of the block info struct that is no being used, or a NULL
**            pointer in case of error.
**
****************************************************************************************/
static tFlashBlockInfo *FlashSwitchBlock(tFlashBlockInfo *block, blt_addr base_addr)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  /* check if a switch needs to be made away from the boot block. in this case the boot
   * block shouldn't be written yet, because this is done at the end of the programming
   * session by FlashDone(), this is right after the checksum was written.
   */
  if (block == &bootBlockInfo)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a12      	ldr	r2, [pc, #72]	; (8006dd8 <FlashSwitchBlock+0x58>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d102      	bne.n	8006d98 <FlashSwitchBlock+0x18>
  {
    /* switch from the boot block to the generic block info structure */
    block = &blockInfo;
 8006d92:	4b12      	ldr	r3, [pc, #72]	; (8006ddc <FlashSwitchBlock+0x5c>)
 8006d94:	607b      	str	r3, [r7, #4]
 8006d96:	e010      	b.n	8006dba <FlashSwitchBlock+0x3a>
  }
  /* check if a switch back into the bootblock is needed. in this case the generic block
   * doesn't need to be written here yet.
   */
  else if (base_addr == flashLayout[0].sector_start)
 8006d98:	4a11      	ldr	r2, [pc, #68]	; (8006de0 <FlashSwitchBlock+0x60>)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d104      	bne.n	8006daa <FlashSwitchBlock+0x2a>
  {
    /* switch from the generic block to the boot block info structure */
    block = &bootBlockInfo;
 8006da0:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <FlashSwitchBlock+0x58>)
 8006da2:	607b      	str	r3, [r7, #4]
    base_addr = flashLayout[0].sector_start;
 8006da4:	4b0e      	ldr	r3, [pc, #56]	; (8006de0 <FlashSwitchBlock+0x60>)
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	e007      	b.n	8006dba <FlashSwitchBlock+0x3a>
  }
  else
  {
    /* need to switch to a new block, so program the current one and init the next */
    if (FlashWriteBlock(block) == BLT_FALSE)
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f87c 	bl	8006ea8 <FlashWriteBlock>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <FlashSwitchBlock+0x3a>
    {
      return BLT_NULL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	e009      	b.n	8006dce <FlashSwitchBlock+0x4e>
    }
  }

  /* initialize tne new block when necessary */
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7ff ffbb 	bl	8006d38 <FlashInitBlock>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <FlashSwitchBlock+0x4c>
  {
    return BLT_NULL;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	e000      	b.n	8006dce <FlashSwitchBlock+0x4e>
  }

  /* still here to all is okay  */
  return block;
 8006dcc:	687b      	ldr	r3, [r7, #4]
} /*** end of FlashSwitchBlock ***/
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	200008e0 	.word	0x200008e0
 8006ddc:	200006dc 	.word	0x200006dc
 8006de0:	08008000 	.word	0x08008000

08006de4 <FlashAddToBlock>:
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashAddToBlock(tFlashBlockInfo *block, blt_addr address,
                                blt_int8u *data, blt_int32u len)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
  blt_addr   current_base_addr;
  blt_int8u  *dst;
  blt_int8u  *src;

  /* determine the current base address */
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006df8:	f023 0301 	bic.w	r3, r3, #1
 8006dfc:	617b      	str	r3, [r7, #20]

  /* make sure the blockInfo is not uninitialized */
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e06:	d108      	bne.n	8006e1a <FlashAddToBlock+0x36>
  {
    /* initialize the blockInfo struct for the current block */
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 8006e08:	6979      	ldr	r1, [r7, #20]
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f7ff ff94 	bl	8006d38 <FlashInitBlock>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <FlashAddToBlock+0x36>
    {
      return BLT_FALSE;
 8006e16:	2300      	movs	r3, #0
 8006e18:	e042      	b.n	8006ea0 <FlashAddToBlock+0xbc>
    }
  }

  /* check if the new data fits in the current block */
  if (block->base_addr != current_base_addr)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d009      	beq.n	8006e38 <FlashAddToBlock+0x54>
  {
    /* need to switch to a new block, so program the current one and init the next */
    block = FlashSwitchBlock(block, current_base_addr);
 8006e24:	6979      	ldr	r1, [r7, #20]
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f7ff ffaa 	bl	8006d80 <FlashSwitchBlock>
 8006e2c:	60f8      	str	r0, [r7, #12]
    if (block == BLT_NULL)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <FlashAddToBlock+0x54>
    {
      return BLT_FALSE;
 8006e34:	2300      	movs	r3, #0
 8006e36:	e033      	b.n	8006ea0 <FlashAddToBlock+0xbc>
    }
  }

  /* add the data to the current block, but check for block overflow */
  dst = &(block->data[address - block->base_addr]);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	3304      	adds	r3, #4
 8006e46:	61fb      	str	r3, [r7, #28]
  src = data;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	61bb      	str	r3, [r7, #24]
  do
  {
    /* keep the watchdog happy */
    CopService();
 8006e4c:	f000 ffea 	bl	8007e24 <CopService>
    /* buffer overflow? */
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3304      	adds	r3, #4
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e5c:	d30f      	bcc.n	8006e7e <FlashAddToBlock+0x9a>
    {
      /* need to switch to a new block, so program the current one and init the next */
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006e64:	4619      	mov	r1, r3
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f7ff ff8a 	bl	8006d80 <FlashSwitchBlock>
 8006e6c:	60f8      	str	r0, [r7, #12]
      if (block == BLT_NULL)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d101      	bne.n	8006e78 <FlashAddToBlock+0x94>
      {
        return BLT_FALSE;
 8006e74:	2300      	movs	r3, #0
 8006e76:	e013      	b.n	8006ea0 <FlashAddToBlock+0xbc>
      }
      /* reset destination pointer */
      dst = &(block->data[0]);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	61fb      	str	r3, [r7, #28]
    }
    /* write the data to the buffer */
    *dst = *src;
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	781a      	ldrb	r2, [r3, #0]
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	701a      	strb	r2, [r3, #0]
    /* update pointers */
    dst++;
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	61fb      	str	r3, [r7, #28]
    src++;
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	61bb      	str	r3, [r7, #24]
    /* decrement byte counter */
    len--;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	603b      	str	r3, [r7, #0]
  }
  while (len > 0);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1d6      	bne.n	8006e4c <FlashAddToBlock+0x68>
  /* still here so all is good */
  return BLT_TRUE;
 8006e9e:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3720      	adds	r7, #32
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <FlashWriteBlock>:
** \param     block   Pointer to flash block info structure to operate on.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashWriteBlock(tFlashBlockInfo *block)
{
 8006ea8:	b5b0      	push	{r4, r5, r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  blt_addr   prog_addr;
  blt_int32u prog_data;
  blt_int32u word_cnt;
  blt_bool   result = BLT_TRUE;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	74fb      	strb	r3, [r7, #19]
    }
  }
#endif

  /* unlock the flash peripheral to enable the flash control register access. */
  HAL_FLASH_Unlock();
 8006eb4:	f7fa f986 	bl	80011c4 <HAL_FLASH_Unlock>

  /* program all words in the block one by one */
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8006eb8:	2300      	movs	r3, #0
 8006eba:	617b      	str	r3, [r7, #20]
 8006ebc:	e029      	b.n	8006f12 <FlashWriteBlock+0x6a>
  {
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	60bb      	str	r3, [r7, #8]
    /* keep the watchdog happy */
    CopService();
 8006ed8:	f000 ffa4 	bl	8007e24 <CopService>
    /* program the word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	461c      	mov	r4, r3
 8006ee2:	4615      	mov	r5, r2
 8006ee4:	4622      	mov	r2, r4
 8006ee6:	462b      	mov	r3, r5
 8006ee8:	68f9      	ldr	r1, [r7, #12]
 8006eea:	2002      	movs	r0, #2
 8006eec:	f7fa f916 	bl	800111c <HAL_FLASH_Program>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <FlashWriteBlock+0x54>
    {
      result = BLT_FALSE;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	74fb      	strb	r3, [r7, #19]
      break;
 8006efa:	e00d      	b.n	8006f18 <FlashWriteBlock+0x70>
    }
    /* verify that the written data is actually there */
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d002      	beq.n	8006f0c <FlashWriteBlock+0x64>
    {
      result = BLT_FALSE;
 8006f06:	2300      	movs	r3, #0
 8006f08:	74fb      	strb	r3, [r7, #19]
      break;
 8006f0a:	e005      	b.n	8006f18 <FlashWriteBlock+0x70>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	617b      	str	r3, [r7, #20]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b7f      	cmp	r3, #127	; 0x7f
 8006f16:	d9d2      	bls.n	8006ebe <FlashWriteBlock+0x16>
    }
  }

  /* lock the flash peripheral to disable the flash control register access. */
  HAL_FLASH_Lock();
 8006f18:	f7fa f976 	bl	8001208 <HAL_FLASH_Lock>

  /* Give the result back to the caller. */
  return result;
 8006f1c:	7cfb      	ldrb	r3, [r7, #19]
} /*** end of FlashWriteBlock ***/
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006f28 <FlashEmptyCheckSector>:
**            flashLayout array, not an index into the array.
** \return    BLT_TRUE if the flash sector is already erased, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashEmptyCheckSector(blt_int8u sector_num)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	71fb      	strb	r3, [r7, #7]
  blt_bool   result = BLT_FALSE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	77fb      	strb	r3, [r7, #31]
  blt_int8u  sectorIdx;
  blt_int32u wordCnt;
  blt_int32u volatile const * wordPtr;
  
  /* find the index of this sector into the flashLayout array */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8006f36:	2300      	movs	r3, #0
 8006f38:	77bb      	strb	r3, [r7, #30]
 8006f3a:	e052      	b.n	8006fe2 <FlashEmptyCheckSector+0xba>
  {
    /* is this the index that the sector number belongs to? */
    if (flashLayout[sectorIdx].sector_num == sector_num)
 8006f3c:	7fba      	ldrb	r2, [r7, #30]
 8006f3e:	492d      	ldr	r1, [pc, #180]	; (8006ff4 <FlashEmptyCheckSector+0xcc>)
 8006f40:	4613      	mov	r3, r2
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	79fa      	ldrb	r2, [r7, #7]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d143      	bne.n	8006fdc <FlashEmptyCheckSector+0xb4>
    {
      /* retrieve sector info */
      sectorAddr = flashLayout[sectorIdx].sector_start;
 8006f54:	7fba      	ldrb	r2, [r7, #30]
 8006f56:	4927      	ldr	r1, [pc, #156]	; (8006ff4 <FlashEmptyCheckSector+0xcc>)
 8006f58:	4613      	mov	r3, r2
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	613b      	str	r3, [r7, #16]
      sectorSize = flashLayout[sectorIdx].sector_size;
 8006f66:	7fba      	ldrb	r2, [r7, #30]
 8006f68:	4922      	ldr	r1, [pc, #136]	; (8006ff4 <FlashEmptyCheckSector+0xcc>)
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	440b      	add	r3, r1
 8006f74:	3304      	adds	r3, #4
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	60fb      	str	r3, [r7, #12]
      
      /* sanity check. sector base address should be 32-bit aligned and the size
       * should be a multiple of 32-bits.
       */
      ASSERT_RT(((sectorAddr % sizeof(blt_int32u)) == 0) && 
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f003 0303 	and.w	r3, r3, #3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d104      	bne.n	8006f8e <FlashEmptyCheckSector+0x66>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d004      	beq.n	8006f98 <FlashEmptyCheckSector+0x70>
 8006f8e:	f240 21c5 	movw	r1, #709	; 0x2c5
 8006f92:	4819      	ldr	r0, [pc, #100]	; (8006ff8 <FlashEmptyCheckSector+0xd0>)
 8006f94:	f000 fdee 	bl	8007b74 <AssertFailure>
                ((sectorSize % sizeof(blt_int32u)) == 0));  
      
      /* update result to success for now */
      result = BLT_TRUE;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	77fb      	strb	r3, [r7, #31]
      /* initialize the pointer to the first word in the sector */
      wordPtr = (blt_int32u volatile const *)sectorAddr;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	617b      	str	r3, [r7, #20]
      /* read sector 32-bits at a time */
      for (wordCnt = 0; wordCnt < (sectorSize/sizeof(blt_int32u)); wordCnt++)
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61bb      	str	r3, [r7, #24]
 8006fa4:	e014      	b.n	8006fd0 <FlashEmptyCheckSector+0xa8>
      {
        /* service the watchdog every 256th loop iteration */
        if ((wordCnt % 256) == 0)
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <FlashEmptyCheckSector+0x8a>
        {
          CopService();
 8006fae:	f000 ff39 	bl	8007e24 <CopService>
        }
        /* word not in the erased state? */
        if (*wordPtr != 0xFFFFFFFFu)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fba:	d003      	beq.n	8006fc4 <FlashEmptyCheckSector+0x9c>
        {
          /* sector not empty, update the result accordingly */
          result = BLT_FALSE;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	77fb      	strb	r3, [r7, #31]
          /* no point in continuing the sector empty check */
          break;
 8006fc0:	bf00      	nop
        }
        /* set pointer to the next word in the sector */
        wordPtr++;
      }
      /* sector index found and checked. no need to continue with another one.*/
      break;
 8006fc2:	e011      	b.n	8006fe8 <FlashEmptyCheckSector+0xc0>
        wordPtr++;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	617b      	str	r3, [r7, #20]
      for (wordCnt = 0; wordCnt < (sectorSize/sizeof(blt_int32u)); wordCnt++)
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	61bb      	str	r3, [r7, #24]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	089b      	lsrs	r3, r3, #2
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d3e5      	bcc.n	8006fa6 <FlashEmptyCheckSector+0x7e>
      break;
 8006fda:	e005      	b.n	8006fe8 <FlashEmptyCheckSector+0xc0>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8006fdc:	7fbb      	ldrb	r3, [r7, #30]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	77bb      	strb	r3, [r7, #30]
 8006fe2:	7fbb      	ldrb	r3, [r7, #30]
 8006fe4:	2b05      	cmp	r3, #5
 8006fe6:	d9a9      	bls.n	8006f3c <FlashEmptyCheckSector+0x14>
    }
  }  
  /* give the result back to the caller. */
  return result;
 8006fe8:	7ffb      	ldrb	r3, [r7, #31]
} /*** end of FlashEmptyCheckSector ***/
 8006fea:	4618      	mov	r0, r3
 8006fec:	3720      	adds	r7, #32
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	08009370 	.word	0x08009370
 8006ff8:	08009288 	.word	0x08009288

08006ffc <FlashEraseSectors>:
** \param     last_sector  Last flash sector number.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashEraseSectors(blt_int8u first_sector, blt_int8u last_sector)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08a      	sub	sp, #40	; 0x28
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	460a      	mov	r2, r1
 8007006:	71fb      	strb	r3, [r7, #7]
 8007008:	4613      	mov	r3, r2
 800700a:	71bb      	strb	r3, [r7, #6]
  blt_bool result = BLT_TRUE;
 800700c:	2301      	movs	r3, #1
 800700e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  blt_int8u sectorIdx;
  FLASH_EraseInitTypeDef eraseInitStruct;
  blt_int32u eraseSectorError = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]

  /* validate the sector numbers */
  if (first_sector > last_sector)
 8007016:	79fa      	ldrb	r2, [r7, #7]
 8007018:	79bb      	ldrb	r3, [r7, #6]
 800701a:	429a      	cmp	r2, r3
 800701c:	d902      	bls.n	8007024 <FlashEraseSectors+0x28>
  {
    result = BLT_FALSE;
 800701e:	2300      	movs	r3, #0
 8007020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if ((first_sector < flashLayout[0].sector_num) || \
 8007024:	2202      	movs	r2, #2
 8007026:	79fb      	ldrb	r3, [r7, #7]
 8007028:	4293      	cmp	r3, r2
 800702a:	d303      	bcc.n	8007034 <FlashEraseSectors+0x38>
      (last_sector > flashLayout[FLASH_TOTAL_SECTORS-1].sector_num))
 800702c:	2207      	movs	r2, #7
  if ((first_sector < flashLayout[0].sector_num) || \
 800702e:	79bb      	ldrb	r3, [r7, #6]
 8007030:	4293      	cmp	r3, r2
 8007032:	d902      	bls.n	800703a <FlashEraseSectors+0x3e>
  {
    result = BLT_FALSE;
 8007034:	2300      	movs	r3, #0
 8007036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* only move forward with the erase operation if all is okay so far */
  if (result == BLT_TRUE)
 800703a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800703e:	2b01      	cmp	r3, #1
 8007040:	d133      	bne.n	80070aa <FlashEraseSectors+0xae>
  {
    /* intialize the sector erase info structure */
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8007042:	2300      	movs	r3, #0
 8007044:	613b      	str	r3, [r7, #16]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8007046:	2302      	movs	r3, #2
 8007048:	623b      	str	r3, [r7, #32]
    eraseInitStruct.NbSectors = 1;
 800704a:	2301      	movs	r3, #1
 800704c:	61fb      	str	r3, [r7, #28]

    /* unlock the flash array */
    HAL_FLASH_Unlock();
 800704e:	f7fa f8b9 	bl	80011c4 <HAL_FLASH_Unlock>

    /* erase all sectors one by one */
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8007052:	79fb      	ldrb	r3, [r7, #7]
 8007054:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007058:	e020      	b.n	800709c <FlashEraseSectors+0xa0>
    {
      /* no need to erase the sector if it is already empty */
      if (FlashEmptyCheckSector(sectorIdx) == BLT_FALSE)
 800705a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800705e:	4618      	mov	r0, r3
 8007060:	f7ff ff62 	bl	8006f28 <FlashEmptyCheckSector>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d113      	bne.n	8007092 <FlashEraseSectors+0x96>
      {
        /* keep the watchdog happy */
        CopService();
 800706a:	f000 fedb 	bl	8007e24 <CopService>
        /* set the sector to erase */
        eraseInitStruct.Sector = sectorIdx;
 800706e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007072:	61bb      	str	r3, [r7, #24]
        /* submit the sector erase request */
        if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 8007074:	f107 020c 	add.w	r2, r7, #12
 8007078:	f107 0310 	add.w	r3, r7, #16
 800707c:	4611      	mov	r1, r2
 800707e:	4618      	mov	r0, r3
 8007080:	f7fa fa02 	bl	8001488 <HAL_FLASHEx_Erase>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <FlashEraseSectors+0x96>
        {
          /* could not perform erase operation */
          result = BLT_FALSE;
 800708a:	2300      	movs	r3, #0
 800708c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          /* error detected so don't bother continuing with the loop */
          break;
 8007090:	e009      	b.n	80070a6 <FlashEraseSectors+0xaa>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8007092:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007096:	3301      	adds	r3, #1
 8007098:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800709c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80070a0:	79bb      	ldrb	r3, [r7, #6]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d9d9      	bls.n	800705a <FlashEraseSectors+0x5e>
        }
      }
    }

    /* lock the flash array again */
    HAL_FLASH_Lock();
 80070a6:	f7fa f8af 	bl	8001208 <HAL_FLASH_Lock>
  }

  /* give the result back to the caller */
  return result;
 80070aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
} /*** end of FlashEraseSectors ***/
 80070ae:	4618      	mov	r0, r3
 80070b0:	3728      	adds	r7, #40	; 0x28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  blt_int8u result = FLASH_INVALID_SECTOR;
 80070c0:	23ff      	movs	r3, #255	; 0xff
 80070c2:	73fb      	strb	r3, [r7, #15]
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 80070c4:	2300      	movs	r3, #0
 80070c6:	73bb      	strb	r3, [r7, #14]
 80070c8:	e02f      	b.n	800712a <FlashGetSector+0x72>
  {
    /* keep the watchdog happy */
    CopService();
 80070ca:	f000 feab 	bl	8007e24 <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 80070ce:	7bba      	ldrb	r2, [r7, #14]
 80070d0:	491a      	ldr	r1, [pc, #104]	; (800713c <FlashGetSector+0x84>)
 80070d2:	4613      	mov	r3, r2
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	4413      	add	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	440b      	add	r3, r1
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d31f      	bcc.n	8007124 <FlashGetSector+0x6c>
        (address < (flashLayout[sectorIdx].sector_start + \
 80070e4:	7bba      	ldrb	r2, [r7, #14]
 80070e6:	4915      	ldr	r1, [pc, #84]	; (800713c <FlashGetSector+0x84>)
 80070e8:	4613      	mov	r3, r2
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	6819      	ldr	r1, [r3, #0]
                    flashLayout[sectorIdx].sector_size)))
 80070f4:	7bba      	ldrb	r2, [r7, #14]
 80070f6:	4811      	ldr	r0, [pc, #68]	; (800713c <FlashGetSector+0x84>)
 80070f8:	4613      	mov	r3, r2
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4403      	add	r3, r0
 8007102:	3304      	adds	r3, #4
 8007104:	681b      	ldr	r3, [r3, #0]
        (address < (flashLayout[sectorIdx].sector_start + \
 8007106:	440b      	add	r3, r1
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	429a      	cmp	r2, r3
 800710c:	d20a      	bcs.n	8007124 <FlashGetSector+0x6c>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 800710e:	7bba      	ldrb	r2, [r7, #14]
 8007110:	490a      	ldr	r1, [pc, #40]	; (800713c <FlashGetSector+0x84>)
 8007112:	4613      	mov	r3, r2
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	4413      	add	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	440b      	add	r3, r1
 800711c:	3308      	adds	r3, #8
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	73fb      	strb	r3, [r7, #15]
      /* all done so no need to continue looping */
      break;
 8007122:	e005      	b.n	8007130 <FlashGetSector+0x78>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8007124:	7bbb      	ldrb	r3, [r7, #14]
 8007126:	3301      	adds	r3, #1
 8007128:	73bb      	strb	r3, [r7, #14]
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	2b05      	cmp	r3, #5
 800712e:	d9cc      	bls.n	80070ca <FlashGetSector+0x12>
    }
  }
  /* give the result back to the caller */
  return result;
 8007130:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of FlashGetSector ***/
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	08009370 	.word	0x08009370

08007140 <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 8007144:	f7ff fc9e 	bl	8006a84 <FlashInit>
} /*** end of NvmInit ***/
 8007148:	bf00      	nop
 800714a:	bd80      	pop	{r7, pc}

0800714c <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	68b9      	ldr	r1, [r7, #8]
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f7ff fca5 	bl	8006aac <FlashWrite>
 8007162:	4603      	mov	r3, r0
} /*** end of NvmWrite ***/
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff fce1 	bl	8006b40 <FlashErase>
 800717e:	4603      	mov	r3, r0
} /*** end of NvmErase ***/
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 800718c:	f7ff fd62 	bl	8006c54 <FlashVerifyChecksum>
 8007190:	4603      	mov	r3, r0
#endif
} /*** end of NvmVerifyChecksum ***/
 8007192:	4618      	mov	r0, r3
 8007194:	bd80      	pop	{r7, pc}

08007196 <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	af00      	add	r7, sp, #0
  return FlashGetUserProgBaseAddress();
 800719a:	f7ff fdc3 	bl	8006d24 <FlashGetUserProgBaseAddress>
 800719e:	4603      	mov	r3, r0
} /*** end of NvmGetUserProgBaseAddress ***/
 80071a0:	4618      	mov	r0, r3
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 80071a8:	f7ff fd00 	bl	8006bac <FlashWriteChecksum>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <NvmDone+0x12>
  {
    return BLT_FALSE;
 80071b2:	2300      	movs	r3, #0
 80071b4:	e002      	b.n	80071bc <NvmDone+0x18>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
 80071b6:	f7ff fd91 	bl	8006cdc <FlashDone>
 80071ba:	4603      	mov	r3, r0
} /*** end of NvmDone ***/
 80071bc:	4618      	mov	r0, r3
 80071be:	bd80      	pop	{r7, pc}

080071c0 <LL_USART_Enable>:
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	60da      	str	r2, [r3, #12]
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <LL_USART_Disable>:
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	60da      	str	r2, [r3, #12]
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b20      	cmp	r3, #32
 8007212:	bf0c      	ite	eq
 8007214:	2301      	moveq	r3, #1
 8007216:	2300      	movne	r3, #0
 8007218:	b2db      	uxtb	r3, r3
}
 800721a:	4618      	mov	r0, r3
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007236:	2b80      	cmp	r3, #128	; 0x80
 8007238:	bf0c      	ite	eq
 800723a:	2301      	moveq	r3, #1
 800723c:	2300      	movne	r3, #0
 800723e:	b2db      	uxtb	r3, r3
}
 8007240:	4618      	mov	r0, r3
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	b2db      	uxtb	r3, r3
}
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	460b      	mov	r3, r1
 8007270:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007272:	78fa      	ldrb	r2, [r7, #3]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	605a      	str	r2, [r3, #4]
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <Rs232Init>:
** \brief     Initializes the RS232 communication interface.
** \return    none.
**
****************************************************************************************/
void Rs232Init(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b088      	sub	sp, #32
 8007288:	af00      	add	r7, sp, #0
            (BOOT_COM_RS232_CHANNEL_INDEX == 5) ||
            (BOOT_COM_RS232_CHANNEL_INDEX == 6) ||
            (BOOT_COM_RS232_CHANNEL_INDEX == 7));

  /* disable the UART peripheral */
  LL_USART_Disable(USART_CHANNEL);
 800728a:	480f      	ldr	r0, [pc, #60]	; (80072c8 <Rs232Init+0x44>)
 800728c:	f7ff ffa8 	bl	80071e0 <LL_USART_Disable>
  /* configure UART peripheral */
  USART_InitStruct.BaudRate = BOOT_COM_RS232_BAUDRATE;
 8007290:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8007294:	607b      	str	r3, [r7, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007296:	2300      	movs	r3, #0
 8007298:	60bb      	str	r3, [r7, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800729e:	2300      	movs	r3, #0
 80072a0:	613b      	str	r3, [r7, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80072a2:	230c      	movs	r3, #12
 80072a4:	617b      	str	r3, [r7, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80072a6:	2300      	movs	r3, #0
 80072a8:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80072aa:	2300      	movs	r3, #0
 80072ac:	61fb      	str	r3, [r7, #28]
  /* initialize the UART peripheral */
  LL_USART_Init(USART_CHANNEL, &USART_InitStruct);
 80072ae:	1d3b      	adds	r3, r7, #4
 80072b0:	4619      	mov	r1, r3
 80072b2:	4805      	ldr	r0, [pc, #20]	; (80072c8 <Rs232Init+0x44>)
 80072b4:	f7fc fcfc 	bl	8003cb0 <LL_USART_Init>
  LL_USART_Enable(USART_CHANNEL);
 80072b8:	4803      	ldr	r0, [pc, #12]	; (80072c8 <Rs232Init+0x44>)
 80072ba:	f7ff ff81 	bl	80071c0 <LL_USART_Enable>
} /*** end of Rs232Init ***/
 80072be:	bf00      	nop
 80072c0:	3720      	adds	r7, #32
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	40004400 	.word	0x40004400

080072cc <Rs232TransmitPacket>:
** \param     len  Number of bytes that are to be transmitted.
** \return    none.
**
****************************************************************************************/
void Rs232TransmitPacket(blt_int8u *data, blt_int8u len)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	460b      	mov	r3, r1
 80072d6:	70fb      	strb	r3, [r7, #3]
  blt_int16u data_index;

  /* verify validity of the len-paramenter */
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 80072d8:	78fb      	ldrb	r3, [r7, #3]
 80072da:	2b81      	cmp	r3, #129	; 0x81
 80072dc:	d903      	bls.n	80072e6 <Rs232TransmitPacket+0x1a>
 80072de:	2183      	movs	r1, #131	; 0x83
 80072e0:	480f      	ldr	r0, [pc, #60]	; (8007320 <Rs232TransmitPacket+0x54>)
 80072e2:	f000 fc47 	bl	8007b74 <AssertFailure>

  /* first transmit the length of the packet */
  Rs232TransmitByte(len);
 80072e6:	78fb      	ldrb	r3, [r7, #3]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 f89b 	bl	8007424 <Rs232TransmitByte>

  /* transmit all the packet bytes one-by-one */
  for (data_index = 0; data_index < len; data_index++)
 80072ee:	2300      	movs	r3, #0
 80072f0:	81fb      	strh	r3, [r7, #14]
 80072f2:	e00b      	b.n	800730c <Rs232TransmitPacket+0x40>
  {
    /* keep the watchdog happy */
    CopService();
 80072f4:	f000 fd96 	bl	8007e24 <CopService>
    /* write byte */
    Rs232TransmitByte(data[data_index]);
 80072f8:	89fb      	ldrh	r3, [r7, #14]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	4413      	add	r3, r2
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	4618      	mov	r0, r3
 8007302:	f000 f88f 	bl	8007424 <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 8007306:	89fb      	ldrh	r3, [r7, #14]
 8007308:	3301      	adds	r3, #1
 800730a:	81fb      	strh	r3, [r7, #14]
 800730c:	78fb      	ldrb	r3, [r7, #3]
 800730e:	b29b      	uxth	r3, r3
 8007310:	89fa      	ldrh	r2, [r7, #14]
 8007312:	429a      	cmp	r2, r3
 8007314:	d3ee      	bcc.n	80072f4 <Rs232TransmitPacket+0x28>
  }
} /*** end of Rs232TransmitPacket ***/
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	080092ac 	.word	0x080092ac

08007324 <Rs232ReceivePacket>:
** \param     len Pointer where the length of the packet is to be stored.
** \return    BLT_TRUE if a packet was received, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool Rs232ReceivePacket(blt_int8u *data, blt_int8u *len)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  static blt_int8u xcpCtoRxLength;
  static blt_bool  xcpCtoRxInProgress = BLT_FALSE;
  static blt_int32u xcpCtoRxStartTime = 0;

  /* start of cto packet received? */
  if (xcpCtoRxInProgress == BLT_FALSE)
 800732e:	4b2b      	ldr	r3, [pc, #172]	; (80073dc <Rs232ReceivePacket+0xb8>)
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d119      	bne.n	800736a <Rs232ReceivePacket+0x46>
  {
    /* store the message length when received */
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 8007336:	482a      	ldr	r0, [pc, #168]	; (80073e0 <Rs232ReceivePacket+0xbc>)
 8007338:	f000 f85a 	bl	80073f0 <Rs232ReceiveByte>
 800733c:	4603      	mov	r3, r0
 800733e:	2b01      	cmp	r3, #1
 8007340:	d146      	bne.n	80073d0 <Rs232ReceivePacket+0xac>
    {
      if ( (xcpCtoReqPacket[0] > 0) &&
 8007342:	4b27      	ldr	r3, [pc, #156]	; (80073e0 <Rs232ReceivePacket+0xbc>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d042      	beq.n	80073d0 <Rs232ReceivePacket+0xac>
           (xcpCtoReqPacket[0] <= BOOT_COM_RS232_RX_MAX_DATA) )
 800734a:	4b25      	ldr	r3, [pc, #148]	; (80073e0 <Rs232ReceivePacket+0xbc>)
 800734c:	781b      	ldrb	r3, [r3, #0]
      if ( (xcpCtoReqPacket[0] > 0) &&
 800734e:	2b81      	cmp	r3, #129	; 0x81
 8007350:	d83e      	bhi.n	80073d0 <Rs232ReceivePacket+0xac>
      {
        /* store the start time */
        xcpCtoRxStartTime = TimerGet();
 8007352:	f000 f8cd 	bl	80074f0 <TimerGet>
 8007356:	4603      	mov	r3, r0
 8007358:	4a22      	ldr	r2, [pc, #136]	; (80073e4 <Rs232ReceivePacket+0xc0>)
 800735a:	6013      	str	r3, [r2, #0]
        /* reset packet data count */
        xcpCtoRxLength = 0;
 800735c:	4b22      	ldr	r3, [pc, #136]	; (80073e8 <Rs232ReceivePacket+0xc4>)
 800735e:	2200      	movs	r2, #0
 8007360:	701a      	strb	r2, [r3, #0]
        /* indicate that a cto packet is being received */
        xcpCtoRxInProgress = BLT_TRUE;
 8007362:	4b1e      	ldr	r3, [pc, #120]	; (80073dc <Rs232ReceivePacket+0xb8>)
 8007364:	2201      	movs	r2, #1
 8007366:	701a      	strb	r2, [r3, #0]
 8007368:	e032      	b.n	80073d0 <Rs232ReceivePacket+0xac>
    }
  }
  else
  {
    /* store the next packet byte */
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 800736a:	4b1f      	ldr	r3, [pc, #124]	; (80073e8 <Rs232ReceivePacket+0xc4>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	3301      	adds	r3, #1
 8007370:	4a1b      	ldr	r2, [pc, #108]	; (80073e0 <Rs232ReceivePacket+0xbc>)
 8007372:	4413      	add	r3, r2
 8007374:	4618      	mov	r0, r3
 8007376:	f000 f83b 	bl	80073f0 <Rs232ReceiveByte>
 800737a:	4603      	mov	r3, r0
 800737c:	2b01      	cmp	r3, #1
 800737e:	d11c      	bne.n	80073ba <Rs232ReceivePacket+0x96>
    {
      /* increment the packet data count */
      xcpCtoRxLength++;
 8007380:	4b19      	ldr	r3, [pc, #100]	; (80073e8 <Rs232ReceivePacket+0xc4>)
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	3301      	adds	r3, #1
 8007386:	b2da      	uxtb	r2, r3
 8007388:	4b17      	ldr	r3, [pc, #92]	; (80073e8 <Rs232ReceivePacket+0xc4>)
 800738a:	701a      	strb	r2, [r3, #0]

      /* check to see if the entire packet was received */
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 800738c:	4b14      	ldr	r3, [pc, #80]	; (80073e0 <Rs232ReceivePacket+0xbc>)
 800738e:	781a      	ldrb	r2, [r3, #0]
 8007390:	4b15      	ldr	r3, [pc, #84]	; (80073e8 <Rs232ReceivePacket+0xc4>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d11b      	bne.n	80073d0 <Rs232ReceivePacket+0xac>
      {
        /* copy the packet data */
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4914      	ldr	r1, [pc, #80]	; (80073ec <Rs232ReceivePacket+0xc8>)
 800739c:	4a12      	ldr	r2, [pc, #72]	; (80073e8 <Rs232ReceivePacket+0xc4>)
 800739e:	7812      	ldrb	r2, [r2, #0]
 80073a0:	b292      	uxth	r2, r2
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff fb4e 	bl	8006a44 <CpuMemCopy>
        /* done with cto packet reception */
        xcpCtoRxInProgress = BLT_FALSE;
 80073a8:	4b0c      	ldr	r3, [pc, #48]	; (80073dc <Rs232ReceivePacket+0xb8>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	701a      	strb	r2, [r3, #0]
        /* set the packet length */
        *len = xcpCtoRxLength;
 80073ae:	4b0e      	ldr	r3, [pc, #56]	; (80073e8 <Rs232ReceivePacket+0xc4>)
 80073b0:	781a      	ldrb	r2, [r3, #0]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	701a      	strb	r2, [r3, #0]
        /* packet reception complete */
        return BLT_TRUE;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e00b      	b.n	80073d2 <Rs232ReceivePacket+0xae>
      }
    }
    else
    {
      /* check packet reception timeout */
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 80073ba:	f000 f899 	bl	80074f0 <TimerGet>
 80073be:	4602      	mov	r2, r0
 80073c0:	4b08      	ldr	r3, [pc, #32]	; (80073e4 <Rs232ReceivePacket+0xc0>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	33c8      	adds	r3, #200	; 0xc8
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d902      	bls.n	80073d0 <Rs232ReceivePacket+0xac>
      {
        /* cancel cto packet reception due to timeout. note that that automaticaly
         * discards the already received packet bytes, allowing the host to retry.
         */
        xcpCtoRxInProgress = BLT_FALSE;
 80073ca:	4b04      	ldr	r3, [pc, #16]	; (80073dc <Rs232ReceivePacket+0xb8>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  /* packet reception not yet complete */
  return BLT_FALSE;
 80073d0:	2300      	movs	r3, #0
} /*** end of Rs232ReceivePacket ***/
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	20000ae4 	.word	0x20000ae4
 80073e0:	20000ae8 	.word	0x20000ae8
 80073e4:	20000b6c 	.word	0x20000b6c
 80073e8:	20000b70 	.word	0x20000b70
 80073ec:	20000ae9 	.word	0x20000ae9

080073f0 <Rs232ReceiveByte>:
** \param     data Pointer to byte where the data is to be stored.
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool Rs232ReceiveByte(blt_int8u *data)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  if (LL_USART_IsActiveFlag_RXNE(USART_CHANNEL) != 0)
 80073f8:	4809      	ldr	r0, [pc, #36]	; (8007420 <Rs232ReceiveByte+0x30>)
 80073fa:	f7ff ff01 	bl	8007200 <LL_USART_IsActiveFlag_RXNE>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d008      	beq.n	8007416 <Rs232ReceiveByte+0x26>
  {
    /* retrieve and store the newly received byte */
    *data = LL_USART_ReceiveData8(USART_CHANNEL);
 8007404:	4806      	ldr	r0, [pc, #24]	; (8007420 <Rs232ReceiveByte+0x30>)
 8007406:	f7ff ff21 	bl	800724c <LL_USART_ReceiveData8>
 800740a:	4603      	mov	r3, r0
 800740c:	461a      	mov	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	701a      	strb	r2, [r3, #0]
    /* all done */
    return BLT_TRUE;
 8007412:	2301      	movs	r3, #1
 8007414:	e000      	b.n	8007418 <Rs232ReceiveByte+0x28>
  }
  /* still here to no new byte received */
  return BLT_FALSE;
 8007416:	2300      	movs	r3, #0
} /*** end of Rs232ReceiveByte ***/
 8007418:	4618      	mov	r0, r3
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	40004400 	.word	0x40004400

08007424 <Rs232TransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    none.
**
****************************************************************************************/
static void Rs232TransmitByte(blt_int8u data)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	4603      	mov	r3, r0
 800742c:	71fb      	strb	r3, [r7, #7]
  blt_int32u timeout;

  /* write byte to transmit holding register */
  LL_USART_TransmitData8(USART_CHANNEL, data);
 800742e:	79fb      	ldrb	r3, [r7, #7]
 8007430:	4619      	mov	r1, r3
 8007432:	480e      	ldr	r0, [pc, #56]	; (800746c <Rs232TransmitByte+0x48>)
 8007434:	f7ff ff17 	bl	8007266 <LL_USART_TransmitData8>
  /* set timeout time to wait for transmit completion. */
  timeout = TimerGet() + RS232_BYTE_TX_TIMEOUT_MS;
 8007438:	f000 f85a 	bl	80074f0 <TimerGet>
 800743c:	4603      	mov	r3, r0
 800743e:	330a      	adds	r3, #10
 8007440:	60fb      	str	r3, [r7, #12]
  /* wait for tx holding register to be empty */
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 8007442:	e007      	b.n	8007454 <Rs232TransmitByte+0x30>
  {
    /* keep the watchdog happy */
    CopService();
 8007444:	f000 fcee 	bl	8007e24 <CopService>
    /* break loop upon timeout. this would indicate a hardware failure. */
    if (TimerGet() > timeout)
 8007448:	f000 f852 	bl	80074f0 <TimerGet>
 800744c:	4602      	mov	r2, r0
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4293      	cmp	r3, r2
 8007452:	d306      	bcc.n	8007462 <Rs232TransmitByte+0x3e>
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 8007454:	4805      	ldr	r0, [pc, #20]	; (800746c <Rs232TransmitByte+0x48>)
 8007456:	f7ff fee6 	bl	8007226 <LL_USART_IsActiveFlag_TXE>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d0f1      	beq.n	8007444 <Rs232TransmitByte+0x20>
    {
      break;
    }
  }
} /*** end of Rs232TransmitByte ***/
 8007460:	e000      	b.n	8007464 <Rs232TransmitByte+0x40>
      break;
 8007462:	bf00      	nop
} /*** end of Rs232TransmitByte ***/
 8007464:	bf00      	nop
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	40004400 	.word	0x40004400

08007470 <TimerInit>:
** \brief     Initializes the polling based millisecond timer driver.
** \return    none.
**
****************************************************************************************/
void TimerInit(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
  /* Reset the timer configuration. */
  TimerReset();
 8007474:	f000 f814 	bl	80074a0 <TimerReset>

  /* Configure the systick frequency as a 1 ms event generator. */
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 8007478:	4b06      	ldr	r3, [pc, #24]	; (8007494 <TimerInit+0x24>)
 800747a:	4a07      	ldr	r2, [pc, #28]	; (8007498 <TimerInit+0x28>)
 800747c:	605a      	str	r2, [r3, #4]
  /* Reset the current counter value. */
  SysTick->VAL = 0;
 800747e:	4b05      	ldr	r3, [pc, #20]	; (8007494 <TimerInit+0x24>)
 8007480:	2200      	movs	r2, #0
 8007482:	609a      	str	r2, [r3, #8]
  /* Select core clock as source and enable the timer. */
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8007484:	4b03      	ldr	r3, [pc, #12]	; (8007494 <TimerInit+0x24>)
 8007486:	2205      	movs	r2, #5
 8007488:	601a      	str	r2, [r3, #0]
  /* Reset the millisecond counter value. */
  millisecond_counter = 0;
 800748a:	4b04      	ldr	r3, [pc, #16]	; (800749c <TimerInit+0x2c>)
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 8007490:	bf00      	nop
 8007492:	bd80      	pop	{r7, pc}
 8007494:	e000e010 	.word	0xe000e010
 8007498:	0002903f 	.word	0x0002903f
 800749c:	20000b74 	.word	0x20000b74

080074a0 <TimerReset>:
**            configuration.
** \return    none.
**
****************************************************************************************/
void TimerReset(void)
{
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
  /* Set the systick's registers back into the default reset value. */
  SysTick->CTRL = 0;
 80074a4:	4b06      	ldr	r3, [pc, #24]	; (80074c0 <TimerReset+0x20>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 80074aa:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <TimerReset+0x20>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 80074b0:	4b03      	ldr	r3, [pc, #12]	; (80074c0 <TimerReset+0x20>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	609a      	str	r2, [r3, #8]
} /* end of TimerReset */
 80074b6:	bf00      	nop
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	e000e010 	.word	0xe000e010

080074c4 <TimerUpdate>:
** \brief     Updates the millisecond timer.
** \return    none.
**
****************************************************************************************/
void TimerUpdate(void)
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 80074c8:	4b07      	ldr	r3, [pc, #28]	; (80074e8 <TimerUpdate+0x24>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d004      	beq.n	80074de <TimerUpdate+0x1a>
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 80074d4:	4b05      	ldr	r3, [pc, #20]	; (80074ec <TimerUpdate+0x28>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3301      	adds	r3, #1
 80074da:	4a04      	ldr	r2, [pc, #16]	; (80074ec <TimerUpdate+0x28>)
 80074dc:	6013      	str	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 80074de:	bf00      	nop
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	e000e010 	.word	0xe000e010
 80074ec:	20000b74 	.word	0x20000b74

080074f0 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 80074f4:	f7ff ffe6 	bl	80074c4 <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
 80074f8:	4b01      	ldr	r3, [pc, #4]	; (8007500 <TimerGet+0x10>)
 80074fa:	681b      	ldr	r3, [r3, #0]
} /*** end of TimerGet ***/
 80074fc:	4618      	mov	r0, r3
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20000b74 	.word	0x20000b74

08007504 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	af00      	add	r7, sp, #0
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 8007508:	f7ff fff2 	bl	80074f0 <TimerGet>
 800750c:	4603      	mov	r3, r0
} /*** end of HAL_GetTick ***/
 800750e:	4618      	mov	r0, r3
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <UsbInit>:
** \brief     Initializes the USB communication interface.
** \return    none.
**
****************************************************************************************/
void UsbInit(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  /* initialize the FIFO manager */
  UsbFifoMgrInit();
 8007518:	f000 f9a8 	bl	800786c <UsbFifoMgrInit>
  /* place 2 buffers under FIFO management */
  fifoPipeBulkIN.handle  = UsbFifoMgrCreate(fifoPipeBulkIN.data,  FIFO_PIPE_SIZE);
 800751c:	2140      	movs	r1, #64	; 0x40
 800751e:	481e      	ldr	r0, [pc, #120]	; (8007598 <UsbInit+0x84>)
 8007520:	f000 f9d6 	bl	80078d0 <UsbFifoMgrCreate>
 8007524:	4603      	mov	r3, r0
 8007526:	461a      	mov	r2, r3
 8007528:	4b1c      	ldr	r3, [pc, #112]	; (800759c <UsbInit+0x88>)
 800752a:	701a      	strb	r2, [r3, #0]
  fifoPipeBulkOUT.handle = UsbFifoMgrCreate(fifoPipeBulkOUT.data, FIFO_PIPE_SIZE);
 800752c:	2140      	movs	r1, #64	; 0x40
 800752e:	481c      	ldr	r0, [pc, #112]	; (80075a0 <UsbInit+0x8c>)
 8007530:	f000 f9ce 	bl	80078d0 <UsbFifoMgrCreate>
 8007534:	4603      	mov	r3, r0
 8007536:	461a      	mov	r2, r3
 8007538:	4b1a      	ldr	r3, [pc, #104]	; (80075a4 <UsbInit+0x90>)
 800753a:	701a      	strb	r2, [r3, #0]
  /* validate fifo handles */
  ASSERT_RT((fifoPipeBulkIN.handle  != FIFO_ERR_INVALID_HANDLE) && \
 800753c:	4b17      	ldr	r3, [pc, #92]	; (800759c <UsbInit+0x88>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2bff      	cmp	r3, #255	; 0xff
 8007542:	d003      	beq.n	800754c <UsbInit+0x38>
 8007544:	4b17      	ldr	r3, [pc, #92]	; (80075a4 <UsbInit+0x90>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2bff      	cmp	r3, #255	; 0xff
 800754a:	d103      	bne.n	8007554 <UsbInit+0x40>
 800754c:	2184      	movs	r1, #132	; 0x84
 800754e:	4816      	ldr	r0, [pc, #88]	; (80075a8 <UsbInit+0x94>)
 8007550:	f000 fb10 	bl	8007b74 <AssertFailure>
            (fifoPipeBulkOUT.handle != FIFO_ERR_INVALID_HANDLE));
  /* initialize the USB device libary */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8007554:	2200      	movs	r2, #0
 8007556:	4915      	ldr	r1, [pc, #84]	; (80075ac <UsbInit+0x98>)
 8007558:	4815      	ldr	r0, [pc, #84]	; (80075b0 <UsbInit+0x9c>)
 800755a:	f7fe f8d7 	bl	800570c <USBD_Init>
  /* register the bootloader's custom USB Bulk based class */
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_Bulk);
 800755e:	4915      	ldr	r1, [pc, #84]	; (80075b4 <UsbInit+0xa0>)
 8007560:	4813      	ldr	r0, [pc, #76]	; (80075b0 <UsbInit+0x9c>)
 8007562:	f7fe f93d 	bl	80057e0 <USBD_RegisterClass>
  /* inform application about the connect event */
  UsbConnectHook(BLT_TRUE);
 8007566:	2001      	movs	r0, #1
 8007568:	f7f9 f818 	bl	800059c <UsbConnectHook>
  /* start the USB device */
  USBD_Start(&hUsbDeviceFS);
 800756c:	4810      	ldr	r0, [pc, #64]	; (80075b0 <UsbInit+0x9c>)
 800756e:	f7fe f958 	bl	8005822 <USBD_Start>
  /* perform low level connect of the device */
  HAL_PCD_DevConnect((PCD_HandleTypeDef *)hUsbDeviceFS.pData);
 8007572:	4b0f      	ldr	r3, [pc, #60]	; (80075b0 <UsbInit+0x9c>)
 8007574:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007578:	4618      	mov	r0, r3
 800757a:	f7fb f98a 	bl	8002892 <HAL_PCD_DevConnect>
  /* extend the time that the backdoor is open in case the default timed backdoor
   * mechanism is used.
   */
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
  if (BackDoorGetExtension() < BOOT_COM_USB_BACKDOOR_EXTENSION_MS)
 800757e:	f000 fb45 	bl	8007c0c <BackDoorGetExtension>
 8007582:	4603      	mov	r3, r0
 8007584:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007588:	d203      	bcs.n	8007592 <UsbInit+0x7e>
  {
    BackDoorSetExtension(BOOT_COM_USB_BACKDOOR_EXTENSION_MS);
 800758a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800758e:	f000 fb2d 	bl	8007bec <BackDoorSetExtension>
  }
#endif /* BOOT_BACKDOOR_HOOKS_ENABLE == 0 */
} /*** end of UsbInit ***/
 8007592:	bf00      	nop
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20000bad 	.word	0x20000bad
 800759c:	20000bac 	.word	0x20000bac
 80075a0:	20000bf1 	.word	0x20000bf1
 80075a4:	20000bf0 	.word	0x20000bf0
 80075a8:	080092d0 	.word	0x080092d0
 80075ac:	20000110 	.word	0x20000110
 80075b0:	20000c34 	.word	0x20000c34
 80075b4:	20000018 	.word	0x20000018

080075b8 <UsbFree>:
** \brief     Releases the USB communication interface.
** \return    none.
**
****************************************************************************************/
void UsbFree(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
  /* perform low level disconnect of the device */
  HAL_PCD_DevDisconnect((PCD_HandleTypeDef *)hUsbDeviceFS.pData);
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <UsbFree+0x20>)
 80075be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fb f993 	bl	80028ee <HAL_PCD_DevDisconnect>
  /* uninitialize the device */
  USBD_DeInit(&hUsbDeviceFS);
 80075c8:	4803      	ldr	r0, [pc, #12]	; (80075d8 <UsbFree+0x20>)
 80075ca:	f7fe f8d5 	bl	8005778 <USBD_DeInit>
  /* inform application about the disconnect event */
  UsbConnectHook(BLT_FALSE);
 80075ce:	2000      	movs	r0, #0
 80075d0:	f7f8 ffe4 	bl	800059c <UsbConnectHook>
} /*** end of UsbFree ***/
 80075d4:	bf00      	nop
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20000c34 	.word	0x20000c34

080075dc <UsbTransmitPacket>:
** \param     len  Number of bytes that are to be transmitted.
** \return    none.
**
****************************************************************************************/
void UsbTransmitPacket(blt_int8u *data, blt_int8u len)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	70fb      	strb	r3, [r7, #3]
  blt_int16u data_index;
  blt_bool result;

  /* verify validity of the len-paramenter */
  ASSERT_RT(len <= BOOT_COM_USB_TX_MAX_DATA);
 80075e8:	78fb      	ldrb	r3, [r7, #3]
 80075ea:	2b3f      	cmp	r3, #63	; 0x3f
 80075ec:	d903      	bls.n	80075f6 <UsbTransmitPacket+0x1a>
 80075ee:	21b9      	movs	r1, #185	; 0xb9
 80075f0:	4818      	ldr	r0, [pc, #96]	; (8007654 <UsbTransmitPacket+0x78>)
 80075f2:	f000 fabf 	bl	8007b74 <AssertFailure>

  /* first transmit the length of the packet */
  result = UsbTransmitByte(len);
 80075f6:	78fb      	ldrb	r3, [r7, #3]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 f89d 	bl	8007738 <UsbTransmitByte>
 80075fe:	4603      	mov	r3, r0
 8007600:	737b      	strb	r3, [r7, #13]
  ASSERT_RT(result == BLT_TRUE);
 8007602:	7b7b      	ldrb	r3, [r7, #13]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d003      	beq.n	8007610 <UsbTransmitPacket+0x34>
 8007608:	21bd      	movs	r1, #189	; 0xbd
 800760a:	4812      	ldr	r0, [pc, #72]	; (8007654 <UsbTransmitPacket+0x78>)
 800760c:	f000 fab2 	bl	8007b74 <AssertFailure>

  /* transmit all the packet bytes one-by-one */
  for (data_index = 0; data_index < len; data_index++)
 8007610:	2300      	movs	r3, #0
 8007612:	81fb      	strh	r3, [r7, #14]
 8007614:	e014      	b.n	8007640 <UsbTransmitPacket+0x64>
  {
    /* keep the watchdog happy */
    CopService();
 8007616:	f000 fc05 	bl	8007e24 <CopService>
    /* write byte */
    result = UsbTransmitByte(data[data_index]);
 800761a:	89fb      	ldrh	r3, [r7, #14]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	4413      	add	r3, r2
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	4618      	mov	r0, r3
 8007624:	f000 f888 	bl	8007738 <UsbTransmitByte>
 8007628:	4603      	mov	r3, r0
 800762a:	737b      	strb	r3, [r7, #13]
    ASSERT_RT(result == BLT_TRUE);
 800762c:	7b7b      	ldrb	r3, [r7, #13]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d003      	beq.n	800763a <UsbTransmitPacket+0x5e>
 8007632:	21c6      	movs	r1, #198	; 0xc6
 8007634:	4807      	ldr	r0, [pc, #28]	; (8007654 <UsbTransmitPacket+0x78>)
 8007636:	f000 fa9d 	bl	8007b74 <AssertFailure>
  for (data_index = 0; data_index < len; data_index++)
 800763a:	89fb      	ldrh	r3, [r7, #14]
 800763c:	3301      	adds	r3, #1
 800763e:	81fb      	strh	r3, [r7, #14]
 8007640:	78fb      	ldrb	r3, [r7, #3]
 8007642:	b29b      	uxth	r3, r3
 8007644:	89fa      	ldrh	r2, [r7, #14]
 8007646:	429a      	cmp	r2, r3
 8007648:	d3e5      	bcc.n	8007616 <UsbTransmitPacket+0x3a>
  }
} /*** end of UsbTransmitPacket ***/
 800764a:	bf00      	nop
 800764c:	bf00      	nop
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	080092d0 	.word	0x080092d0

08007658 <UsbReceivePacket>:
** \param     len Pointer where the length of the packet is to be stored.
** \return    BLT_TRUE if a packet was received, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool UsbReceivePacket(blt_int8u *data, blt_int8u *len)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  static blt_int8u xcpCtoReqPacket[BOOT_COM_USB_RX_MAX_DATA+1];  /* one extra for length */
  static blt_int8u xcpCtoRxLength;
  static blt_bool  xcpCtoRxInProgress = BLT_FALSE;

  /* poll USB interrupt flags to process USB related events */
  HAL_PCD_IRQHandler((PCD_HandleTypeDef *)hUsbDeviceFS.pData);
 8007662:	4b26      	ldr	r3, [pc, #152]	; (80076fc <UsbReceivePacket+0xa4>)
 8007664:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007668:	4618      	mov	r0, r3
 800766a:	f7fa fc73 	bl	8001f54 <HAL_PCD_IRQHandler>

  /* start of cto packet received? */
  if (xcpCtoRxInProgress == BLT_FALSE)
 800766e:	4b24      	ldr	r3, [pc, #144]	; (8007700 <UsbReceivePacket+0xa8>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d114      	bne.n	80076a0 <UsbReceivePacket+0x48>
  {
    /* store the message length when received */
    if (UsbReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 8007676:	4823      	ldr	r0, [pc, #140]	; (8007704 <UsbReceivePacket+0xac>)
 8007678:	f000 f84a 	bl	8007710 <UsbReceiveByte>
 800767c:	4603      	mov	r3, r0
 800767e:	2b01      	cmp	r3, #1
 8007680:	d136      	bne.n	80076f0 <UsbReceivePacket+0x98>
    {
      if ( (xcpCtoReqPacket[0] > 0) &&
 8007682:	4b20      	ldr	r3, [pc, #128]	; (8007704 <UsbReceivePacket+0xac>)
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d032      	beq.n	80076f0 <UsbReceivePacket+0x98>
           (xcpCtoReqPacket[0] <= BOOT_COM_USB_RX_MAX_DATA) )
 800768a:	4b1e      	ldr	r3, [pc, #120]	; (8007704 <UsbReceivePacket+0xac>)
 800768c:	781b      	ldrb	r3, [r3, #0]
      if ( (xcpCtoReqPacket[0] > 0) &&
 800768e:	2b3f      	cmp	r3, #63	; 0x3f
 8007690:	d82e      	bhi.n	80076f0 <UsbReceivePacket+0x98>
      {
        /* indicate that a cto packet is being received */
        xcpCtoRxInProgress = BLT_TRUE;
 8007692:	4b1b      	ldr	r3, [pc, #108]	; (8007700 <UsbReceivePacket+0xa8>)
 8007694:	2201      	movs	r2, #1
 8007696:	701a      	strb	r2, [r3, #0]
        /* reset packet data count */
        xcpCtoRxLength = 0;
 8007698:	4b1b      	ldr	r3, [pc, #108]	; (8007708 <UsbReceivePacket+0xb0>)
 800769a:	2200      	movs	r2, #0
 800769c:	701a      	strb	r2, [r3, #0]
 800769e:	e027      	b.n	80076f0 <UsbReceivePacket+0x98>
    }
  }
  else
  {
    /* store the next packet byte */
    if (UsbReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 80076a0:	4b19      	ldr	r3, [pc, #100]	; (8007708 <UsbReceivePacket+0xb0>)
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	3301      	adds	r3, #1
 80076a6:	4a17      	ldr	r2, [pc, #92]	; (8007704 <UsbReceivePacket+0xac>)
 80076a8:	4413      	add	r3, r2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 f830 	bl	8007710 <UsbReceiveByte>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d11c      	bne.n	80076f0 <UsbReceivePacket+0x98>
    {
      /* increment the packet data count */
      xcpCtoRxLength++;
 80076b6:	4b14      	ldr	r3, [pc, #80]	; (8007708 <UsbReceivePacket+0xb0>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	3301      	adds	r3, #1
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	4b12      	ldr	r3, [pc, #72]	; (8007708 <UsbReceivePacket+0xb0>)
 80076c0:	701a      	strb	r2, [r3, #0]

      /* check to see if the entire packet was received */
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 80076c2:	4b10      	ldr	r3, [pc, #64]	; (8007704 <UsbReceivePacket+0xac>)
 80076c4:	781a      	ldrb	r2, [r3, #0]
 80076c6:	4b10      	ldr	r3, [pc, #64]	; (8007708 <UsbReceivePacket+0xb0>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d110      	bne.n	80076f0 <UsbReceivePacket+0x98>
      {
        /* copy the packet data */
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	490e      	ldr	r1, [pc, #56]	; (800770c <UsbReceivePacket+0xb4>)
 80076d2:	4a0d      	ldr	r2, [pc, #52]	; (8007708 <UsbReceivePacket+0xb0>)
 80076d4:	7812      	ldrb	r2, [r2, #0]
 80076d6:	b292      	uxth	r2, r2
 80076d8:	4618      	mov	r0, r3
 80076da:	f7ff f9b3 	bl	8006a44 <CpuMemCopy>
        /* done with cto packet reception */
        xcpCtoRxInProgress = BLT_FALSE;
 80076de:	4b08      	ldr	r3, [pc, #32]	; (8007700 <UsbReceivePacket+0xa8>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	701a      	strb	r2, [r3, #0]
        /* set the packet length */
        *len = xcpCtoRxLength;
 80076e4:	4b08      	ldr	r3, [pc, #32]	; (8007708 <UsbReceivePacket+0xb0>)
 80076e6:	781a      	ldrb	r2, [r3, #0]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	701a      	strb	r2, [r3, #0]
        /* packet reception complete */
        return BLT_TRUE;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e000      	b.n	80076f2 <UsbReceivePacket+0x9a>
      }
    }
  }
  /* packet reception not yet complete */
  return BLT_FALSE;
 80076f0:	2300      	movs	r3, #0
} /*** end of UsbReceivePacket ***/
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20000c34 	.word	0x20000c34
 8007700:	20000f04 	.word	0x20000f04
 8007704:	20000f08 	.word	0x20000f08
 8007708:	20000f48 	.word	0x20000f48
 800770c:	20000f09 	.word	0x20000f09

08007710 <UsbReceiveByte>:
** \param     data Pointer to byte where the data is to be stored.
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool UsbReceiveByte(blt_int8u *data)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  blt_bool result;

  /* obtain data from the fifo */
  result = UsbFifoMgrRead(fifoPipeBulkOUT.handle, data);
 8007718:	4b06      	ldr	r3, [pc, #24]	; (8007734 <UsbReceiveByte+0x24>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	4618      	mov	r0, r3
 8007720:	f000 f98e 	bl	8007a40 <UsbFifoMgrRead>
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
  return result;
 8007728:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of UsbReceiveByte ***/
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	20000bf0 	.word	0x20000bf0

08007738 <UsbTransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    BLT_TRUE if the byte was transmitted, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool UsbTransmitByte(blt_int8u data)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	4603      	mov	r3, r0
 8007740:	71fb      	strb	r3, [r7, #7]
  blt_bool result;

  /* write data from to fifo */
  result = UsbFifoMgrWrite(fifoPipeBulkIN.handle, data);
 8007742:	4b07      	ldr	r3, [pc, #28]	; (8007760 <UsbTransmitByte+0x28>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	79fa      	ldrb	r2, [r7, #7]
 8007748:	4611      	mov	r1, r2
 800774a:	4618      	mov	r0, r3
 800774c:	f000 f8f2 	bl	8007934 <UsbFifoMgrWrite>
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]
  return result;
 8007754:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of UsbTransmitByte ***/
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20000bac 	.word	0x20000bac

08007764 <UsbTransmitPipeBulkIN>:
**            for transmission with the USB endpoint.
** \return    none.
**
****************************************************************************************/
void UsbTransmitPipeBulkIN(void)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
  blt_int8u byte_counter;
  blt_int8u byte_value;
  blt_bool  result;

  /* read how many bytes should be transmitted */
  nr_of_bytes_for_tx_endpoint = UsbFifoMgrScan(fifoPipeBulkIN.handle);
 800776a:	4b1c      	ldr	r3, [pc, #112]	; (80077dc <UsbTransmitPipeBulkIN+0x78>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	4618      	mov	r0, r3
 8007770:	f000 f9e2 	bl	8007b38 <UsbFifoMgrScan>
 8007774:	4603      	mov	r3, r0
 8007776:	71fb      	strb	r3, [r7, #7]
  /* only continue if there is actually data left to transmit */
  if (nr_of_bytes_for_tx_endpoint == 0)
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d02a      	beq.n	80077d4 <UsbTransmitPipeBulkIN+0x70>
  {
    return;
  }
  /* make sure to not transmit more than the USB endpoint can handle */
  if (nr_of_bytes_for_tx_endpoint > BULK_DATA_MAX_PACKET_SIZE)
 800777e:	79fb      	ldrb	r3, [r7, #7]
 8007780:	2b40      	cmp	r3, #64	; 0x40
 8007782:	d901      	bls.n	8007788 <UsbTransmitPipeBulkIN+0x24>
  {
    nr_of_bytes_for_tx_endpoint = BULK_DATA_MAX_PACKET_SIZE;
 8007784:	2340      	movs	r3, #64	; 0x40
 8007786:	71fb      	strb	r3, [r7, #7]
  }
  /* copy the transmit data to the transmit buffer */
  for (byte_counter=0; byte_counter < nr_of_bytes_for_tx_endpoint; byte_counter++)
 8007788:	2300      	movs	r3, #0
 800778a:	71bb      	strb	r3, [r7, #6]
 800778c:	e017      	b.n	80077be <UsbTransmitPipeBulkIN+0x5a>
  {
    /* obtain data from the fifo */
    result = UsbFifoMgrRead(fifoPipeBulkIN.handle, &byte_value);
 800778e:	4b13      	ldr	r3, [pc, #76]	; (80077dc <UsbTransmitPipeBulkIN+0x78>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	1d3a      	adds	r2, r7, #4
 8007794:	4611      	mov	r1, r2
 8007796:	4618      	mov	r0, r3
 8007798:	f000 f952 	bl	8007a40 <UsbFifoMgrRead>
 800779c:	4603      	mov	r3, r0
 800779e:	717b      	strb	r3, [r7, #5]
    ASSERT_RT(result == BLT_TRUE);
 80077a0:	797b      	ldrb	r3, [r7, #5]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d004      	beq.n	80077b0 <UsbTransmitPipeBulkIN+0x4c>
 80077a6:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80077aa:	480d      	ldr	r0, [pc, #52]	; (80077e0 <UsbTransmitPipeBulkIN+0x7c>)
 80077ac:	f000 f9e2 	bl	8007b74 <AssertFailure>
    /* store it in the endpoint's RAM */
    USB_Tx_Buffer[byte_counter] = byte_value;
 80077b0:	79bb      	ldrb	r3, [r7, #6]
 80077b2:	7939      	ldrb	r1, [r7, #4]
 80077b4:	4a0b      	ldr	r2, [pc, #44]	; (80077e4 <UsbTransmitPipeBulkIN+0x80>)
 80077b6:	54d1      	strb	r1, [r2, r3]
  for (byte_counter=0; byte_counter < nr_of_bytes_for_tx_endpoint; byte_counter++)
 80077b8:	79bb      	ldrb	r3, [r7, #6]
 80077ba:	3301      	adds	r3, #1
 80077bc:	71bb      	strb	r3, [r7, #6]
 80077be:	79ba      	ldrb	r2, [r7, #6]
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d3e3      	bcc.n	800778e <UsbTransmitPipeBulkIN+0x2a>
  }
  /* copy data to endpoint's RAM and start the transmission */
  USBD_LL_Transmit(&hUsbDeviceFS, BULK_IN_EP, &USB_Tx_Buffer[0],
 80077c6:	79fb      	ldrb	r3, [r7, #7]
 80077c8:	4a06      	ldr	r2, [pc, #24]	; (80077e4 <UsbTransmitPipeBulkIN+0x80>)
 80077ca:	2181      	movs	r1, #129	; 0x81
 80077cc:	4806      	ldr	r0, [pc, #24]	; (80077e8 <UsbTransmitPipeBulkIN+0x84>)
 80077ce:	f001 fca7 	bl	8009120 <USBD_LL_Transmit>
 80077d2:	e000      	b.n	80077d6 <UsbTransmitPipeBulkIN+0x72>
    return;
 80077d4:	bf00      	nop
                   nr_of_bytes_for_tx_endpoint);
} /*** end of UsbTransmitPipeBulkIN ***/
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	20000bac 	.word	0x20000bac
 80077e0:	080092d0 	.word	0x080092d0
 80077e4:	20000f4c 	.word	0x20000f4c
 80077e8:	20000c34 	.word	0x20000c34

080077ec <UsbReceivePipeBulkOUT>:
** \brief     Stores data that was received on the Bulk OUT pipe in the fifo.
** \return    none.
**
****************************************************************************************/
void UsbReceivePipeBulkOUT(blt_int8u epnum)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	71fb      	strb	r3, [r7, #7]
  blt_int16u USB_Rx_Cnt=0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	82bb      	strh	r3, [r7, #20]
  blt_int8u *usbRxBufferPtr;
  blt_int16u byte_counter;
  blt_bool result;

  /* Get the received data buffer and the number of received bytes */
  usbRxBufferPtr = USBD_Bulk_GetRxBufferPtr();
 80077fa:	f001 f841 	bl	8008880 <USBD_Bulk_GetRxBufferPtr>
 80077fe:	6138      	str	r0, [r7, #16]
  USB_Rx_Cnt = USBD_LL_GetRxDataSize(&hUsbDeviceFS, epnum);
 8007800:	79fb      	ldrb	r3, [r7, #7]
 8007802:	4619      	mov	r1, r3
 8007804:	4816      	ldr	r0, [pc, #88]	; (8007860 <UsbReceivePipeBulkOUT+0x74>)
 8007806:	f001 fcfb 	bl	8009200 <USBD_LL_GetRxDataSize>
 800780a:	4603      	mov	r3, r0
 800780c:	82bb      	strh	r3, [r7, #20]

  /* USB data will be immediately processed, this allow next USB traffic being
   * NAKed till the end of the USART Xfer
   */
  for (byte_counter=0; byte_counter<USB_Rx_Cnt; byte_counter++)
 800780e:	2300      	movs	r3, #0
 8007810:	82fb      	strh	r3, [r7, #22]
 8007812:	e015      	b.n	8007840 <UsbReceivePipeBulkOUT+0x54>
  {
    /* add the data to the fifo */
    result = UsbFifoMgrWrite(fifoPipeBulkOUT.handle, usbRxBufferPtr[byte_counter]);
 8007814:	4b13      	ldr	r3, [pc, #76]	; (8007864 <UsbReceivePipeBulkOUT+0x78>)
 8007816:	7818      	ldrb	r0, [r3, #0]
 8007818:	8afb      	ldrh	r3, [r7, #22]
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	4413      	add	r3, r2
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	4619      	mov	r1, r3
 8007822:	f000 f887 	bl	8007934 <UsbFifoMgrWrite>
 8007826:	4603      	mov	r3, r0
 8007828:	73fb      	strb	r3, [r7, #15]
    /* verify that the fifo wasn't full */
    ASSERT_RT(result == BLT_TRUE);
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d004      	beq.n	800783a <UsbReceivePipeBulkOUT+0x4e>
 8007830:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8007834:	480c      	ldr	r0, [pc, #48]	; (8007868 <UsbReceivePipeBulkOUT+0x7c>)
 8007836:	f000 f99d 	bl	8007b74 <AssertFailure>
  for (byte_counter=0; byte_counter<USB_Rx_Cnt; byte_counter++)
 800783a:	8afb      	ldrh	r3, [r7, #22]
 800783c:	3301      	adds	r3, #1
 800783e:	82fb      	strh	r3, [r7, #22]
 8007840:	8afa      	ldrh	r2, [r7, #22]
 8007842:	8abb      	ldrh	r3, [r7, #20]
 8007844:	429a      	cmp	r2, r3
 8007846:	d3e5      	bcc.n	8007814 <UsbReceivePipeBulkOUT+0x28>
  }
  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(&hUsbDeviceFS,
 8007848:	f001 f81a 	bl	8008880 <USBD_Bulk_GetRxBufferPtr>
 800784c:	4602      	mov	r2, r0
 800784e:	2340      	movs	r3, #64	; 0x40
 8007850:	2101      	movs	r1, #1
 8007852:	4803      	ldr	r0, [pc, #12]	; (8007860 <UsbReceivePipeBulkOUT+0x74>)
 8007854:	f001 fc9c 	bl	8009190 <USBD_LL_PrepareReceive>
                         BULK_OUT_EP,
                         USBD_Bulk_GetRxBufferPtr(),
                         BULK_DATA_FS_OUT_PACKET_SIZE);
} /*** end of UsbReceivePipeBulkOUT ***/
 8007858:	bf00      	nop
 800785a:	3718      	adds	r7, #24
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	20000c34 	.word	0x20000c34
 8007864:	20000bf0 	.word	0x20000bf0
 8007868:	080092d0 	.word	0x080092d0

0800786c <UsbFifoMgrInit>:
**            before any of the other fifo management functions are called.
** \return    none.
**
****************************************************************************************/
static void UsbFifoMgrInit(void)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
  blt_int8u i;
  tFifoCtrl *pbc1, *pbc2;

  pbc1 = &fifoCtrl[0];
 8007872:	4b14      	ldr	r3, [pc, #80]	; (80078c4 <UsbFifoMgrInit+0x58>)
 8007874:	60bb      	str	r3, [r7, #8]
  pbc2 = &fifoCtrl[1];
 8007876:	4b14      	ldr	r3, [pc, #80]	; (80078c8 <UsbFifoMgrInit+0x5c>)
 8007878:	607b      	str	r3, [r7, #4]
  /* assign fifo handles and pointer to next free fifo */
  for (i = 0; i < (FIFO_MAX_BUFFERS - 1); i++)
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]
 800787e:	e00e      	b.n	800789e <UsbFifoMgrInit+0x32>
  {
    pbc1->handle = i;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	7bfa      	ldrb	r2, [r7, #15]
 8007884:	749a      	strb	r2, [r3, #18]
    pbc1->fifoctrlptr = pbc2;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	615a      	str	r2, [r3, #20]
    pbc1++;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	3318      	adds	r3, #24
 8007890:	60bb      	str	r3, [r7, #8]
    pbc2++;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3318      	adds	r3, #24
 8007896:	607b      	str	r3, [r7, #4]
  for (i = 0; i < (FIFO_MAX_BUFFERS - 1); i++)
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	3301      	adds	r3, #1
 800789c:	73fb      	strb	r3, [r7, #15]
 800789e:	7bfb      	ldrb	r3, [r7, #15]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0ed      	beq.n	8007880 <UsbFifoMgrInit+0x14>
  }
  /* initialize handle for the last one and use null-pointer for the next free fifo  */
  pbc1->handle = i;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	7bfa      	ldrb	r2, [r7, #15]
 80078a8:	749a      	strb	r2, [r3, #18]
  pbc1->fifoctrlptr = (tFifoCtrl *)0;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2200      	movs	r2, #0
 80078ae:	615a      	str	r2, [r3, #20]
  fifoCtrlFree = &fifoCtrl[0];
 80078b0:	4b06      	ldr	r3, [pc, #24]	; (80078cc <UsbFifoMgrInit+0x60>)
 80078b2:	4a04      	ldr	r2, [pc, #16]	; (80078c4 <UsbFifoMgrInit+0x58>)
 80078b4:	601a      	str	r2, [r3, #0]
} /*** end of UsbFifoMgrInit ***/
 80078b6:	bf00      	nop
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	20000b78 	.word	0x20000b78
 80078c8:	20000b90 	.word	0x20000b90
 80078cc:	20000ba8 	.word	0x20000ba8

080078d0 <UsbFifoMgrCreate>:
** \param     length Maximum number of data elements that can be stored in the fifo.
** \return    Fifo handle if successfull, or FIFO_ERR_INVALID_HANDLE.
**
****************************************************************************************/
static blt_int8u UsbFifoMgrCreate(blt_int8u *buffer, blt_int8u length)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	70fb      	strb	r3, [r7, #3]
  tFifoCtrl *pbc;

  /* first determine if these is still a free fifo control available */
  if (fifoCtrlFree == (tFifoCtrl *)0)
 80078dc:	4b14      	ldr	r3, [pc, #80]	; (8007930 <UsbFifoMgrCreate+0x60>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <UsbFifoMgrCreate+0x18>
  {
    return FIFO_ERR_INVALID_HANDLE;
 80078e4:	23ff      	movs	r3, #255	; 0xff
 80078e6:	e01d      	b.n	8007924 <UsbFifoMgrCreate+0x54>
  }
  /* store pointer to free fifo and update pointer to next free one */
  pbc = fifoCtrlFree;
 80078e8:	4b11      	ldr	r3, [pc, #68]	; (8007930 <UsbFifoMgrCreate+0x60>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	60fb      	str	r3, [r7, #12]
  fifoCtrlFree = pbc->fifoctrlptr;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	4a0f      	ldr	r2, [pc, #60]	; (8007930 <UsbFifoMgrCreate+0x60>)
 80078f4:	6013      	str	r3, [r2, #0]

  /* initialize the buffer control */
  pbc->length = length;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	78fa      	ldrb	r2, [r7, #3]
 80078fa:	741a      	strb	r2, [r3, #16]
  pbc->readptr = buffer;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	609a      	str	r2, [r3, #8]
  pbc->writeptr = buffer;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	60da      	str	r2, [r3, #12]
  pbc->entries = 0;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	745a      	strb	r2, [r3, #17]
  pbc->startptr = buffer;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	601a      	str	r2, [r3, #0]
  pbc->endptr = (blt_int8u *)(buffer + length - 1);
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	3b01      	subs	r3, #1
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	441a      	add	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	605a      	str	r2, [r3, #4]

  /* return the handle to the successfully created fifo control */
  return pbc->handle;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	7c9b      	ldrb	r3, [r3, #18]
} /*** end of UsbFifoMgrCreate ***/
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	20000ba8 	.word	0x20000ba8

08007934 <UsbFifoMgrWrite>:
** \return    BLT_TRUE if the data was successfully stored in the fifo, BLT_FALSE
**            otherwise.
**
****************************************************************************************/
static blt_bool UsbFifoMgrWrite(blt_int8u handle, blt_int8u data)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	460a      	mov	r2, r1
 800793e:	71fb      	strb	r3, [r7, #7]
 8007940:	4613      	mov	r3, r2
 8007942:	71bb      	strb	r3, [r7, #6]
  /* check the validity of the handle parameter */
  ASSERT_RT(handle < FIFO_MAX_BUFFERS);
 8007944:	79fb      	ldrb	r3, [r7, #7]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d904      	bls.n	8007954 <UsbFifoMgrWrite+0x20>
 800794a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800794e:	483a      	ldr	r0, [pc, #232]	; (8007a38 <UsbFifoMgrWrite+0x104>)
 8007950:	f000 f910 	bl	8007b74 <AssertFailure>
  /* check if fifo is full */
  if (fifoCtrl[handle].entries == fifoCtrl[handle].length)
 8007954:	79fa      	ldrb	r2, [r7, #7]
 8007956:	4939      	ldr	r1, [pc, #228]	; (8007a3c <UsbFifoMgrWrite+0x108>)
 8007958:	4613      	mov	r3, r2
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	4413      	add	r3, r2
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	440b      	add	r3, r1
 8007962:	3311      	adds	r3, #17
 8007964:	7819      	ldrb	r1, [r3, #0]
 8007966:	79fa      	ldrb	r2, [r7, #7]
 8007968:	4834      	ldr	r0, [pc, #208]	; (8007a3c <UsbFifoMgrWrite+0x108>)
 800796a:	4613      	mov	r3, r2
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	4413      	add	r3, r2
 8007970:	00db      	lsls	r3, r3, #3
 8007972:	4403      	add	r3, r0
 8007974:	3310      	adds	r3, #16
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	4299      	cmp	r1, r3
 800797a:	d101      	bne.n	8007980 <UsbFifoMgrWrite+0x4c>
  {
    return BLT_FALSE;
 800797c:	2300      	movs	r3, #0
 800797e:	e056      	b.n	8007a2e <UsbFifoMgrWrite+0xfa>
  }
  /* copy data to fifo */
  *fifoCtrl[handle].writeptr = data;
 8007980:	79fa      	ldrb	r2, [r7, #7]
 8007982:	492e      	ldr	r1, [pc, #184]	; (8007a3c <UsbFifoMgrWrite+0x108>)
 8007984:	4613      	mov	r3, r2
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	4413      	add	r3, r2
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	440b      	add	r3, r1
 800798e:	330c      	adds	r3, #12
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	79ba      	ldrb	r2, [r7, #6]
 8007994:	701a      	strb	r2, [r3, #0]
  /* data written so update number of entries */
  fifoCtrl[handle].entries++;
 8007996:	79fa      	ldrb	r2, [r7, #7]
 8007998:	4928      	ldr	r1, [pc, #160]	; (8007a3c <UsbFifoMgrWrite+0x108>)
 800799a:	4613      	mov	r3, r2
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	4413      	add	r3, r2
 80079a0:	00db      	lsls	r3, r3, #3
 80079a2:	440b      	add	r3, r1
 80079a4:	3311      	adds	r3, #17
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	3301      	adds	r3, #1
 80079aa:	b2d8      	uxtb	r0, r3
 80079ac:	4923      	ldr	r1, [pc, #140]	; (8007a3c <UsbFifoMgrWrite+0x108>)
 80079ae:	4613      	mov	r3, r2
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	4413      	add	r3, r2
 80079b4:	00db      	lsls	r3, r3, #3
 80079b6:	440b      	add	r3, r1
 80079b8:	3311      	adds	r3, #17
 80079ba:	4602      	mov	r2, r0
 80079bc:	701a      	strb	r2, [r3, #0]
  /* update write pointer */
  fifoCtrl[handle].writeptr++;
 80079be:	79fa      	ldrb	r2, [r7, #7]
 80079c0:	491e      	ldr	r1, [pc, #120]	; (8007a3c <UsbFifoMgrWrite+0x108>)
 80079c2:	4613      	mov	r3, r2
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	4413      	add	r3, r2
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	440b      	add	r3, r1
 80079cc:	330c      	adds	r3, #12
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	1c59      	adds	r1, r3, #1
 80079d2:	481a      	ldr	r0, [pc, #104]	; (8007a3c <UsbFifoMgrWrite+0x108>)
 80079d4:	4613      	mov	r3, r2
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	4413      	add	r3, r2
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	4403      	add	r3, r0
 80079de:	330c      	adds	r3, #12
 80079e0:	6019      	str	r1, [r3, #0]
  /* check end of fifo */
  if (fifoCtrl[handle].writeptr > fifoCtrl[handle].endptr)
 80079e2:	79fa      	ldrb	r2, [r7, #7]
 80079e4:	4915      	ldr	r1, [pc, #84]	; (8007a3c <UsbFifoMgrWrite+0x108>)
 80079e6:	4613      	mov	r3, r2
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	4413      	add	r3, r2
 80079ec:	00db      	lsls	r3, r3, #3
 80079ee:	440b      	add	r3, r1
 80079f0:	330c      	adds	r3, #12
 80079f2:	6819      	ldr	r1, [r3, #0]
 80079f4:	79fa      	ldrb	r2, [r7, #7]
 80079f6:	4811      	ldr	r0, [pc, #68]	; (8007a3c <UsbFifoMgrWrite+0x108>)
 80079f8:	4613      	mov	r3, r2
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	4413      	add	r3, r2
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	4403      	add	r3, r0
 8007a02:	3304      	adds	r3, #4
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4299      	cmp	r1, r3
 8007a08:	d910      	bls.n	8007a2c <UsbFifoMgrWrite+0xf8>
  {
    /* set write pointer to start of the cyclic fifo */
    fifoCtrl[handle].writeptr = fifoCtrl[handle].startptr;
 8007a0a:	79f9      	ldrb	r1, [r7, #7]
 8007a0c:	79fa      	ldrb	r2, [r7, #7]
 8007a0e:	480b      	ldr	r0, [pc, #44]	; (8007a3c <UsbFifoMgrWrite+0x108>)
 8007a10:	460b      	mov	r3, r1
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	440b      	add	r3, r1
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	4403      	add	r3, r0
 8007a1a:	6819      	ldr	r1, [r3, #0]
 8007a1c:	4807      	ldr	r0, [pc, #28]	; (8007a3c <UsbFifoMgrWrite+0x108>)
 8007a1e:	4613      	mov	r3, r2
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	4413      	add	r3, r2
 8007a24:	00db      	lsls	r3, r3, #3
 8007a26:	4403      	add	r3, r0
 8007a28:	330c      	adds	r3, #12
 8007a2a:	6019      	str	r1, [r3, #0]
  }
  /* still here so all is okay */
  return BLT_TRUE;
 8007a2c:	2301      	movs	r3, #1
} /*** end of UsbFifoMgrWrite ***/
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	080092d0 	.word	0x080092d0
 8007a3c:	20000b78 	.word	0x20000b78

08007a40 <UsbFifoMgrRead>:
** \return    BLT_TRUE if the data was successfully read from the fifo, BLT_FALSE
**            otherwise.
**
****************************************************************************************/
static blt_bool UsbFifoMgrRead(blt_int8u handle, blt_int8u *data)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	6039      	str	r1, [r7, #0]
 8007a4a:	71fb      	strb	r3, [r7, #7]
  /* check the validity of the handle parameter */
  ASSERT_RT(handle < FIFO_MAX_BUFFERS);
 8007a4c:	79fb      	ldrb	r3, [r7, #7]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d904      	bls.n	8007a5c <UsbFifoMgrRead+0x1c>
 8007a52:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8007a56:	4836      	ldr	r0, [pc, #216]	; (8007b30 <UsbFifoMgrRead+0xf0>)
 8007a58:	f000 f88c 	bl	8007b74 <AssertFailure>
  /* check if fifo is empty */
  if (fifoCtrl[handle].entries == 0)
 8007a5c:	79fa      	ldrb	r2, [r7, #7]
 8007a5e:	4935      	ldr	r1, [pc, #212]	; (8007b34 <UsbFifoMgrRead+0xf4>)
 8007a60:	4613      	mov	r3, r2
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	4413      	add	r3, r2
 8007a66:	00db      	lsls	r3, r3, #3
 8007a68:	440b      	add	r3, r1
 8007a6a:	3311      	adds	r3, #17
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <UsbFifoMgrRead+0x36>
  {
    return BLT_FALSE;
 8007a72:	2300      	movs	r3, #0
 8007a74:	e057      	b.n	8007b26 <UsbFifoMgrRead+0xe6>
  }
  /* read the data */
  *data = *fifoCtrl[handle].readptr;
 8007a76:	79fa      	ldrb	r2, [r7, #7]
 8007a78:	492e      	ldr	r1, [pc, #184]	; (8007b34 <UsbFifoMgrRead+0xf4>)
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	4413      	add	r3, r2
 8007a80:	00db      	lsls	r3, r3, #3
 8007a82:	440b      	add	r3, r1
 8007a84:	3308      	adds	r3, #8
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	781a      	ldrb	r2, [r3, #0]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	701a      	strb	r2, [r3, #0]
  /* data read so update number of entries */
  fifoCtrl[handle].entries--;
 8007a8e:	79fa      	ldrb	r2, [r7, #7]
 8007a90:	4928      	ldr	r1, [pc, #160]	; (8007b34 <UsbFifoMgrRead+0xf4>)
 8007a92:	4613      	mov	r3, r2
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	4413      	add	r3, r2
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	440b      	add	r3, r1
 8007a9c:	3311      	adds	r3, #17
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b2d8      	uxtb	r0, r3
 8007aa4:	4923      	ldr	r1, [pc, #140]	; (8007b34 <UsbFifoMgrRead+0xf4>)
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	4413      	add	r3, r2
 8007aac:	00db      	lsls	r3, r3, #3
 8007aae:	440b      	add	r3, r1
 8007ab0:	3311      	adds	r3, #17
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	701a      	strb	r2, [r3, #0]
  /* update read pointer */
  fifoCtrl[handle].readptr++;
 8007ab6:	79fa      	ldrb	r2, [r7, #7]
 8007ab8:	491e      	ldr	r1, [pc, #120]	; (8007b34 <UsbFifoMgrRead+0xf4>)
 8007aba:	4613      	mov	r3, r2
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	4413      	add	r3, r2
 8007ac0:	00db      	lsls	r3, r3, #3
 8007ac2:	440b      	add	r3, r1
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	1c59      	adds	r1, r3, #1
 8007aca:	481a      	ldr	r0, [pc, #104]	; (8007b34 <UsbFifoMgrRead+0xf4>)
 8007acc:	4613      	mov	r3, r2
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	4413      	add	r3, r2
 8007ad2:	00db      	lsls	r3, r3, #3
 8007ad4:	4403      	add	r3, r0
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	6019      	str	r1, [r3, #0]
  /* check end of fifo */
  if (fifoCtrl[handle].readptr > fifoCtrl[handle].endptr)
 8007ada:	79fa      	ldrb	r2, [r7, #7]
 8007adc:	4915      	ldr	r1, [pc, #84]	; (8007b34 <UsbFifoMgrRead+0xf4>)
 8007ade:	4613      	mov	r3, r2
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	4413      	add	r3, r2
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	440b      	add	r3, r1
 8007ae8:	3308      	adds	r3, #8
 8007aea:	6819      	ldr	r1, [r3, #0]
 8007aec:	79fa      	ldrb	r2, [r7, #7]
 8007aee:	4811      	ldr	r0, [pc, #68]	; (8007b34 <UsbFifoMgrRead+0xf4>)
 8007af0:	4613      	mov	r3, r2
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	4413      	add	r3, r2
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	4403      	add	r3, r0
 8007afa:	3304      	adds	r3, #4
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4299      	cmp	r1, r3
 8007b00:	d910      	bls.n	8007b24 <UsbFifoMgrRead+0xe4>
  {
    /* set read pointer to start of the cyclic fifo */
    fifoCtrl[handle].readptr = fifoCtrl[handle].startptr;
 8007b02:	79f9      	ldrb	r1, [r7, #7]
 8007b04:	79fa      	ldrb	r2, [r7, #7]
 8007b06:	480b      	ldr	r0, [pc, #44]	; (8007b34 <UsbFifoMgrRead+0xf4>)
 8007b08:	460b      	mov	r3, r1
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	440b      	add	r3, r1
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	4403      	add	r3, r0
 8007b12:	6819      	ldr	r1, [r3, #0]
 8007b14:	4807      	ldr	r0, [pc, #28]	; (8007b34 <UsbFifoMgrRead+0xf4>)
 8007b16:	4613      	mov	r3, r2
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	4413      	add	r3, r2
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	4403      	add	r3, r0
 8007b20:	3308      	adds	r3, #8
 8007b22:	6019      	str	r1, [r3, #0]
  }
  /* still here so all is good */
  return BLT_TRUE;
 8007b24:	2301      	movs	r3, #1
} /*** end of UsbFifoMgrRead ***/
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	080092d0 	.word	0x080092d0
 8007b34:	20000b78 	.word	0x20000b78

08007b38 <UsbFifoMgrScan>:
** \param     handle Identifies the fifo that is to be scanned.
** \return    Number of data entries in the fifo if successful, otherwise 0.
**
****************************************************************************************/
static blt_int8u UsbFifoMgrScan(blt_int8u handle)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	71fb      	strb	r3, [r7, #7]
  /* check the validity of the handle parameter */
  ASSERT_RT(handle < FIFO_MAX_BUFFERS);
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d904      	bls.n	8007b52 <UsbFifoMgrScan+0x1a>
 8007b48:	f240 2102 	movw	r1, #514	; 0x202
 8007b4c:	4807      	ldr	r0, [pc, #28]	; (8007b6c <UsbFifoMgrScan+0x34>)
 8007b4e:	f000 f811 	bl	8007b74 <AssertFailure>
  /* read and return the number of data entries */
  return fifoCtrl[handle].entries;
 8007b52:	79fa      	ldrb	r2, [r7, #7]
 8007b54:	4906      	ldr	r1, [pc, #24]	; (8007b70 <UsbFifoMgrScan+0x38>)
 8007b56:	4613      	mov	r3, r2
 8007b58:	005b      	lsls	r3, r3, #1
 8007b5a:	4413      	add	r3, r2
 8007b5c:	00db      	lsls	r3, r3, #3
 8007b5e:	440b      	add	r3, r1
 8007b60:	3311      	adds	r3, #17
 8007b62:	781b      	ldrb	r3, [r3, #0]
} /*** end of UsbFifoMgrScan ***/
 8007b64:	4618      	mov	r0, r3
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	080092d0 	.word	0x080092d0
 8007b70:	20000b78 	.word	0x20000b78

08007b74 <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 8007b7e:	f000 f951 	bl	8007e24 <CopService>
 8007b82:	e7fc      	b.n	8007b7e <AssertFailure+0xa>

08007b84 <BackDoorInit>:
** \brief     Initializes the backdoor entry option.
** \return    none
**
****************************************************************************************/
void BackDoorInit(void)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	af00      	add	r7, sp, #0
    FileHandleFirmwareUpdateRequest();
  }
#endif
#else
  /* open the backdoor after a reset */
  backdoorOpen = BLT_TRUE;
 8007b88:	4b04      	ldr	r3, [pc, #16]	; (8007b9c <BackDoorInit+0x18>)
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 8007b8e:	f000 f849 	bl	8007c24 <BackDoorRestartTimer>
#endif
  /* perform the first check that open/closes the backdoor */
  BackDoorCheck();
 8007b92:	f000 f805 	bl	8007ba0 <BackDoorCheck>
} /*** end of BackDoorInit ***/
 8007b96:	bf00      	nop
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20000f8c 	.word	0x20000f8c

08007ba0 <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	af00      	add	r7, sp, #0
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 8007ba4:	f000 f926 	bl	8007df4 <ComIsConnected>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d015      	beq.n	8007bda <BackDoorCheck+0x3a>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 8007bae:	4b0c      	ldr	r3, [pc, #48]	; (8007be0 <BackDoorCheck+0x40>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d112      	bne.n	8007bdc <BackDoorCheck+0x3c>
  {
    /* check if the backdoor entry time window elapsed */
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 8007bb6:	f7ff fc9b 	bl	80074f0 <TimerGet>
 8007bba:	4601      	mov	r1, r0
 8007bbc:	4b09      	ldr	r3, [pc, #36]	; (8007be4 <BackDoorCheck+0x44>)
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	4b09      	ldr	r3, [pc, #36]	; (8007be8 <BackDoorCheck+0x48>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007bca:	4299      	cmp	r1, r3
 8007bcc:	d306      	bcc.n	8007bdc <BackDoorCheck+0x3c>
    {
      /* close the backdoor */
      backdoorOpen = BLT_FALSE;
 8007bce:	4b04      	ldr	r3, [pc, #16]	; (8007be0 <BackDoorCheck+0x40>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	701a      	strb	r2, [r3, #0]
#endif
      {
        /* no firmware update requests detected, so attempt to start the user program.
         * this function does not return if a valid user program is present.
         */
        CpuStartUserProgram();
 8007bd4:	f7fe ff06 	bl	80069e4 <CpuStartUserProgram>
 8007bd8:	e000      	b.n	8007bdc <BackDoorCheck+0x3c>
    return;
 8007bda:	bf00      	nop
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	20000f8c 	.word	0x20000f8c
 8007be4:	20000f94 	.word	0x20000f94
 8007be8:	20000f90 	.word	0x20000f90

08007bec <BackDoorSetExtension>:
** \param     extension_ms Extension time in milliseconds.
** \return    none
**
****************************************************************************************/
void BackDoorSetExtension(blt_int32u extension_ms)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* update the extension time */
  backdoorExtensionTime = extension_ms;
 8007bf4:	4a04      	ldr	r2, [pc, #16]	; (8007c08 <BackDoorSetExtension+0x1c>)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6013      	str	r3, [r2, #0]
} /*** end of BackDoorSetExtension ***/
 8007bfa:	bf00      	nop
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	20000f94 	.word	0x20000f94

08007c0c <BackDoorGetExtension>:
**            (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS) is extended.
** \return    Extension time in milliseconds.
**
****************************************************************************************/
blt_int32u BackDoorGetExtension(void)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	af00      	add	r7, sp, #0
  /* read out and reutrn the currently configured extension time */
  return backdoorExtensionTime;
 8007c10:	4b03      	ldr	r3, [pc, #12]	; (8007c20 <BackDoorGetExtension+0x14>)
 8007c12:	681b      	ldr	r3, [r3, #0]
} /*** end of BackDoorGetExtension ***/
 8007c14:	4618      	mov	r0, r3
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	20000f94 	.word	0x20000f94

08007c24 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 8007c28:	4b05      	ldr	r3, [pc, #20]	; (8007c40 <BackDoorRestartTimer+0x1c>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d104      	bne.n	8007c3a <BackDoorRestartTimer+0x16>
  {
    backdoorOpenTime = TimerGet();
 8007c30:	f7ff fc5e 	bl	80074f0 <TimerGet>
 8007c34:	4603      	mov	r3, r0
 8007c36:	4a03      	ldr	r2, [pc, #12]	; (8007c44 <BackDoorRestartTimer+0x20>)
 8007c38:	6013      	str	r3, [r2, #0]
  }
} /*** end of BackDoorRestartTimer ***/
 8007c3a:	bf00      	nop
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	20000f8c 	.word	0x20000f8c
 8007c44:	20000f90 	.word	0x20000f90

08007c48 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	af00      	add	r7, sp, #0
  /* initialize the CPU */
  CpuInit();
 8007c4c:	f7fe fec3 	bl	80069d6 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 8007c50:	f000 f8e1 	bl	8007e16 <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 8007c54:	f7ff fc0c 	bl	8007470 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 8007c58:	f7ff fa72 	bl	8007140 <NvmInit>
  /* initialize the file system module */
  FileInit();
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 8007c5c:	f000 f810 	bl	8007c80 <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 8007c60:	f7ff ff90 	bl	8007b84 <BackDoorInit>
} /*** end of BootInit ***/
 8007c64:	bf00      	nop
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
  /* service the watchdog */
  CopService();
 8007c6c:	f000 f8da 	bl	8007e24 <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8007c70:	f7ff fc28 	bl	80074c4 <TimerUpdate>
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 8007c74:	f000 f816 	bl	8007ca4 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 8007c78:	f7ff ff92 	bl	8007ba0 <BackDoorCheck>
} /*** end of BootTask ***/
 8007c7c:	bf00      	nop
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	af00      	add	r7, sp, #0
  /* initialize the XCP communication protocol */
  XcpInit();
 8007c84:	f000 f8d6 	bl	8007e34 <XcpInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* initialize the RS232 interface */
  Rs232Init();
 8007c88:	f7ff fafc 	bl	8007284 <Rs232Init>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
 8007c8c:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <ComInit+0x20>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	701a      	strb	r2, [r3, #0]
#endif
#if (BOOT_COM_USB_ENABLE > 0)
  /* initialize the USB interface */
  UsbInit();
 8007c92:	f7ff fc3f 	bl	8007514 <UsbInit>
  /* set it as active */
  comActiveInterface = COM_IF_USB;
 8007c96:	4b02      	ldr	r3, [pc, #8]	; (8007ca0 <ComInit+0x20>)
 8007c98:	2202      	movs	r2, #2
 8007c9a:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 8007c9c:	bf00      	nop
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20000009 	.word	0x20000009

08007ca4 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  if (Rs232ReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 8007caa:	1dfb      	adds	r3, r7, #7
 8007cac:	4619      	mov	r1, r3
 8007cae:	4811      	ldr	r0, [pc, #68]	; (8007cf4 <ComTask+0x50>)
 8007cb0:	f7ff fb38 	bl	8007324 <Rs232ReceivePacket>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d107      	bne.n	8007cca <ComTask+0x26>
  {
    /* make this the active interface */
    comActiveInterface = COM_IF_RS232;
 8007cba:	4b0f      	ldr	r3, [pc, #60]	; (8007cf8 <ComTask+0x54>)
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	701a      	strb	r2, [r3, #0]
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	480b      	ldr	r0, [pc, #44]	; (8007cf4 <ComTask+0x50>)
 8007cc6:	f000 f8f7 	bl	8007eb8 <XcpPacketReceived>
  }
#endif
#if (BOOT_COM_USB_ENABLE > 0)
  if (UsbReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 8007cca:	1dfb      	adds	r3, r7, #7
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4809      	ldr	r0, [pc, #36]	; (8007cf4 <ComTask+0x50>)
 8007cd0:	f7ff fcc2 	bl	8007658 <UsbReceivePacket>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d107      	bne.n	8007cea <ComTask+0x46>
  {
    /* make this the active interface */
    comActiveInterface = COM_IF_USB;
 8007cda:	4b07      	ldr	r3, [pc, #28]	; (8007cf8 <ComTask+0x54>)
 8007cdc:	2202      	movs	r2, #2
 8007cde:	701a      	strb	r2, [r3, #0]
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8007ce0:	79fb      	ldrb	r3, [r7, #7]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4803      	ldr	r0, [pc, #12]	; (8007cf4 <ComTask+0x50>)
 8007ce6:	f000 f8e7 	bl	8007eb8 <XcpPacketReceived>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 8007cea:	bf00      	nop
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20000f98 	.word	0x20000f98
 8007cf8:	20000009 	.word	0x20000009

08007cfc <ComFree>:
** \brief     Releases the communication module.
** \return    none
**
****************************************************************************************/
void ComFree(void)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
 8007d00:	f7ff fc5a 	bl	80075b8 <UsbFree>
#endif
} /*** end of ComFree ***/
 8007d04:	bf00      	nop
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	807b      	strh	r3, [r7, #2]
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* transmit the packet. note that len is limited to 255 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_RS232)
 8007d14:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <ComTransmitPacket+0x40>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d105      	bne.n	8007d28 <ComTransmitPacket+0x20>
  {
    Rs232TransmitPacket(data, (blt_int8u)len);
 8007d1c:	887b      	ldrh	r3, [r7, #2]
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7ff fad2 	bl	80072cc <Rs232TransmitPacket>
  }
#endif
#if (BOOT_COM_USB_ENABLE > 0)
  /* transmit the packet */
  if (comActiveInterface == COM_IF_USB)
 8007d28:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <ComTransmitPacket+0x40>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d105      	bne.n	8007d3c <ComTransmitPacket+0x34>
  {
    UsbTransmitPacket(data, len);
 8007d30:	887b      	ldrh	r3, [r7, #2]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff fc50 	bl	80075dc <UsbTransmitPacket>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 8007d3c:	f000 f8ae 	bl	8007e9c <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	20000009 	.word	0x20000009

08007d4c <ComGetActiveInterfaceMaxRxLen>:
**            communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8007d52:	4b12      	ldr	r3, [pc, #72]	; (8007d9c <ComGetActiveInterfaceMaxRxLen+0x50>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d816      	bhi.n	8007d88 <ComGetActiveInterfaceMaxRxLen+0x3c>
 8007d5a:	a201      	add	r2, pc, #4	; (adr r2, 8007d60 <ComGetActiveInterfaceMaxRxLen+0x14>)
 8007d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d60:	08007d71 	.word	0x08007d71
 8007d64:	08007d77 	.word	0x08007d77
 8007d68:	08007d7d 	.word	0x08007d7d
 8007d6c:	08007d83 	.word	0x08007d83
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 8007d70:	2381      	movs	r3, #129	; 0x81
 8007d72:	80fb      	strh	r3, [r7, #6]
      break;
 8007d74:	e00b      	b.n	8007d8e <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
 8007d76:	2308      	movs	r3, #8
 8007d78:	80fb      	strh	r3, [r7, #6]
      break;
 8007d7a:	e008      	b.n	8007d8e <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 8007d7c:	233f      	movs	r3, #63	; 0x3f
 8007d7e:	80fb      	strh	r3, [r7, #6]
      break;
 8007d80:	e005      	b.n	8007d8e <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_NET:
      result = BOOT_COM_NET_RX_MAX_DATA;
 8007d82:	2300      	movs	r3, #0
 8007d84:	80fb      	strh	r3, [r7, #6]
      break;
 8007d86:	e002      	b.n	8007d8e <ComGetActiveInterfaceMaxRxLen+0x42>

    default:
      result = BOOT_COM_RX_MAX_DATA;
 8007d88:	2381      	movs	r3, #129	; 0x81
 8007d8a:	80fb      	strh	r3, [r7, #6]
      break;
 8007d8c:	bf00      	nop
  }

  return result;
 8007d8e:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 8007d90:	4618      	mov	r0, r3
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	20000009 	.word	0x20000009

08007da0 <ComGetActiveInterfaceMaxTxLen>:
**            specified communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8007da6:	4b12      	ldr	r3, [pc, #72]	; (8007df0 <ComGetActiveInterfaceMaxTxLen+0x50>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d816      	bhi.n	8007ddc <ComGetActiveInterfaceMaxTxLen+0x3c>
 8007dae:	a201      	add	r2, pc, #4	; (adr r2, 8007db4 <ComGetActiveInterfaceMaxTxLen+0x14>)
 8007db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db4:	08007dc5 	.word	0x08007dc5
 8007db8:	08007dcb 	.word	0x08007dcb
 8007dbc:	08007dd1 	.word	0x08007dd1
 8007dc0:	08007dd7 	.word	0x08007dd7
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 8007dc4:	2381      	movs	r3, #129	; 0x81
 8007dc6:	80fb      	strh	r3, [r7, #6]
      break;
 8007dc8:	e00b      	b.n	8007de2 <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
 8007dca:	2308      	movs	r3, #8
 8007dcc:	80fb      	strh	r3, [r7, #6]
      break;
 8007dce:	e008      	b.n	8007de2 <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 8007dd0:	233f      	movs	r3, #63	; 0x3f
 8007dd2:	80fb      	strh	r3, [r7, #6]
      break;
 8007dd4:	e005      	b.n	8007de2 <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_NET:
      result = BOOT_COM_NET_TX_MAX_DATA;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	80fb      	strh	r3, [r7, #6]
      break;
 8007dda:	e002      	b.n	8007de2 <ComGetActiveInterfaceMaxTxLen+0x42>

    default:
      result = BOOT_COM_TX_MAX_DATA;
 8007ddc:	2381      	movs	r3, #129	; 0x81
 8007dde:	80fb      	strh	r3, [r7, #6]
      break;
 8007de0:	bf00      	nop
  }

  return result;
 8007de2:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 8007de4:	4618      	mov	r0, r3
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	20000009 	.word	0x20000009

08007df4 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
  blt_bool result = BLT_FALSE;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	71fb      	strb	r3, [r7, #7]

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 8007dfe:	f000 f83b 	bl	8007e78 <XcpIsConnected>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <ComIsConnected+0x18>
  {
    result = BLT_TRUE;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	71fb      	strb	r3, [r7, #7]
  {
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
} /*** end of ComIsConnected ***/
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 8007e16:	b480      	push	{r7}
 8007e18:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
#endif
} /*** end of CopInit ***/
 8007e1a:	bf00      	nop
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 8007e24:	b480      	push	{r7}
 8007e26:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
#endif
} /*** end of CopService ***/
 8007e28:	bf00      	nop
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
	...

08007e34 <XcpInit>:
** \brief     Initializes the XCP driver. Should be called once upon system startup.
** \return    none
**
****************************************************************************************/
void XcpInit(void)
{
 8007e34:	b480      	push	{r7}
 8007e36:	af00      	add	r7, sp, #0
  /* reset xcp module info */
  xcpInfo.connected = 0;
 8007e38:	4b0e      	ldr	r3, [pc, #56]	; (8007e74 <XcpInit+0x40>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  xcpInfo.mta = 0;
 8007e40:	4b0c      	ldr	r3, [pc, #48]	; (8007e74 <XcpInit+0x40>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  xcpInfo.ctoPending = 0;
 8007e48:	4b0a      	ldr	r3, [pc, #40]	; (8007e74 <XcpInit+0x40>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  xcpInfo.ctoLen = 0;
 8007e50:	4b08      	ldr	r3, [pc, #32]	; (8007e74 <XcpInit+0x40>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  xcpInfo.s_n_k_resource = 0;
 8007e58:	4b06      	ldr	r3, [pc, #24]	; (8007e74 <XcpInit+0x40>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  xcpInfo.protection = 0;
 8007e60:	4b04      	ldr	r3, [pc, #16]	; (8007e74 <XcpInit+0x40>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
} /*** end of XcpInit ***/
 8007e68:	bf00      	nop
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	2000101c 	.word	0x2000101c

08007e78 <XcpIsConnected>:
** \brief     Obtains information about the XCP connection state.
** \return    BLT_TRUE is an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool XcpIsConnected(void)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	af00      	add	r7, sp, #0
  if (xcpInfo.connected == 0)
 8007e7c:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <XcpIsConnected+0x20>)
 8007e7e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <XcpIsConnected+0x12>
  {
    return BLT_FALSE;
 8007e86:	2300      	movs	r3, #0
 8007e88:	e000      	b.n	8007e8c <XcpIsConnected+0x14>
  }
  return BLT_TRUE;
 8007e8a:	2301      	movs	r3, #1
} /*** end of XcpIsConnected ***/
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	2000101c 	.word	0x2000101c

08007e9c <XcpPacketTransmitted>:
**            the transport layer.
** \return    none
**
****************************************************************************************/
void XcpPacketTransmitted(void)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
  /* reset packet transmission pending flag */
  xcpInfo.ctoPending = 0;
 8007ea0:	4b04      	ldr	r3, [pc, #16]	; (8007eb4 <XcpPacketTransmitted+0x18>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
} /*** end of XcpPacketTransmitted ***/
 8007ea8:	bf00      	nop
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	2000101c 	.word	0x2000101c

08007eb8 <XcpPacketReceived>:
** \param     len Number of bytes in the packet.
** \return    none
**
****************************************************************************************/
void XcpPacketReceived(blt_int8u *data, blt_int8u len)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
    /* packet processed by hook function so no need to continue. */
    return;
  }
#endif
  /* was this a connect command? */
  if (data[0] == XCP_CMD_CONNECT)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	2bff      	cmp	r3, #255	; 0xff
 8007eca:	d103      	bne.n	8007ed4 <XcpPacketReceived+0x1c>
  {
    /* process the connect command */
    XcpCmdConnect(data);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f979 	bl	80081c4 <XcpCmdConnect>
 8007ed2:	e0b7      	b.n	8008044 <XcpPacketReceived+0x18c>
  }
  /* only continue if connected */
  else if (xcpInfo.connected == 1)
 8007ed4:	4b6a      	ldr	r3, [pc, #424]	; (8008080 <XcpPacketReceived+0x1c8>)
 8007ed6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	f040 80cb 	bne.w	8008076 <XcpPacketReceived+0x1be>
  {
    switch (data[0])
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	3bc9      	subs	r3, #201	; 0xc9
 8007ee6:	2b35      	cmp	r3, #53	; 0x35
 8007ee8:	f200 80a8 	bhi.w	800803c <XcpPacketReceived+0x184>
 8007eec:	a201      	add	r2, pc, #4	; (adr r2, 8007ef4 <XcpPacketReceived+0x3c>)
 8007eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef2:	bf00      	nop
 8007ef4:	0800800d 	.word	0x0800800d
 8007ef8:	0800803d 	.word	0x0800803d
 8007efc:	0800803d 	.word	0x0800803d
 8007f00:	08008035 	.word	0x08008035
 8007f04:	0800803d 	.word	0x0800803d
 8007f08:	0800803d 	.word	0x0800803d
 8007f0c:	0800802d 	.word	0x0800802d
 8007f10:	08008015 	.word	0x08008015
 8007f14:	08008025 	.word	0x08008025
 8007f18:	0800801d 	.word	0x0800801d
 8007f1c:	0800803d 	.word	0x0800803d
 8007f20:	0800803d 	.word	0x0800803d
 8007f24:	0800803d 	.word	0x0800803d
 8007f28:	0800803d 	.word	0x0800803d
 8007f2c:	0800803d 	.word	0x0800803d
 8007f30:	0800803d 	.word	0x0800803d
 8007f34:	0800803d 	.word	0x0800803d
 8007f38:	0800803d 	.word	0x0800803d
 8007f3c:	0800803d 	.word	0x0800803d
 8007f40:	0800803d 	.word	0x0800803d
 8007f44:	0800803d 	.word	0x0800803d
 8007f48:	0800803d 	.word	0x0800803d
 8007f4c:	0800803d 	.word	0x0800803d
 8007f50:	0800803d 	.word	0x0800803d
 8007f54:	0800803d 	.word	0x0800803d
 8007f58:	0800803d 	.word	0x0800803d
 8007f5c:	0800803d 	.word	0x0800803d
 8007f60:	0800803d 	.word	0x0800803d
 8007f64:	0800803d 	.word	0x0800803d
 8007f68:	0800803d 	.word	0x0800803d
 8007f6c:	0800803d 	.word	0x0800803d
 8007f70:	0800803d 	.word	0x0800803d
 8007f74:	0800803d 	.word	0x0800803d
 8007f78:	0800803d 	.word	0x0800803d
 8007f7c:	0800803d 	.word	0x0800803d
 8007f80:	0800803d 	.word	0x0800803d
 8007f84:	0800803d 	.word	0x0800803d
 8007f88:	0800803d 	.word	0x0800803d
 8007f8c:	0800803d 	.word	0x0800803d
 8007f90:	0800803d 	.word	0x0800803d
 8007f94:	0800803d 	.word	0x0800803d
 8007f98:	0800803d 	.word	0x0800803d
 8007f9c:	08007fe5 	.word	0x08007fe5
 8007fa0:	08007fd5 	.word	0x08007fd5
 8007fa4:	08007fcd 	.word	0x08007fcd
 8007fa8:	08007fdd 	.word	0x08007fdd
 8007fac:	0800803d 	.word	0x0800803d
 8007fb0:	0800803d 	.word	0x0800803d
 8007fb4:	0800803d 	.word	0x0800803d
 8007fb8:	08007fed 	.word	0x08007fed
 8007fbc:	0800803d 	.word	0x0800803d
 8007fc0:	08007ff5 	.word	0x08007ff5
 8007fc4:	08007ffd 	.word	0x08007ffd
 8007fc8:	08008005 	.word	0x08008005
    {
      case XCP_CMD_UPLOAD:
        XcpCmdUpload(data);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f9c7 	bl	8008360 <XcpCmdUpload>
        break;
 8007fd2:	e037      	b.n	8008044 <XcpPacketReceived+0x18c>
      case XCP_CMD_SHORT_UPLOAD:
        XcpCmdShortUpload(data);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fa01 	bl	80083dc <XcpCmdShortUpload>
        break;
 8007fda:	e033      	b.n	8008044 <XcpPacketReceived+0x18c>
      case XCP_CMD_SET_MTA:
        XcpCmdSetMta(data);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f9a5 	bl	800832c <XcpCmdSetMta>
        break;
 8007fe2:	e02f      	b.n	8008044 <XcpPacketReceived+0x18c>
      case XCP_CMD_BUILD_CHECKSUM:
        XcpCmdBuildCheckSum(data);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fa41 	bl	800846c <XcpCmdBuildCheckSum>
        break;
 8007fea:	e02b      	b.n	8008044 <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_ID:
        XcpCmdGetId(data);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f975 	bl	80082dc <XcpCmdGetId>
        break;
 8007ff2:	e027      	b.n	8008044 <XcpPacketReceived+0x18c>
      case XCP_CMD_SYNCH:
        XcpCmdSynch(data);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f965 	bl	80082c4 <XcpCmdSynch>
        break;
 8007ffa:	e023      	b.n	8008044 <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_STATUS:
        XcpCmdGetStatus(data);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f93d 	bl	800827c <XcpCmdGetStatus>
        break;
 8008002:	e01f      	b.n	8008044 <XcpPacketReceived+0x18c>
      case XCP_CMD_DISCONNECT:
        XcpCmdDisconnect(data);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f921 	bl	800824c <XcpCmdDisconnect>
        break;
 800800a:	e01b      	b.n	8008044 <XcpPacketReceived+0x18c>
        XcpCmdDownloadMax(data);
        break;
#endif
#if (XCP_RES_PROGRAMMING_EN == 1)
      case XCP_CMD_PROGRAM_MAX:
        XcpCmdProgramMax(data);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fa87 	bl	8008520 <XcpCmdProgramMax>
        break;
 8008012:	e017      	b.n	8008044 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM:
        XcpCmdProgram(data);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fab3 	bl	8008580 <XcpCmdProgram>
        break;
 800801a:	e013      	b.n	8008044 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_START:
        XcpCmdProgramStart(data);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fa59 	bl	80084d4 <XcpCmdProgramStart>
        break;
 8008022:	e00f      	b.n	8008044 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_CLEAR:
        XcpCmdProgramClear(data);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 faf5 	bl	8008614 <XcpCmdProgramClear>
        break;
 800802a:	e00b      	b.n	8008044 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_RESET:
        XcpCmdProgramReset(data);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fb17 	bl	8008660 <XcpCmdProgramReset>
        break;
 8008032:	e007      	b.n	8008044 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_PREPARE:
        XcpCmdProgramPrepare(data);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fb27 	bl	8008688 <XcpCmdProgramPrepare>
        break;
 800803a:	e003      	b.n	8008044 <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_CAL_PAGE:
        XcpCmdGetCalPage(data);
        break;
#endif
      default:
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 800803c:	2020      	movs	r0, #32
 800803e:	f000 f85f 	bl	8008100 <XcpSetCtoError>
        break;
 8008042:	bf00      	nop
    /* return to make sure response packet is not send because we are not connected */
    return;
  }

  /* make sure the previous command was completed */
  if (xcpInfo.ctoPending == 1)
 8008044:	4b0e      	ldr	r3, [pc, #56]	; (8008080 <XcpPacketReceived+0x1c8>)
 8008046:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800804a:	2b01      	cmp	r3, #1
 800804c:	d102      	bne.n	8008054 <XcpPacketReceived+0x19c>
  {
    /* command overrun occurred */
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 800804e:	2010      	movs	r0, #16
 8008050:	f000 f856 	bl	8008100 <XcpSetCtoError>
  }

  /* send the response if it contains something */
  if (xcpInfo.ctoLen > 0)
 8008054:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <XcpPacketReceived+0x1c8>)
 8008056:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 800805a:	2b00      	cmp	r3, #0
 800805c:	dd0c      	ble.n	8008078 <XcpPacketReceived+0x1c0>
  {
    /* set cto packet transmission pending flag */
    xcpInfo.ctoPending = 1;
 800805e:	4b08      	ldr	r3, [pc, #32]	; (8008080 <XcpPacketReceived+0x1c8>)
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* transmit the cto response packet */
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 8008066:	4b06      	ldr	r3, [pc, #24]	; (8008080 <XcpPacketReceived+0x1c8>)
 8008068:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 800806c:	4619      	mov	r1, r3
 800806e:	4804      	ldr	r0, [pc, #16]	; (8008080 <XcpPacketReceived+0x1c8>)
 8008070:	f000 f808 	bl	8008084 <XcpTransmitPacket>
 8008074:	e000      	b.n	8008078 <XcpPacketReceived+0x1c0>
    return;
 8008076:	bf00      	nop
  }
} /*** end of XcpPacketReceived ***/
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	2000101c 	.word	0x2000101c

08008084 <XcpTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
static void XcpTransmitPacket(blt_int8u *data, blt_int16s len)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	460b      	mov	r3, r1
 800808e:	807b      	strh	r3, [r7, #2]
  /* submit packet to the communication interface for transmission */
#if (BOOT_COM_ENABLE == 0)
  XcpTransmitPacketHook(data, len);
#else
  ComTransmitPacket(data, len);
 8008090:	887b      	ldrh	r3, [r7, #2]
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff fe37 	bl	8007d08 <ComTransmitPacket>
#endif

} /*** end of XcpTransmitPacket ***/
 800809a:	bf00      	nop
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <XcpComputeChecksum>:
** \return    Checksum type that was used during the checksum calculation.
**
****************************************************************************************/
static blt_int8u XcpComputeChecksum(blt_int32u address, blt_int32u length,
                                    blt_int32u *checksum)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b086      	sub	sp, #24
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	60f8      	str	r0, [r7, #12]
 80080aa:	60b9      	str	r1, [r7, #8]
 80080ac:	607a      	str	r2, [r7, #4]
  blt_int8u cs = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	75fb      	strb	r3, [r7, #23]

  /* this example computes the checksum using the add byte to byte algorithm */
  while (length-- > 0)
 80080b2:	e009      	b.n	80080c8 <XcpComputeChecksum+0x26>
  {
    /* add the next byte value */
    cs += *((blt_int8u *)(blt_addr)address);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	781a      	ldrb	r2, [r3, #0]
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
 80080ba:	4413      	add	r3, r2
 80080bc:	75fb      	strb	r3, [r7, #23]
    /* increment address */
    address++;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3301      	adds	r3, #1
 80080c2:	60fb      	str	r3, [r7, #12]
    /* service the watchdog */
    CopService();
 80080c4:	f7ff feae 	bl	8007e24 <CopService>
  while (length-- > 0)
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	1e5a      	subs	r2, r3, #1
 80080cc:	60ba      	str	r2, [r7, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1f0      	bne.n	80080b4 <XcpComputeChecksum+0x12>
  }
  /* store the computed checksum value */
  *checksum = cs;
 80080d2:	7dfa      	ldrb	r2, [r7, #23]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	601a      	str	r2, [r3, #0]
  /* inform the caller of the uses checksum computation algorithm */
  return XCP_CS_ADD11;
 80080d8:	2301      	movs	r3, #1
} /*** end of XcpComputeChecksum ***/
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
	...

080080e4 <XcpProtectResources>:
** \brief     Utility function to protects all the available resources.
** \return    none
**
****************************************************************************************/
static void XcpProtectResources(void)
{
 80080e4:	b480      	push	{r7}
 80080e6:	af00      	add	r7, sp, #0
  xcpInfo.protection = 0;
 80080e8:	4b04      	ldr	r3, [pc, #16]	; (80080fc <XcpProtectResources+0x18>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 80080f0:	bf00      	nop
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	2000101c 	.word	0x2000101c

08008100 <XcpSetCtoError>:
** \param     error XCP error code (XCP_ERR_XXX).
** \return    none
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	4603      	mov	r3, r0
 8008108:	71fb      	strb	r3, [r7, #7]
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 800810a:	4b08      	ldr	r3, [pc, #32]	; (800812c <XcpSetCtoError+0x2c>)
 800810c:	22fe      	movs	r2, #254	; 0xfe
 800810e:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoData[1] = error;
 8008110:	4a06      	ldr	r2, [pc, #24]	; (800812c <XcpSetCtoError+0x2c>)
 8008112:	79fb      	ldrb	r3, [r7, #7]
 8008114:	7053      	strb	r3, [r2, #1]
  xcpInfo.ctoLen = 2;
 8008116:	4b05      	ldr	r3, [pc, #20]	; (800812c <XcpSetCtoError+0x2c>)
 8008118:	2202      	movs	r2, #2
 800811a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpSetCtoError ***/
 800811e:	bf00      	nop
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	2000101c 	.word	0x2000101c

08008130 <XcpGetOrderedLong>:
** \param     data Array to the buffer with the 32-bit value stored as bytes.
** \return    The 32-bit value.
**
****************************************************************************************/
static blt_int32u XcpGetOrderedLong(blt_int8u const * data)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  blt_int32u result = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	60fb      	str	r3, [r7, #12]

#if (BOOT_CPU_BYTE_ORDER_MOTOROLA	== 0)
  result |= (blt_int32u)data[0];
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	461a      	mov	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4313      	orrs	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[1] << 8);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3301      	adds	r3, #1
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	021b      	lsls	r3, r3, #8
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	4313      	orrs	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[2] << 16);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	3302      	adds	r3, #2
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	041b      	lsls	r3, r3, #16
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	4313      	orrs	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[3] << 24);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	3303      	adds	r3, #3
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	061b      	lsls	r3, r3, #24
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	4313      	orrs	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[2] << 8);
  result |= (blt_int32u)((blt_int32u)data[1] << 16);
  result |= (blt_int32u)((blt_int32u)data[0] << 24);
#endif
  /* Give the result back to the caller. */
  return result;
 8008172:	68fb      	ldr	r3, [r7, #12]
} /*** end of XcpGetOrderedLong ***/
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <XcpSetOrderedLong>:
** \param     value The 32-bit value to store in the buffer.
** \param     data Array to the buffer for storage.
**
****************************************************************************************/
static void XcpSetOrderedLong(blt_int32u value, blt_int8u *data)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
#if (BOOT_CPU_BYTE_ORDER_MOTOROLA	== 0)
  data[0] = (blt_int8u) value;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	b2da      	uxtb	r2, r3
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	701a      	strb	r2, [r3, #0]
  data[1] = (blt_int8u)(value >>  8);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	0a1a      	lsrs	r2, r3, #8
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	3301      	adds	r3, #1
 800819a:	b2d2      	uxtb	r2, r2
 800819c:	701a      	strb	r2, [r3, #0]
  data[2] = (blt_int8u)(value >> 16);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	0c1a      	lsrs	r2, r3, #16
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	3302      	adds	r3, #2
 80081a6:	b2d2      	uxtb	r2, r2
 80081a8:	701a      	strb	r2, [r3, #0]
  data[3] = (blt_int8u)(value >> 24);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	0e1a      	lsrs	r2, r3, #24
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	3303      	adds	r3, #3
 80081b2:	b2d2      	uxtb	r2, r2
 80081b4:	701a      	strb	r2, [r3, #0]
  data[3] = (blt_int8u) value;
  data[2] = (blt_int8u)(value >>  8);
  data[1] = (blt_int8u)(value >> 16);
  data[0] = (blt_int8u)(value >> 24);
#endif
} /*** end of XcpSetOrderedLong ***/
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
	...

080081c4 <XcpCmdConnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdConnect(blt_int8u *data)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* enable resource protection */
  XcpProtectResources();
 80081cc:	f7ff ff8a 	bl	80080e4 <XcpProtectResources>

  /* indicate that the connection is established */
  xcpInfo.connected = 1;
 80081d0:	4b1d      	ldr	r3, [pc, #116]	; (8008248 <XcpCmdConnect+0x84>)
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80081d8:	4b1b      	ldr	r3, [pc, #108]	; (8008248 <XcpCmdConnect+0x84>)
 80081da:	22ff      	movs	r2, #255	; 0xff
 80081dc:	701a      	strb	r2, [r3, #0]

  /* report available resources */
  xcpInfo.ctoData[1] = 0;
 80081de:	4b1a      	ldr	r3, [pc, #104]	; (8008248 <XcpCmdConnect+0x84>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	705a      	strb	r2, [r3, #1]
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 80081e4:	4b18      	ldr	r3, [pc, #96]	; (8008248 <XcpCmdConnect+0x84>)
 80081e6:	785b      	ldrb	r3, [r3, #1]
 80081e8:	f043 0310 	orr.w	r3, r3, #16
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	4b16      	ldr	r3, [pc, #88]	; (8008248 <XcpCmdConnect+0x84>)
 80081f0:	705a      	strb	r2, [r3, #1]
#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_STIM;
#endif

  /* report communication mode info. only byte granularity is supported */
  xcpInfo.ctoData[2] = 0;
 80081f2:	4b15      	ldr	r3, [pc, #84]	; (8008248 <XcpCmdConnect+0x84>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	709a      	strb	r2, [r3, #2]
  /* configure for motorola or intel byte ordering */
  xcpInfo.ctoData[2] |= XCP_MOTOROLA_FORMAT;
 80081f8:	4b13      	ldr	r3, [pc, #76]	; (8008248 <XcpCmdConnect+0x84>)
 80081fa:	789a      	ldrb	r2, [r3, #2]
 80081fc:	4b12      	ldr	r3, [pc, #72]	; (8008248 <XcpCmdConnect+0x84>)
 80081fe:	709a      	strb	r2, [r3, #2]

  /* report max cto data length */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8008200:	f7ff fda4 	bl	8007d4c <ComGetActiveInterfaceMaxRxLen>
 8008204:	4603      	mov	r3, r0
 8008206:	b2da      	uxtb	r2, r3
 8008208:	4b0f      	ldr	r3, [pc, #60]	; (8008248 <XcpCmdConnect+0x84>)
 800820a:	70da      	strb	r2, [r3, #3]

  /* report max dto data length */
#if (XCP_MOTOROLA_FORMAT == 0)
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 800820c:	f7ff fdc8 	bl	8007da0 <ComGetActiveInterfaceMaxTxLen>
 8008210:	4603      	mov	r3, r0
 8008212:	b2da      	uxtb	r2, r3
 8008214:	4b0c      	ldr	r3, [pc, #48]	; (8008248 <XcpCmdConnect+0x84>)
 8008216:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 8008218:	f7ff fdc2 	bl	8007da0 <ComGetActiveInterfaceMaxTxLen>
 800821c:	4603      	mov	r3, r0
 800821e:	0a1b      	lsrs	r3, r3, #8
 8008220:	b29b      	uxth	r3, r3
 8008222:	b2da      	uxtb	r2, r3
 8008224:	4b08      	ldr	r3, [pc, #32]	; (8008248 <XcpCmdConnect+0x84>)
 8008226:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[4] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
  xcpInfo.ctoData[5] = (blt_int8u)XCP_DTO_PACKET_LEN;
#endif

  /* report msb of protocol layer version number */
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 8008228:	4b07      	ldr	r3, [pc, #28]	; (8008248 <XcpCmdConnect+0x84>)
 800822a:	2201      	movs	r2, #1
 800822c:	719a      	strb	r2, [r3, #6]

  /* report msb of transport layer version number */
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 800822e:	4b06      	ldr	r3, [pc, #24]	; (8008248 <XcpCmdConnect+0x84>)
 8008230:	2201      	movs	r2, #1
 8008232:	71da      	strb	r2, [r3, #7]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8008234:	4b04      	ldr	r3, [pc, #16]	; (8008248 <XcpCmdConnect+0x84>)
 8008236:	2208      	movs	r2, #8
 8008238:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

  /* reinit the NVM driver because a new firmware update is about the start */
  NvmInit();
 800823c:	f7fe ff80 	bl	8007140 <NvmInit>
} /*** end of XcpCmdConnect ***/
 8008240:	bf00      	nop
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	2000101c 	.word	0x2000101c

0800824c <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 8008254:	4b08      	ldr	r3, [pc, #32]	; (8008278 <XcpCmdDisconnect+0x2c>)
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* enable resource protection */
  XcpProtectResources();
 800825c:	f7ff ff42 	bl	80080e4 <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8008260:	4b05      	ldr	r3, [pc, #20]	; (8008278 <XcpCmdDisconnect+0x2c>)
 8008262:	22ff      	movs	r2, #255	; 0xff
 8008264:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8008266:	4b04      	ldr	r3, [pc, #16]	; (8008278 <XcpCmdDisconnect+0x2c>)
 8008268:	2201      	movs	r2, #1
 800826a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdDisconnect ***/
 800826e:	bf00      	nop
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	2000101c 	.word	0x2000101c

0800827c <XcpCmdGetStatus>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetStatus(blt_int8u *data)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8008284:	4b0e      	ldr	r3, [pc, #56]	; (80082c0 <XcpCmdGetStatus+0x44>)
 8008286:	22ff      	movs	r2, #255	; 0xff
 8008288:	701a      	strb	r2, [r3, #0]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 800828a:	4b0d      	ldr	r3, [pc, #52]	; (80082c0 <XcpCmdGetStatus+0x44>)
 800828c:	2200      	movs	r2, #0
 800828e:	705a      	strb	r2, [r3, #1]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 8008290:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <XcpCmdGetStatus+0x44>)
 8008292:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8008296:	4b0a      	ldr	r3, [pc, #40]	; (80082c0 <XcpCmdGetStatus+0x44>)
 8008298:	709a      	strb	r2, [r3, #2]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 800829a:	4b09      	ldr	r3, [pc, #36]	; (80082c0 <XcpCmdGetStatus+0x44>)
 800829c:	2200      	movs	r2, #0
 800829e:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[4] = 0;
 80082a0:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <XcpCmdGetStatus+0x44>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 80082a6:	4b06      	ldr	r3, [pc, #24]	; (80082c0 <XcpCmdGetStatus+0x44>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	715a      	strb	r2, [r3, #5]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 80082ac:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <XcpCmdGetStatus+0x44>)
 80082ae:	2206      	movs	r2, #6
 80082b0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdGetStatus ***/
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	2000101c 	.word	0x2000101c

080082c4 <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 80082cc:	2000      	movs	r0, #0
 80082ce:	f7ff ff17 	bl	8008100 <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 80082d2:	bf00      	nop
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <XcpCmdGetId>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetId(blt_int8u *data)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80082e4:	4b0e      	ldr	r3, [pc, #56]	; (8008320 <XcpCmdGetId+0x44>)
 80082e6:	22ff      	movs	r2, #255	; 0xff
 80082e8:	701a      	strb	r2, [r3, #0]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 80082ea:	4a0e      	ldr	r2, [pc, #56]	; (8008324 <XcpCmdGetId+0x48>)
 80082ec:	4b0c      	ldr	r3, [pc, #48]	; (8008320 <XcpCmdGetId+0x44>)
 80082ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 80082f2:	4b0b      	ldr	r3, [pc, #44]	; (8008320 <XcpCmdGetId+0x44>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	705a      	strb	r2, [r3, #1]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 80082f8:	4b09      	ldr	r3, [pc, #36]	; (8008320 <XcpCmdGetId+0x44>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	709a      	strb	r2, [r3, #2]
  xcpInfo.ctoData[3] = 0;
 80082fe:	4b08      	ldr	r3, [pc, #32]	; (8008320 <XcpCmdGetId+0x44>)
 8008300:	2200      	movs	r2, #0
 8008302:	70da      	strb	r2, [r3, #3]

  /* store station id length (excl. null termination) for response packet */
  stationIdLen = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 8008304:	2307      	movs	r3, #7
 8008306:	60fb      	str	r3, [r7, #12]
  XcpSetOrderedLong(stationIdLen, &xcpInfo.ctoData[4]);
 8008308:	4907      	ldr	r1, [pc, #28]	; (8008328 <XcpCmdGetId+0x4c>)
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f7ff ff38 	bl	8008180 <XcpSetOrderedLong>

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8008310:	4b03      	ldr	r3, [pc, #12]	; (8008320 <XcpCmdGetId+0x44>)
 8008312:	2208      	movs	r2, #8
 8008314:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdGetId ***/
 8008318:	bf00      	nop
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	2000101c 	.word	0x2000101c
 8008324:	080093b8 	.word	0x080093b8
 8008328:	20001020 	.word	0x20001020

0800832c <XcpCmdSetMta>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8008334:	4b09      	ldr	r3, [pc, #36]	; (800835c <XcpCmdSetMta+0x30>)
 8008336:	22ff      	movs	r2, #255	; 0xff
 8008338:	701a      	strb	r2, [r3, #0]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	3304      	adds	r3, #4
 800833e:	4618      	mov	r0, r3
 8008340:	f7ff fef6 	bl	8008130 <XcpGetOrderedLong>
 8008344:	4603      	mov	r3, r0
 8008346:	4a05      	ldr	r2, [pc, #20]	; (800835c <XcpCmdSetMta+0x30>)
 8008348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800834c:	4b03      	ldr	r3, [pc, #12]	; (800835c <XcpCmdSetMta+0x30>)
 800834e:	2201      	movs	r2, #1
 8008350:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdSetMta ***/
 8008354:	bf00      	nop
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	2000101c 	.word	0x2000101c

08008360 <XcpCmdUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUpload(blt_int8u *data)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8008368:	f7ff fcf0 	bl	8007d4c <ComGetActiveInterfaceMaxRxLen>
 800836c:	4603      	mov	r3, r0
 800836e:	461a      	mov	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3301      	adds	r3, #1
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	b29b      	uxth	r3, r3
 8008378:	429a      	cmp	r2, r3
 800837a:	d803      	bhi.n	8008384 <XcpCmdUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800837c:	2022      	movs	r0, #34	; 0x22
 800837e:	f7ff febf 	bl	8008100 <XcpSetCtoError>
    return;
 8008382:	e024      	b.n	80083ce <XcpCmdUpload+0x6e>
  }

  /* read out the length of the requested upload operation */
  len = data[1];
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	3301      	adds	r3, #1
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 800838c:	4b11      	ldr	r3, [pc, #68]	; (80083d4 <XcpCmdUpload+0x74>)
 800838e:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	4a11      	ldr	r2, [pc, #68]	; (80083d8 <XcpCmdUpload+0x78>)
 8008394:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8008398:	89fa      	ldrh	r2, [r7, #14]
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fb52 	bl	8006a44 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80083a0:	4b0d      	ldr	r3, [pc, #52]	; (80083d8 <XcpCmdUpload+0x78>)
 80083a2:	22ff      	movs	r2, #255	; 0xff
 80083a4:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 80083a6:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <XcpCmdUpload+0x78>)
 80083a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	3201      	adds	r2, #1
 80083b0:	7812      	ldrb	r2, [r2, #0]
 80083b2:	4413      	add	r3, r2
 80083b4:	4a08      	ldr	r2, [pc, #32]	; (80083d8 <XcpCmdUpload+0x78>)
 80083b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3301      	adds	r3, #1
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	3301      	adds	r3, #1
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	b21a      	sxth	r2, r3
 80083c8:	4b03      	ldr	r3, [pc, #12]	; (80083d8 <XcpCmdUpload+0x78>)
 80083ca:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdUpload ***/
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	2000101d 	.word	0x2000101d
 80083d8:	2000101c 	.word	0x2000101c

080083dc <XcpCmdShortUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdShortUpload(blt_int8u *data)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 80083e4:	f7ff fcb2 	bl	8007d4c <ComGetActiveInterfaceMaxRxLen>
 80083e8:	4603      	mov	r3, r0
 80083ea:	461a      	mov	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3301      	adds	r3, #1
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d803      	bhi.n	8008400 <XcpCmdShortUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80083f8:	2022      	movs	r0, #34	; 0x22
 80083fa:	f7ff fe81 	bl	8008100 <XcpSetCtoError>
    return;
 80083fe:	e02d      	b.n	800845c <XcpCmdShortUpload+0x80>
  }

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3304      	adds	r3, #4
 8008404:	4618      	mov	r0, r3
 8008406:	f7ff fe93 	bl	8008130 <XcpGetOrderedLong>
 800840a:	4603      	mov	r3, r0
 800840c:	4a15      	ldr	r2, [pc, #84]	; (8008464 <XcpCmdShortUpload+0x88>)
 800840e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* read out the length of the requested upload operation */
  len = data[1];
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	3301      	adds	r3, #1
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 800841a:	4b13      	ldr	r3, [pc, #76]	; (8008468 <XcpCmdShortUpload+0x8c>)
 800841c:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	4a10      	ldr	r2, [pc, #64]	; (8008464 <XcpCmdShortUpload+0x88>)
 8008422:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8008426:	89fa      	ldrh	r2, [r7, #14]
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe fb0b 	bl	8006a44 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800842e:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <XcpCmdShortUpload+0x88>)
 8008430:	22ff      	movs	r2, #255	; 0xff
 8008432:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8008434:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <XcpCmdShortUpload+0x88>)
 8008436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	3201      	adds	r2, #1
 800843e:	7812      	ldrb	r2, [r2, #0]
 8008440:	4413      	add	r3, r2
 8008442:	4a08      	ldr	r2, [pc, #32]	; (8008464 <XcpCmdShortUpload+0x88>)
 8008444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	3301      	adds	r3, #1
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	b29b      	uxth	r3, r3
 8008450:	3301      	adds	r3, #1
 8008452:	b29b      	uxth	r3, r3
 8008454:	b21a      	sxth	r2, r3
 8008456:	4b03      	ldr	r3, [pc, #12]	; (8008464 <XcpCmdShortUpload+0x88>)
 8008458:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdShortUpload ***/
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	2000101c 	.word	0x2000101c
 8008468:	2000101d 	.word	0x2000101d

0800846c <XcpCmdBuildCheckSum>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdBuildCheckSum(blt_int8u *data)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  blt_int32u checksumLen;
  blt_int32u checksumVal = 0;
 8008474:	2300      	movs	r3, #0
 8008476:	60fb      	str	r3, [r7, #12]
  blt_int8u  checksumType;
  
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8008478:	4b14      	ldr	r3, [pc, #80]	; (80084cc <XcpCmdBuildCheckSum+0x60>)
 800847a:	22ff      	movs	r2, #255	; 0xff
 800847c:	701a      	strb	r2, [r3, #0]

  /* obtain checksum and checksum type */
  checksumLen = XcpGetOrderedLong(&data[4]);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	3304      	adds	r3, #4
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff fe54 	bl	8008130 <XcpGetOrderedLong>
 8008488:	6178      	str	r0, [r7, #20]
  checksumType = XcpComputeChecksum(xcpInfo.mta, checksumLen, &checksumVal);
 800848a:	4b10      	ldr	r3, [pc, #64]	; (80084cc <XcpCmdBuildCheckSum+0x60>)
 800848c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008490:	f107 020c 	add.w	r2, r7, #12
 8008494:	6979      	ldr	r1, [r7, #20]
 8008496:	4618      	mov	r0, r3
 8008498:	f7ff fe03 	bl	80080a2 <XcpComputeChecksum>
 800849c:	4603      	mov	r3, r0
 800849e:	74fb      	strb	r3, [r7, #19]
  xcpInfo.ctoData[1] = checksumType;
 80084a0:	4a0a      	ldr	r2, [pc, #40]	; (80084cc <XcpCmdBuildCheckSum+0x60>)
 80084a2:	7cfb      	ldrb	r3, [r7, #19]
 80084a4:	7053      	strb	r3, [r2, #1]
  XcpSetOrderedLong(checksumVal, &xcpInfo.ctoData[4]);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	4909      	ldr	r1, [pc, #36]	; (80084d0 <XcpCmdBuildCheckSum+0x64>)
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7ff fe68 	bl	8008180 <XcpSetOrderedLong>

  /* initialize reserved parameters */
  xcpInfo.ctoData[2] = 0;
 80084b0:	4b06      	ldr	r3, [pc, #24]	; (80084cc <XcpCmdBuildCheckSum+0x60>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	709a      	strb	r2, [r3, #2]
  xcpInfo.ctoData[3] = 0;
 80084b6:	4b05      	ldr	r3, [pc, #20]	; (80084cc <XcpCmdBuildCheckSum+0x60>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 80084bc:	4b03      	ldr	r3, [pc, #12]	; (80084cc <XcpCmdBuildCheckSum+0x60>)
 80084be:	2208      	movs	r2, #8
 80084c0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdBuildCheckSum ***/
 80084c4:	bf00      	nop
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	2000101c 	.word	0x2000101c
 80084d0:	20001020 	.word	0x20001020

080084d4 <XcpCmdProgramStart>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramStart(blt_int8u *data)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80084dc:	4b0f      	ldr	r3, [pc, #60]	; (800851c <XcpCmdProgramStart+0x48>)
 80084de:	22ff      	movs	r2, #255	; 0xff
 80084e0:	701a      	strb	r2, [r3, #0]

  /* initialize reserved parameter */
  xcpInfo.ctoData[1] = 0;
 80084e2:	4b0e      	ldr	r3, [pc, #56]	; (800851c <XcpCmdProgramStart+0x48>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	705a      	strb	r2, [r3, #1]

  /* no special communication mode supported during programming */
  xcpInfo.ctoData[2] = 0;
 80084e8:	4b0c      	ldr	r3, [pc, #48]	; (800851c <XcpCmdProgramStart+0x48>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	709a      	strb	r2, [r3, #2]

  /* cto packet length stays the same during programming */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 80084ee:	f7ff fc2d 	bl	8007d4c <ComGetActiveInterfaceMaxRxLen>
 80084f2:	4603      	mov	r3, r0
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	4b09      	ldr	r3, [pc, #36]	; (800851c <XcpCmdProgramStart+0x48>)
 80084f8:	70da      	strb	r2, [r3, #3]

  /* no block size, st-min time, or queue size supported */
  xcpInfo.ctoData[4] = 0;
 80084fa:	4b08      	ldr	r3, [pc, #32]	; (800851c <XcpCmdProgramStart+0x48>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 8008500:	4b06      	ldr	r3, [pc, #24]	; (800851c <XcpCmdProgramStart+0x48>)
 8008502:	2200      	movs	r2, #0
 8008504:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[6] = 0;
 8008506:	4b05      	ldr	r3, [pc, #20]	; (800851c <XcpCmdProgramStart+0x48>)
 8008508:	2200      	movs	r2, #0
 800850a:	719a      	strb	r2, [r3, #6]

  /* set packet length */
  xcpInfo.ctoLen = 7;
 800850c:	4b03      	ldr	r3, [pc, #12]	; (800851c <XcpCmdProgramStart+0x48>)
 800850e:	2207      	movs	r2, #7
 8008510:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramStart ***/
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	2000101c 	.word	0x2000101c

08008520 <XcpCmdProgramMax>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramMax(blt_int8u *data)
{
 8008520:	b590      	push	{r4, r7, lr}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 8008528:	4b14      	ldr	r3, [pc, #80]	; (800857c <XcpCmdProgramMax+0x5c>)
 800852a:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800852e:	f7ff fc0d 	bl	8007d4c <ComGetActiveInterfaceMaxRxLen>
 8008532:	4603      	mov	r3, r0
 8008534:	3b01      	subs	r3, #1
 8008536:	4619      	mov	r1, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3301      	adds	r3, #1
 800853c:	461a      	mov	r2, r3
 800853e:	4620      	mov	r0, r4
 8008540:	f7fe fe04 	bl	800714c <NvmWrite>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d103      	bne.n	8008552 <XcpCmdProgramMax+0x32>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 800854a:	2031      	movs	r0, #49	; 0x31
 800854c:	f7ff fdd8 	bl	8008100 <XcpSetCtoError>
    return;
 8008550:	e011      	b.n	8008576 <XcpCmdProgramMax+0x56>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8008552:	4b0a      	ldr	r3, [pc, #40]	; (800857c <XcpCmdProgramMax+0x5c>)
 8008554:	22ff      	movs	r2, #255	; 0xff
 8008556:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8008558:	f7ff fbf8 	bl	8007d4c <ComGetActiveInterfaceMaxRxLen>
 800855c:	4603      	mov	r3, r0
 800855e:	1e5a      	subs	r2, r3, #1
 8008560:	4b06      	ldr	r3, [pc, #24]	; (800857c <XcpCmdProgramMax+0x5c>)
 8008562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008566:	4413      	add	r3, r2
 8008568:	4a04      	ldr	r2, [pc, #16]	; (800857c <XcpCmdProgramMax+0x5c>)
 800856a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800856e:	4b03      	ldr	r3, [pc, #12]	; (800857c <XcpCmdProgramMax+0x5c>)
 8008570:	2201      	movs	r2, #1
 8008572:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramMax ***/
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	bd90      	pop	{r4, r7, pc}
 800857c:	2000101c 	.word	0x2000101c

08008580 <XcpCmdProgram>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgram(blt_int8u *data)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* validate length of download request */
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 8008588:	f7ff fbe0 	bl	8007d4c <ComGetActiveInterfaceMaxRxLen>
 800858c:	4603      	mov	r3, r0
 800858e:	3b01      	subs	r3, #1
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	3201      	adds	r2, #1
 8008594:	7812      	ldrb	r2, [r2, #0]
 8008596:	4293      	cmp	r3, r2
 8008598:	dc03      	bgt.n	80085a2 <XcpCmdProgram+0x22>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800859a:	2022      	movs	r0, #34	; 0x22
 800859c:	f7ff fdb0 	bl	8008100 <XcpSetCtoError>
    return;
 80085a0:	e033      	b.n	800860a <XcpCmdProgram+0x8a>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80085a2:	4b1b      	ldr	r3, [pc, #108]	; (8008610 <XcpCmdProgram+0x90>)
 80085a4:	22ff      	movs	r2, #255	; 0xff
 80085a6:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80085a8:	4b19      	ldr	r3, [pc, #100]	; (8008610 <XcpCmdProgram+0x90>)
 80085aa:	2201      	movs	r2, #1
 80085ac:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

  /* end of programming sequence (datasize is 0)? */
  if (data[1] == 0)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	3301      	adds	r3, #1
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d108      	bne.n	80085cc <XcpCmdProgram+0x4c>
  {
    /* call erase/programming cleanup routine */
    if (NvmDone() == BLT_FALSE)
 80085ba:	f7fe fdf3 	bl	80071a4 <NvmDone>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d121      	bne.n	8008608 <XcpCmdProgram+0x88>
    {
      /* error occurred while finishing up programming */
      XcpSetCtoError(XCP_ERR_GENERIC);
 80085c4:	2031      	movs	r0, #49	; 0x31
 80085c6:	f7ff fd9b 	bl	8008100 <XcpSetCtoError>
    }
    return;
 80085ca:	e01d      	b.n	8008608 <XcpCmdProgram+0x88>
  }
  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 80085cc:	4b10      	ldr	r3, [pc, #64]	; (8008610 <XcpCmdProgram+0x90>)
 80085ce:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	3301      	adds	r3, #1
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	4619      	mov	r1, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	3302      	adds	r3, #2
 80085de:	461a      	mov	r2, r3
 80085e0:	f7fe fdb4 	bl	800714c <NvmWrite>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d103      	bne.n	80085f2 <XcpCmdProgram+0x72>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 80085ea:	2031      	movs	r0, #49	; 0x31
 80085ec:	f7ff fd88 	bl	8008100 <XcpSetCtoError>
    return;
 80085f0:	e00b      	b.n	800860a <XcpCmdProgram+0x8a>
  }

  /* post increment the mta */
  xcpInfo.mta += data[1];
 80085f2:	4b07      	ldr	r3, [pc, #28]	; (8008610 <XcpCmdProgram+0x90>)
 80085f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	3201      	adds	r2, #1
 80085fc:	7812      	ldrb	r2, [r2, #0]
 80085fe:	4413      	add	r3, r2
 8008600:	4a03      	ldr	r2, [pc, #12]	; (8008610 <XcpCmdProgram+0x90>)
 8008602:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8008606:	e000      	b.n	800860a <XcpCmdProgram+0x8a>
    return;
 8008608:	bf00      	nop
} /*** end of XcpCmdProgram ***/
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	2000101c 	.word	0x2000101c

08008614 <XcpCmdProgramClear>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramClear(blt_int8u *data)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* erase the memory */
  eraseAddr = xcpInfo.mta;
 800861c:	4b0f      	ldr	r3, [pc, #60]	; (800865c <XcpCmdProgramClear+0x48>)
 800861e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008622:	60fb      	str	r3, [r7, #12]
  eraseLen = XcpGetOrderedLong(&data[4]);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3304      	adds	r3, #4
 8008628:	4618      	mov	r0, r3
 800862a:	f7ff fd81 	bl	8008130 <XcpGetOrderedLong>
 800862e:	60b8      	str	r0, [r7, #8]
  if (NvmErase(eraseAddr, eraseLen) == BLT_FALSE)
 8008630:	68b9      	ldr	r1, [r7, #8]
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f7fe fd9a 	bl	800716c <NvmErase>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d103      	bne.n	8008646 <XcpCmdProgramClear+0x32>
  {
    /* error occurred during erasure */
    XcpSetCtoError(XCP_ERR_GENERIC);
 800863e:	2031      	movs	r0, #49	; 0x31
 8008640:	f7ff fd5e 	bl	8008100 <XcpSetCtoError>
    return;
 8008644:	e006      	b.n	8008654 <XcpCmdProgramClear+0x40>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8008646:	4b05      	ldr	r3, [pc, #20]	; (800865c <XcpCmdProgramClear+0x48>)
 8008648:	22ff      	movs	r2, #255	; 0xff
 800864a:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800864c:	4b03      	ldr	r3, [pc, #12]	; (800865c <XcpCmdProgramClear+0x48>)
 800864e:	2201      	movs	r2, #1
 8008650:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramClear ***/
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	2000101c 	.word	0x2000101c

08008660 <XcpCmdProgramReset>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramReset(blt_int8u *data)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
#endif

  /* reset the ecu after programming is done. so basically, just start the newly programmed
   * firmware. it is okay if the code does not return here. 
   */
  CpuStartUserProgram();
 8008668:	f7fe f9bc 	bl	80069e4 <CpuStartUserProgram>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800866c:	4b05      	ldr	r3, [pc, #20]	; (8008684 <XcpCmdProgramReset+0x24>)
 800866e:	22ff      	movs	r2, #255	; 0xff
 8008670:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8008672:	4b04      	ldr	r3, [pc, #16]	; (8008684 <XcpCmdProgramReset+0x24>)
 8008674:	2201      	movs	r2, #1
 8008676:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramReset ***/
 800867a:	bf00      	nop
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	2000101c 	.word	0x2000101c

08008688 <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 8008690:	2031      	movs	r0, #49	; 0x31
 8008692:	f7ff fd35 	bl	8008100 <XcpSetCtoError>
  return;
 8008696:	bf00      	nop
} /*** end of XcpCmdProgramPrepare ***/
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
	...

080086a0 <USBD_Bulk_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Bulk_Init (USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 80086b0:	2340      	movs	r3, #64	; 0x40
 80086b2:	2202      	movs	r2, #2
 80086b4:	2181      	movs	r1, #129	; 0x81
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fbf0 	bl	8008e9c <USBD_LL_OpenEP>
                 BULK_IN_EP,
                 USBD_EP_TYPE_BULK,
                 BULK_DATA_FS_IN_PACKET_SIZE);

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 80086bc:	2340      	movs	r3, #64	; 0x40
 80086be:	2202      	movs	r2, #2
 80086c0:	2101      	movs	r1, #1
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fbea 	bl	8008e9c <USBD_LL_OpenEP>
                 BULK_OUT_EP,
                 USBD_EP_TYPE_BULK,
                 BULK_DATA_FS_OUT_PACKET_SIZE);

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
 80086c8:	2340      	movs	r3, #64	; 0x40
 80086ca:	4a05      	ldr	r2, [pc, #20]	; (80086e0 <USBD_Bulk_Init+0x40>)
 80086cc:	2101      	movs	r1, #1
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fd5e 	bl	8009190 <USBD_LL_PrepareReceive>
                         BULK_OUT_EP,
                         &USB_Rx_Buffer[0],
                         BULK_DATA_FS_OUT_PACKET_SIZE);
  
  return ret;
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	200010ac 	.word	0x200010ac

080086e4 <USBD_Bulk_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Bulk_DeInit (USBD_HandleTypeDef *pdev,
                                  uint8_t cfgidx)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	73fb      	strb	r3, [r7, #15]
  
  /* Close EP IN */
  USBD_LL_CloseEP(pdev, BULK_IN_EP);
 80086f4:	2181      	movs	r1, #129	; 0x81
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fc0e 	bl	8008f18 <USBD_LL_CloseEP>
  
  /* lose EP OUT */
  USBD_LL_CloseEP(pdev, BULK_OUT_EP);
 80086fc:	2101      	movs	r1, #1
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fc0a 	bl	8008f18 <USBD_LL_CloseEP>
  
  return ret;
 8008704:	7bfb      	ldrb	r3, [r7, #15]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
	...

08008710 <USBD_Bulk_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Bulk_Setup (USBD_HandleTypeDef *pdev,
                                 USBD_SetupReqTypedef *req)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint16_t len=USB_BULK_DESC_SIZ;
 800871a:	2317      	movs	r3, #23
 800871c:	81fb      	strh	r3, [r7, #14]
  uint8_t  *pbuf=USBD_Bulk_CfgFSDesc + 9;
 800871e:	4b2e      	ldr	r3, [pc, #184]	; (80087d8 <USBD_Bulk_Setup+0xc8>)
 8008720:	60bb      	str	r3, [r7, #8]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800872a:	2b00      	cmp	r3, #0
 800872c:	d016      	beq.n	800875c <USBD_Bulk_Setup+0x4c>
 800872e:	2b40      	cmp	r3, #64	; 0x40
 8008730:	d14b      	bne.n	80087ca <USBD_Bulk_Setup+0xba>
  {
#if (USBD_WINUSB_ENABLED == 1)
  case USB_REQ_TYPE_VENDOR:
    switch (req->bRequest)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	785b      	ldrb	r3, [r3, #1]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d10e      	bne.n	8008758 <USBD_Bulk_Setup+0x48>
    {
    case USB_BULK_MS_VENDORCODE: /* bMS_VendorCode */
      if (req->wIndex == 7) /*This is defined by the MS spec (Table 6)*/
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	889b      	ldrh	r3, [r3, #4]
 800873e:	2b07      	cmp	r3, #7
 8008740:	d10a      	bne.n	8008758 <USBD_Bulk_Setup+0x48>
      {
        pbuf = USBD_Bulk_MSOS20Desc;
 8008742:	4b26      	ldr	r3, [pc, #152]	; (80087dc <USBD_Bulk_Setup+0xcc>)
 8008744:	60bb      	str	r3, [r7, #8]
        len = USB_LEN_MSOS20_DESC;
 8008746:	239e      	movs	r3, #158	; 0x9e
 8008748:	81fb      	strh	r3, [r7, #14]
        USBD_CtlSendData(pdev, pbuf, len);
 800874a:	89fb      	ldrh	r3, [r7, #14]
 800874c:	461a      	mov	r2, r3
 800874e:	68b9      	ldr	r1, [r7, #8]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7fe f8cd 	bl	80068f0 <USBD_CtlSendData>
        break;
 8008756:	e000      	b.n	800875a <USBD_Bulk_Setup+0x4a>
      }

    default:
      break;
 8008758:	bf00      	nop
    }
    break;
 800875a:	e037      	b.n	80087cc <USBD_Bulk_Setup+0xbc>
#endif /* (USBD_WINUSB_ENABLED == 1) */

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	2b0b      	cmp	r3, #11
 8008762:	d021      	beq.n	80087a8 <USBD_Bulk_Setup+0x98>
 8008764:	2b0b      	cmp	r3, #11
 8008766:	dc30      	bgt.n	80087ca <USBD_Bulk_Setup+0xba>
 8008768:	2b06      	cmp	r3, #6
 800876a:	d002      	beq.n	8008772 <USBD_Bulk_Setup+0x62>
 800876c:	2b0a      	cmp	r3, #10
 800876e:	d015      	beq.n	800879c <USBD_Bulk_Setup+0x8c>
      }
      break;
    }
 
  default: 
    break;
 8008770:	e02b      	b.n	80087ca <USBD_Bulk_Setup+0xba>
      if ( (req->wValue >> 8) == BULK_DESCRIPTOR_TYPE)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	885b      	ldrh	r3, [r3, #2]
 8008776:	0a1b      	lsrs	r3, r3, #8
 8008778:	b29b      	uxth	r3, r3
 800877a:	2b21      	cmp	r3, #33	; 0x21
 800877c:	d107      	bne.n	800878e <USBD_Bulk_Setup+0x7e>
        pbuf = USBD_Bulk_CfgFSDesc + 9 + (9 * USBD_MAX_NUM_INTERFACES);
 800877e:	4b18      	ldr	r3, [pc, #96]	; (80087e0 <USBD_Bulk_Setup+0xd0>)
 8008780:	60bb      	str	r3, [r7, #8]
        len = MIN(USB_BULK_DESC_SIZ , req->wLength);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	88db      	ldrh	r3, [r3, #6]
 8008786:	2b17      	cmp	r3, #23
 8008788:	bf28      	it	cs
 800878a:	2317      	movcs	r3, #23
 800878c:	81fb      	strh	r3, [r7, #14]
      USBD_CtlSendData (pdev, pbuf, len);
 800878e:	89fb      	ldrh	r3, [r7, #14]
 8008790:	461a      	mov	r2, r3
 8008792:	68b9      	ldr	r1, [r7, #8]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7fe f8ab 	bl	80068f0 <USBD_CtlSendData>
      break;
 800879a:	e016      	b.n	80087ca <USBD_Bulk_Setup+0xba>
      USBD_CtlSendData (pdev,
 800879c:	2201      	movs	r2, #1
 800879e:	4911      	ldr	r1, [pc, #68]	; (80087e4 <USBD_Bulk_Setup+0xd4>)
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7fe f8a5 	bl	80068f0 <USBD_CtlSendData>
      break;
 80087a6:	e010      	b.n	80087ca <USBD_Bulk_Setup+0xba>
      if ((uint8_t)(req->wValue) < USBD_MAX_NUM_INTERFACES)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	885b      	ldrh	r3, [r3, #2]
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d106      	bne.n	80087c0 <USBD_Bulk_Setup+0xb0>
        usbd_bulk_AltSet = (uint8_t)(req->wValue);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	885b      	ldrh	r3, [r3, #2]
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	461a      	mov	r2, r3
 80087ba:	4b0a      	ldr	r3, [pc, #40]	; (80087e4 <USBD_Bulk_Setup+0xd4>)
 80087bc:	601a      	str	r2, [r3, #0]
      break;
 80087be:	e003      	b.n	80087c8 <USBD_Bulk_Setup+0xb8>
        USBD_CtlError (pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7fe f823 	bl	800680e <USBD_CtlError>
      break;
 80087c8:	bf00      	nop
    break;
 80087ca:	bf00      	nop
  }
  return USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20000059 	.word	0x20000059
 80087dc:	20000070 	.word	0x20000070
 80087e0:	20000062 	.word	0x20000062
 80087e4:	200010a8 	.word	0x200010a8

080087e8 <USBD_Bulk_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_Bulk_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	460b      	mov	r3, r1
 80087f2:	70fb      	strb	r3, [r7, #3]
  /* endpoint finished the previous transmission so see if more data is left */
  UsbTransmitPipeBulkIN();
 80087f4:	f7fe ffb6 	bl	8007764 <UsbTransmitPipeBulkIN>
  return USBD_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <USBD_Bulk_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_Bulk_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b082      	sub	sp, #8
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	460b      	mov	r3, r1
 800880c:	70fb      	strb	r3, [r7, #3]
  /* read the data from the bulk OUT pipe */
  UsbReceivePipeBulkOUT(epnum);
 800880e:	78fb      	ldrb	r3, [r7, #3]
 8008810:	4618      	mov	r0, r3
 8008812:	f7fe ffeb 	bl	80077ec <UsbReceivePipeBulkOUT>
  return USBD_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBD_Bulk_SOF>:
  *         Start Of Frame event management
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_Bulk_SOF (USBD_HandleTypeDef *pdev)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800882e:	2b03      	cmp	r3, #3
 8008830:	d101      	bne.n	8008836 <USBD_Bulk_SOF+0x16>
  {
    /* Check the data to be sent through IN pipe */
    UsbTransmitPipeBulkIN();
 8008832:	f7fe ff97 	bl	8007764 <UsbTransmitPipeBulkIN>
  }
  return USBD_OK;
 8008836:	2300      	movs	r3, #0

}
 8008838:	4618      	mov	r0, r3
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBD_Bulk_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Bulk_GetFSCfgDesc (uint16_t *length)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Bulk_CfgFSDesc);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2220      	movs	r2, #32
 800884c:	801a      	strh	r2, [r3, #0]
  return USBD_Bulk_CfgFSDesc;
 800884e:	4b03      	ldr	r3, [pc, #12]	; (800885c <USBD_Bulk_GetFSCfgDesc+0x1c>)
}
 8008850:	4618      	mov	r0, r3
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr
 800885c:	20000050 	.word	0x20000050

08008860 <USBD_Bulk_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Bulk_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Bulk_DeviceQualifierDesc);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	220a      	movs	r2, #10
 800886c:	801a      	strh	r2, [r3, #0]
  return USBD_Bulk_DeviceQualifierDesc;
 800886e:	4b03      	ldr	r3, [pc, #12]	; (800887c <USBD_Bulk_GetDeviceQualifierDescriptor+0x1c>)
}
 8008870:	4618      	mov	r0, r3
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	2000000c 	.word	0x2000000c

08008880 <USBD_Bulk_GetRxBufferPtr>:
/**
  * @brief  USBD_Bulk_GetRxBufferPtr
  * @retval Pointer to reception buffer.
  */
uint8_t * USBD_Bulk_GetRxBufferPtr(void)
{
 8008880:	b480      	push	{r7}
 8008882:	af00      	add	r7, sp, #0
  return &USB_Rx_Buffer[0];
 8008884:	4b02      	ldr	r3, [pc, #8]	; (8008890 <USBD_Bulk_GetRxBufferPtr+0x10>)
}
 8008886:	4618      	mov	r0, r3
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	200010ac 	.word	0x200010ac

08008894 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	4603      	mov	r3, r0
 800889c:	6039      	str	r1, [r7, #0]
 800889e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	2212      	movs	r2, #18
 80088a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80088a6:	4b03      	ldr	r3, [pc, #12]	; (80088b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	20000130 	.word	0x20000130

080088b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	4603      	mov	r3, r0
 80088c0:	6039      	str	r1, [r7, #0]
 80088c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	2204      	movs	r2, #4
 80088c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80088ca:	4b03      	ldr	r3, [pc, #12]	; (80088d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	20000168 	.word	0x20000168

080088dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	4603      	mov	r3, r0
 80088e4:	6039      	str	r1, [r7, #0]
 80088e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088e8:	79fb      	ldrb	r3, [r7, #7]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d105      	bne.n	80088fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	4907      	ldr	r1, [pc, #28]	; (8008910 <USBD_FS_ProductStrDescriptor+0x34>)
 80088f2:	4808      	ldr	r0, [pc, #32]	; (8008914 <USBD_FS_ProductStrDescriptor+0x38>)
 80088f4:	f7fd ff9c 	bl	8006830 <USBD_GetString>
 80088f8:	e004      	b.n	8008904 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	4904      	ldr	r1, [pc, #16]	; (8008910 <USBD_FS_ProductStrDescriptor+0x34>)
 80088fe:	4805      	ldr	r0, [pc, #20]	; (8008914 <USBD_FS_ProductStrDescriptor+0x38>)
 8008900:	f7fd ff96 	bl	8006830 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008904:	4b02      	ldr	r3, [pc, #8]	; (8008910 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	200010ec 	.word	0x200010ec
 8008914:	080092f0 	.word	0x080092f0

08008918 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	4603      	mov	r3, r0
 8008920:	6039      	str	r1, [r7, #0]
 8008922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	4904      	ldr	r1, [pc, #16]	; (8008938 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008928:	4804      	ldr	r0, [pc, #16]	; (800893c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800892a:	f7fd ff81 	bl	8006830 <USBD_GetString>
  return USBD_StrDesc;
 800892e:	4b02      	ldr	r3, [pc, #8]	; (8008938 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008930:	4618      	mov	r0, r3
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	200010ec 	.word	0x200010ec
 800893c:	08009304 	.word	0x08009304

08008940 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	6039      	str	r1, [r7, #0]
 800894a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	221a      	movs	r2, #26
 8008950:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008952:	f000 f855 	bl	8008a00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008956:	4b02      	ldr	r3, [pc, #8]	; (8008960 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008958:	4618      	mov	r0, r3
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	2000016c 	.word	0x2000016c

08008964 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	6039      	str	r1, [r7, #0]
 800896e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d105      	bne.n	8008982 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	4907      	ldr	r1, [pc, #28]	; (8008998 <USBD_FS_ConfigStrDescriptor+0x34>)
 800897a:	4808      	ldr	r0, [pc, #32]	; (800899c <USBD_FS_ConfigStrDescriptor+0x38>)
 800897c:	f7fd ff58 	bl	8006830 <USBD_GetString>
 8008980:	e004      	b.n	800898c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	4904      	ldr	r1, [pc, #16]	; (8008998 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008986:	4805      	ldr	r0, [pc, #20]	; (800899c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008988:	f7fd ff52 	bl	8006830 <USBD_GetString>
  }
  return USBD_StrDesc;
 800898c:	4b02      	ldr	r3, [pc, #8]	; (8008998 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	200010ec 	.word	0x200010ec
 800899c:	08009314 	.word	0x08009314

080089a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	4603      	mov	r3, r0
 80089a8:	6039      	str	r1, [r7, #0]
 80089aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089ac:	79fb      	ldrb	r3, [r7, #7]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d105      	bne.n	80089be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	4907      	ldr	r1, [pc, #28]	; (80089d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089b6:	4808      	ldr	r0, [pc, #32]	; (80089d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089b8:	f7fd ff3a 	bl	8006830 <USBD_GetString>
 80089bc:	e004      	b.n	80089c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	4904      	ldr	r1, [pc, #16]	; (80089d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089c2:	4805      	ldr	r0, [pc, #20]	; (80089d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089c4:	f7fd ff34 	bl	8006830 <USBD_GetString>
  }
  return USBD_StrDesc;
 80089c8:	4b02      	ldr	r3, [pc, #8]	; (80089d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	200010ec 	.word	0x200010ec
 80089d8:	0800931c 	.word	0x0800931c

080089dc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	6039      	str	r1, [r7, #0]
 80089e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2221      	movs	r2, #33	; 0x21
 80089ec:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80089ee:	4b03      	ldr	r3, [pc, #12]	; (80089fc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	20000144 	.word	0x20000144

08008a00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a06:	4b0f      	ldr	r3, [pc, #60]	; (8008a44 <Get_SerialNum+0x44>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a0c:	4b0e      	ldr	r3, [pc, #56]	; (8008a48 <Get_SerialNum+0x48>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a12:	4b0e      	ldr	r3, [pc, #56]	; (8008a4c <Get_SerialNum+0x4c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d009      	beq.n	8008a3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a26:	2208      	movs	r2, #8
 8008a28:	4909      	ldr	r1, [pc, #36]	; (8008a50 <Get_SerialNum+0x50>)
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 f814 	bl	8008a58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a30:	2204      	movs	r2, #4
 8008a32:	4908      	ldr	r1, [pc, #32]	; (8008a54 <Get_SerialNum+0x54>)
 8008a34:	68b8      	ldr	r0, [r7, #8]
 8008a36:	f000 f80f 	bl	8008a58 <IntToUnicode>
  }
}
 8008a3a:	bf00      	nop
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	1fff7a10 	.word	0x1fff7a10
 8008a48:	1fff7a14 	.word	0x1fff7a14
 8008a4c:	1fff7a18 	.word	0x1fff7a18
 8008a50:	2000016e 	.word	0x2000016e
 8008a54:	2000017e 	.word	0x2000017e

08008a58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	4613      	mov	r3, r2
 8008a64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a66:	2300      	movs	r3, #0
 8008a68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	75fb      	strb	r3, [r7, #23]
 8008a6e:	e027      	b.n	8008ac0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	0f1b      	lsrs	r3, r3, #28
 8008a74:	2b09      	cmp	r3, #9
 8008a76:	d80b      	bhi.n	8008a90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	0f1b      	lsrs	r3, r3, #28
 8008a7c:	b2da      	uxtb	r2, r3
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	4619      	mov	r1, r3
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	440b      	add	r3, r1
 8008a88:	3230      	adds	r2, #48	; 0x30
 8008a8a:	b2d2      	uxtb	r2, r2
 8008a8c:	701a      	strb	r2, [r3, #0]
 8008a8e:	e00a      	b.n	8008aa6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	0f1b      	lsrs	r3, r3, #28
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
 8008a98:	005b      	lsls	r3, r3, #1
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	440b      	add	r3, r1
 8008aa0:	3237      	adds	r2, #55	; 0x37
 8008aa2:	b2d2      	uxtb	r2, r2
 8008aa4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	011b      	lsls	r3, r3, #4
 8008aaa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008aac:	7dfb      	ldrb	r3, [r7, #23]
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	3301      	adds	r3, #1
 8008abe:	75fb      	strb	r3, [r7, #23]
 8008ac0:	7dfa      	ldrb	r2, [r7, #23]
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d3d3      	bcc.n	8008a70 <IntToUnicode+0x18>
  }
}
 8008ac8:	bf00      	nop
 8008aca:	bf00      	nop
 8008acc:	371c      	adds	r7, #28
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b082      	sub	sp, #8
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008aea:	4619      	mov	r1, r3
 8008aec:	4610      	mov	r0, r2
 8008aee:	f7fc fee3 	bl	80058b8 <USBD_LL_SetupStage>
}
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b082      	sub	sp, #8
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	460b      	mov	r3, r1
 8008b04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008b0c:	78fa      	ldrb	r2, [r7, #3]
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	4613      	mov	r3, r2
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	440b      	add	r3, r1
 8008b1a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	4619      	mov	r1, r3
 8008b24:	f7fc ff1d 	bl	8005962 <USBD_LL_DataOutStage>
}
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008b42:	78fa      	ldrb	r2, [r7, #3]
 8008b44:	6879      	ldr	r1, [r7, #4]
 8008b46:	4613      	mov	r3, r2
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	4413      	add	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	440b      	add	r3, r1
 8008b50:	334c      	adds	r3, #76	; 0x4c
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	78fb      	ldrb	r3, [r7, #3]
 8008b56:	4619      	mov	r1, r3
 8008b58:	f7fc ff66 	bl	8005a28 <USBD_LL_DataInStage>
}
 8008b5c:	bf00      	nop
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fd f86a 	bl	8005c4c <USBD_LL_SOF>
}
 8008b78:	bf00      	nop
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <HAL_PCD_ResetCallback+0x1a>
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d003      	beq.n	8008ba0 <HAL_PCD_ResetCallback+0x20>
 8008b98:	e005      	b.n	8008ba6 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b9e:	e005      	b.n	8008bac <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ba4:	e002      	b.n	8008bac <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	73fb      	strb	r3, [r7, #15]
    break;    
 8008baa:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bb2:	7bfa      	ldrb	r2, [r7, #15]
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fd f80d 	bl	8005bd6 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fc ffc6 	bl	8005b54 <USBD_LL_Reset>
}
 8008bc8:	bf00      	nop
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fd f809 	bl	8005bf6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	6812      	ldr	r2, [r2, #0]
 8008bf2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bf6:	f043 0301 	orr.w	r3, r3, #1
 8008bfa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a1b      	ldr	r3, [r3, #32]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d005      	beq.n	8008c10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c04:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <HAL_PCD_SuspendCallback+0x4c>)
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	4a04      	ldr	r2, [pc, #16]	; (8008c1c <HAL_PCD_SuspendCallback+0x4c>)
 8008c0a:	f043 0306 	orr.w	r3, r3, #6
 8008c0e:	6113      	str	r3, [r2, #16]
  }
  /* Inform application that the USB entered low power mode. */
  UsbEnterLowPowerModeHook();
 8008c10:	f7f7 fcfa 	bl	8000608 <UsbEnterLowPowerModeHook>
  /* USER CODE END 2 */
}
 8008c14:	bf00      	nop
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	e000ed00 	.word	0xe000ed00

08008c20 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* Inform application that the USB left low power mode. */
  UsbLeaveLowPowerModeHook();
 8008c28:	f7f7 fcf5 	bl	8000616 <UsbLeaveLowPowerModeHook>
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fc fff4 	bl	8005c20 <USBD_LL_Resume>
}
 8008c38:	bf00      	nop
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c52:	78fa      	ldrb	r2, [r7, #3]
 8008c54:	4611      	mov	r1, r2
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fd f81f 	bl	8005c9a <USBD_LL_IsoOUTIncomplete>
}
 8008c5c:	bf00      	nop
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c76:	78fa      	ldrb	r2, [r7, #3]
 8008c78:	4611      	mov	r1, r2
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fd f800 	bl	8005c80 <USBD_LL_IsoINIncomplete>
}
 8008c80:	bf00      	nop
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Configure Low connection state. */
  UsbConnectHook(BLT_TRUE);
 8008c90:	2001      	movs	r0, #1
 8008c92:	f7f7 fc83 	bl	800059c <UsbConnectHook>
  /* Inform lower layer. */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fd f809 	bl	8005cb4 <USBD_LL_DevConnected>
}
 8008ca2:	bf00      	nop
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b082      	sub	sp, #8
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  /* Configure High connection state. */
  UsbConnectHook(BLT_FALSE);
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	f7f7 fc72 	bl	800059c <UsbConnectHook>
  /* Inform lower layer. */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fd f803 	bl	8005cca <USBD_LL_DevDisconnected>
}
 8008cc4:	bf00      	nop
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d13f      	bne.n	8008d5c <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008cdc:	4a22      	ldr	r2, [pc, #136]	; (8008d68 <USBD_LL_Init+0x9c>)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a20      	ldr	r2, [pc, #128]	; (8008d68 <USBD_LL_Init+0x9c>)
 8008ce8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008cec:	4b1e      	ldr	r3, [pc, #120]	; (8008d68 <USBD_LL_Init+0x9c>)
 8008cee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008cf2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008cf4:	4b1c      	ldr	r3, [pc, #112]	; (8008d68 <USBD_LL_Init+0x9c>)
 8008cf6:	2204      	movs	r2, #4
 8008cf8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008cfa:	4b1b      	ldr	r3, [pc, #108]	; (8008d68 <USBD_LL_Init+0x9c>)
 8008cfc:	2202      	movs	r2, #2
 8008cfe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d00:	4b19      	ldr	r3, [pc, #100]	; (8008d68 <USBD_LL_Init+0x9c>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d06:	4b18      	ldr	r3, [pc, #96]	; (8008d68 <USBD_LL_Init+0x9c>)
 8008d08:	2202      	movs	r2, #2
 8008d0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008d0c:	4b16      	ldr	r3, [pc, #88]	; (8008d68 <USBD_LL_Init+0x9c>)
 8008d0e:	2201      	movs	r2, #1
 8008d10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008d12:	4b15      	ldr	r3, [pc, #84]	; (8008d68 <USBD_LL_Init+0x9c>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008d18:	4b13      	ldr	r3, [pc, #76]	; (8008d68 <USBD_LL_Init+0x9c>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008d1e:	4b12      	ldr	r3, [pc, #72]	; (8008d68 <USBD_LL_Init+0x9c>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008d24:	4b10      	ldr	r3, [pc, #64]	; (8008d68 <USBD_LL_Init+0x9c>)
 8008d26:	2200      	movs	r2, #0
 8008d28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008d2a:	480f      	ldr	r0, [pc, #60]	; (8008d68 <USBD_LL_Init+0x9c>)
 8008d2c:	f7f8 ff66 	bl	8001bfc <HAL_PCD_Init>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d004      	beq.n	8008d40 <USBD_LL_Init+0x74>
  {
    ASSERT_RT(BLT_FALSE);
 8008d36:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8008d3a:	480c      	ldr	r0, [pc, #48]	; (8008d6c <USBD_LL_Init+0xa0>)
 8008d3c:	f7fe ff1a 	bl	8007b74 <AssertFailure>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d40:	2180      	movs	r1, #128	; 0x80
 8008d42:	4809      	ldr	r0, [pc, #36]	; (8008d68 <USBD_LL_Init+0x9c>)
 8008d44:	f7fa fa73 	bl	800322e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d48:	2240      	movs	r2, #64	; 0x40
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	4806      	ldr	r0, [pc, #24]	; (8008d68 <USBD_LL_Init+0x9c>)
 8008d4e:	f7fa fa27 	bl	80031a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d52:	2280      	movs	r2, #128	; 0x80
 8008d54:	2101      	movs	r1, #1
 8008d56:	4804      	ldr	r0, [pc, #16]	; (8008d68 <USBD_LL_Init+0x9c>)
 8008d58:	f7fa fa22 	bl	80031a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	200001a8 	.word	0x200001a8
 8008d6c:	08009334 	.word	0x08009334

08008d70 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7f9 f855 	bl	8001e36 <HAL_PCD_DeInit>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d90:	7bbb      	ldrb	r3, [r7, #14]
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	d816      	bhi.n	8008dc4 <USBD_LL_DeInit+0x54>
 8008d96:	a201      	add	r2, pc, #4	; (adr r2, 8008d9c <USBD_LL_DeInit+0x2c>)
 8008d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9c:	08008dad 	.word	0x08008dad
 8008da0:	08008db3 	.word	0x08008db3
 8008da4:	08008db9 	.word	0x08008db9
 8008da8:	08008dbf 	.word	0x08008dbf
    case HAL_OK :
      usb_status = USBD_OK;
 8008dac:	2300      	movs	r3, #0
 8008dae:	73fb      	strb	r3, [r7, #15]
    break;
 8008db0:	e00b      	b.n	8008dca <USBD_LL_DeInit+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008db2:	2303      	movs	r3, #3
 8008db4:	73fb      	strb	r3, [r7, #15]
    break;
 8008db6:	e008      	b.n	8008dca <USBD_LL_DeInit+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008db8:	2301      	movs	r3, #1
 8008dba:	73fb      	strb	r3, [r7, #15]
    break;
 8008dbc:	e005      	b.n	8008dca <USBD_LL_DeInit+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc2:	e002      	b.n	8008dca <USBD_LL_DeInit+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc8:	bf00      	nop
  }
  return usb_status; 
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7f9 f846 	bl	8001e7c <HAL_PCD_Start>
 8008df0:	4603      	mov	r3, r0
 8008df2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	d816      	bhi.n	8008e28 <USBD_LL_Start+0x54>
 8008dfa:	a201      	add	r2, pc, #4	; (adr r2, 8008e00 <USBD_LL_Start+0x2c>)
 8008dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e00:	08008e11 	.word	0x08008e11
 8008e04:	08008e17 	.word	0x08008e17
 8008e08:	08008e1d 	.word	0x08008e1d
 8008e0c:	08008e23 	.word	0x08008e23
    case HAL_OK :
      usb_status = USBD_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]
    break;
 8008e14:	e00b      	b.n	8008e2e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e16:	2303      	movs	r3, #3
 8008e18:	73fb      	strb	r3, [r7, #15]
    break;
 8008e1a:	e008      	b.n	8008e2e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e20:	e005      	b.n	8008e2e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e22:	2303      	movs	r3, #3
 8008e24:	73fb      	strb	r3, [r7, #15]
    break;
 8008e26:	e002      	b.n	8008e2e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e2c:	bf00      	nop
  }
  return usb_status;
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7f9 f847 	bl	8001ee2 <HAL_PCD_Stop>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008e58:	7bbb      	ldrb	r3, [r7, #14]
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d816      	bhi.n	8008e8c <USBD_LL_Stop+0x54>
 8008e5e:	a201      	add	r2, pc, #4	; (adr r2, 8008e64 <USBD_LL_Stop+0x2c>)
 8008e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e64:	08008e75 	.word	0x08008e75
 8008e68:	08008e7b 	.word	0x08008e7b
 8008e6c:	08008e81 	.word	0x08008e81
 8008e70:	08008e87 	.word	0x08008e87
    case HAL_OK :
      usb_status = USBD_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	73fb      	strb	r3, [r7, #15]
    break;
 8008e78:	e00b      	b.n	8008e92 <USBD_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e7e:	e008      	b.n	8008e92 <USBD_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e80:	2301      	movs	r3, #1
 8008e82:	73fb      	strb	r3, [r7, #15]
    break;
 8008e84:	e005      	b.n	8008e92 <USBD_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e86:	2303      	movs	r3, #3
 8008e88:	73fb      	strb	r3, [r7, #15]
    break;
 8008e8a:	e002      	b.n	8008e92 <USBD_LL_Stop+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e90:	bf00      	nop
  }
  return usb_status;
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	4608      	mov	r0, r1
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	4603      	mov	r3, r0
 8008eac:	70fb      	strb	r3, [r7, #3]
 8008eae:	460b      	mov	r3, r1
 8008eb0:	70bb      	strb	r3, [r7, #2]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ec4:	78bb      	ldrb	r3, [r7, #2]
 8008ec6:	883a      	ldrh	r2, [r7, #0]
 8008ec8:	78f9      	ldrb	r1, [r7, #3]
 8008eca:	f7f9 fd63 	bl	8002994 <HAL_PCD_EP_Open>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d817      	bhi.n	8008f08 <USBD_LL_OpenEP+0x6c>
 8008ed8:	a201      	add	r2, pc, #4	; (adr r2, 8008ee0 <USBD_LL_OpenEP+0x44>)
 8008eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ede:	bf00      	nop
 8008ee0:	08008ef1 	.word	0x08008ef1
 8008ee4:	08008ef7 	.word	0x08008ef7
 8008ee8:	08008efd 	.word	0x08008efd
 8008eec:	08008f03 	.word	0x08008f03
    case HAL_OK :
      usb_status = USBD_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef4:	e00b      	b.n	8008f0e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	73fb      	strb	r3, [r7, #15]
    break;
 8008efa:	e008      	b.n	8008f0e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008efc:	2301      	movs	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]
    break;
 8008f00:	e005      	b.n	8008f0e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f02:	2303      	movs	r3, #3
 8008f04:	73fb      	strb	r3, [r7, #15]
    break;
 8008f06:	e002      	b.n	8008f0e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f0c:	bf00      	nop
  }
  return usb_status;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f32:	78fa      	ldrb	r2, [r7, #3]
 8008f34:	4611      	mov	r1, r2
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7f9 fd94 	bl	8002a64 <HAL_PCD_EP_Close>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	d816      	bhi.n	8008f74 <USBD_LL_CloseEP+0x5c>
 8008f46:	a201      	add	r2, pc, #4	; (adr r2, 8008f4c <USBD_LL_CloseEP+0x34>)
 8008f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4c:	08008f5d 	.word	0x08008f5d
 8008f50:	08008f63 	.word	0x08008f63
 8008f54:	08008f69 	.word	0x08008f69
 8008f58:	08008f6f 	.word	0x08008f6f
    case HAL_OK :
      usb_status = USBD_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f60:	e00b      	b.n	8008f7a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f62:	2303      	movs	r3, #3
 8008f64:	73fb      	strb	r3, [r7, #15]
    break;
 8008f66:	e008      	b.n	8008f7a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f6c:	e005      	b.n	8008f7a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	73fb      	strb	r3, [r7, #15]
    break;
 8008f72:	e002      	b.n	8008f7a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008f74:	2303      	movs	r3, #3
 8008f76:	73fb      	strb	r3, [r7, #15]
    break;
 8008f78:	bf00      	nop
  }
  return usb_status;  
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f9e:	78fa      	ldrb	r2, [r7, #3]
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7f9 fe55 	bl	8002c52 <HAL_PCD_EP_SetStall>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	d816      	bhi.n	8008fe0 <USBD_LL_StallEP+0x5c>
 8008fb2:	a201      	add	r2, pc, #4	; (adr r2, 8008fb8 <USBD_LL_StallEP+0x34>)
 8008fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb8:	08008fc9 	.word	0x08008fc9
 8008fbc:	08008fcf 	.word	0x08008fcf
 8008fc0:	08008fd5 	.word	0x08008fd5
 8008fc4:	08008fdb 	.word	0x08008fdb
    case HAL_OK :
      usb_status = USBD_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	73fb      	strb	r3, [r7, #15]
    break;
 8008fcc:	e00b      	b.n	8008fe6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd2:	e008      	b.n	8008fe6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd8:	e005      	b.n	8008fe6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	73fb      	strb	r3, [r7, #15]
    break;
 8008fde:	e002      	b.n	8008fe6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe4:	bf00      	nop
  }
  return usb_status;  
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800900a:	78fa      	ldrb	r2, [r7, #3]
 800900c:	4611      	mov	r1, r2
 800900e:	4618      	mov	r0, r3
 8009010:	f7f9 fe83 	bl	8002d1a <HAL_PCD_EP_ClrStall>
 8009014:	4603      	mov	r3, r0
 8009016:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	2b03      	cmp	r3, #3
 800901c:	d816      	bhi.n	800904c <USBD_LL_ClearStallEP+0x5c>
 800901e:	a201      	add	r2, pc, #4	; (adr r2, 8009024 <USBD_LL_ClearStallEP+0x34>)
 8009020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009024:	08009035 	.word	0x08009035
 8009028:	0800903b 	.word	0x0800903b
 800902c:	08009041 	.word	0x08009041
 8009030:	08009047 	.word	0x08009047
    case HAL_OK :
      usb_status = USBD_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73fb      	strb	r3, [r7, #15]
    break;
 8009038:	e00b      	b.n	8009052 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800903a:	2303      	movs	r3, #3
 800903c:	73fb      	strb	r3, [r7, #15]
    break;
 800903e:	e008      	b.n	8009052 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009040:	2301      	movs	r3, #1
 8009042:	73fb      	strb	r3, [r7, #15]
    break;
 8009044:	e005      	b.n	8009052 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009046:	2303      	movs	r3, #3
 8009048:	73fb      	strb	r3, [r7, #15]
    break;
 800904a:	e002      	b.n	8009052 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800904c:	2303      	movs	r3, #3
 800904e:	73fb      	strb	r3, [r7, #15]
    break;
 8009050:	bf00      	nop
  }
  return usb_status; 
 8009052:	7bfb      	ldrb	r3, [r7, #15]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	460b      	mov	r3, r1
 8009066:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800906e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009074:	2b00      	cmp	r3, #0
 8009076:	da0b      	bge.n	8009090 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009078:	78fb      	ldrb	r3, [r7, #3]
 800907a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800907e:	68f9      	ldr	r1, [r7, #12]
 8009080:	4613      	mov	r3, r2
 8009082:	00db      	lsls	r3, r3, #3
 8009084:	4413      	add	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	440b      	add	r3, r1
 800908a:	333e      	adds	r3, #62	; 0x3e
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	e00b      	b.n	80090a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009090:	78fb      	ldrb	r3, [r7, #3]
 8009092:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009096:	68f9      	ldr	r1, [r7, #12]
 8009098:	4613      	mov	r3, r2
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80090a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	460b      	mov	r3, r1
 80090be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090ce:	78fa      	ldrb	r2, [r7, #3]
 80090d0:	4611      	mov	r1, r2
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7f9 fc39 	bl	800294a <HAL_PCD_SetAddress>
 80090d8:	4603      	mov	r3, r0
 80090da:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d816      	bhi.n	8009110 <USBD_LL_SetUSBAddress+0x5c>
 80090e2:	a201      	add	r2, pc, #4	; (adr r2, 80090e8 <USBD_LL_SetUSBAddress+0x34>)
 80090e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e8:	080090f9 	.word	0x080090f9
 80090ec:	080090ff 	.word	0x080090ff
 80090f0:	08009105 	.word	0x08009105
 80090f4:	0800910b 	.word	0x0800910b
    case HAL_OK :
      usb_status = USBD_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73fb      	strb	r3, [r7, #15]
    break;
 80090fc:	e00b      	b.n	8009116 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090fe:	2303      	movs	r3, #3
 8009100:	73fb      	strb	r3, [r7, #15]
    break;
 8009102:	e008      	b.n	8009116 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009104:	2301      	movs	r3, #1
 8009106:	73fb      	strb	r3, [r7, #15]
    break;
 8009108:	e005      	b.n	8009116 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800910a:	2303      	movs	r3, #3
 800910c:	73fb      	strb	r3, [r7, #15]
    break;
 800910e:	e002      	b.n	8009116 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009110:	2303      	movs	r3, #3
 8009112:	73fb      	strb	r3, [r7, #15]
    break;
 8009114:	bf00      	nop
  }
  return usb_status;  
 8009116:	7bfb      	ldrb	r3, [r7, #15]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	607a      	str	r2, [r7, #4]
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	460b      	mov	r3, r1
 800912e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800913e:	7af9      	ldrb	r1, [r7, #11]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	f7f9 fd3b 	bl	8002bbe <HAL_PCD_EP_Transmit>
 8009148:	4603      	mov	r3, r0
 800914a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800914c:	7dbb      	ldrb	r3, [r7, #22]
 800914e:	2b03      	cmp	r3, #3
 8009150:	d816      	bhi.n	8009180 <USBD_LL_Transmit+0x60>
 8009152:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <USBD_LL_Transmit+0x38>)
 8009154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009158:	08009169 	.word	0x08009169
 800915c:	0800916f 	.word	0x0800916f
 8009160:	08009175 	.word	0x08009175
 8009164:	0800917b 	.word	0x0800917b
    case HAL_OK :
      usb_status = USBD_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	75fb      	strb	r3, [r7, #23]
    break;
 800916c:	e00b      	b.n	8009186 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800916e:	2303      	movs	r3, #3
 8009170:	75fb      	strb	r3, [r7, #23]
    break;
 8009172:	e008      	b.n	8009186 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009174:	2301      	movs	r3, #1
 8009176:	75fb      	strb	r3, [r7, #23]
    break;
 8009178:	e005      	b.n	8009186 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800917a:	2303      	movs	r3, #3
 800917c:	75fb      	strb	r3, [r7, #23]
    break;
 800917e:	e002      	b.n	8009186 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009180:	2303      	movs	r3, #3
 8009182:	75fb      	strb	r3, [r7, #23]
    break;
 8009184:	bf00      	nop
  }
  return usb_status;    
 8009186:	7dfb      	ldrb	r3, [r7, #23]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	607a      	str	r2, [r7, #4]
 800919a:	603b      	str	r3, [r7, #0]
 800919c:	460b      	mov	r3, r1
 800919e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091ae:	7af9      	ldrb	r1, [r7, #11]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	f7f9 fca0 	bl	8002af8 <HAL_PCD_EP_Receive>
 80091b8:	4603      	mov	r3, r0
 80091ba:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80091bc:	7dbb      	ldrb	r3, [r7, #22]
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d816      	bhi.n	80091f0 <USBD_LL_PrepareReceive+0x60>
 80091c2:	a201      	add	r2, pc, #4	; (adr r2, 80091c8 <USBD_LL_PrepareReceive+0x38>)
 80091c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c8:	080091d9 	.word	0x080091d9
 80091cc:	080091df 	.word	0x080091df
 80091d0:	080091e5 	.word	0x080091e5
 80091d4:	080091eb 	.word	0x080091eb
    case HAL_OK :
      usb_status = USBD_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	75fb      	strb	r3, [r7, #23]
    break;
 80091dc:	e00b      	b.n	80091f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091de:	2303      	movs	r3, #3
 80091e0:	75fb      	strb	r3, [r7, #23]
    break;
 80091e2:	e008      	b.n	80091f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091e4:	2301      	movs	r3, #1
 80091e6:	75fb      	strb	r3, [r7, #23]
    break;
 80091e8:	e005      	b.n	80091f6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091ea:	2303      	movs	r3, #3
 80091ec:	75fb      	strb	r3, [r7, #23]
    break;
 80091ee:	e002      	b.n	80091f6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80091f0:	2303      	movs	r3, #3
 80091f2:	75fb      	strb	r3, [r7, #23]
    break;
 80091f4:	bf00      	nop
  }
  return usb_status; 
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009212:	78fa      	ldrb	r2, [r7, #3]
 8009214:	4611      	mov	r1, r2
 8009216:	4618      	mov	r0, r3
 8009218:	f7f9 fcb9 	bl	8002b8e <HAL_PCD_EP_GetRxCount>
 800921c:	4603      	mov	r3, r0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <__libc_init_array>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	4d0d      	ldr	r5, [pc, #52]	; (8009260 <__libc_init_array+0x38>)
 800922c:	4c0d      	ldr	r4, [pc, #52]	; (8009264 <__libc_init_array+0x3c>)
 800922e:	1b64      	subs	r4, r4, r5
 8009230:	10a4      	asrs	r4, r4, #2
 8009232:	2600      	movs	r6, #0
 8009234:	42a6      	cmp	r6, r4
 8009236:	d109      	bne.n	800924c <__libc_init_array+0x24>
 8009238:	4d0b      	ldr	r5, [pc, #44]	; (8009268 <__libc_init_array+0x40>)
 800923a:	4c0c      	ldr	r4, [pc, #48]	; (800926c <__libc_init_array+0x44>)
 800923c:	f000 f818 	bl	8009270 <_init>
 8009240:	1b64      	subs	r4, r4, r5
 8009242:	10a4      	asrs	r4, r4, #2
 8009244:	2600      	movs	r6, #0
 8009246:	42a6      	cmp	r6, r4
 8009248:	d105      	bne.n	8009256 <__libc_init_array+0x2e>
 800924a:	bd70      	pop	{r4, r5, r6, pc}
 800924c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009250:	4798      	blx	r3
 8009252:	3601      	adds	r6, #1
 8009254:	e7ee      	b.n	8009234 <__libc_init_array+0xc>
 8009256:	f855 3b04 	ldr.w	r3, [r5], #4
 800925a:	4798      	blx	r3
 800925c:	3601      	adds	r6, #1
 800925e:	e7f2      	b.n	8009246 <__libc_init_array+0x1e>
 8009260:	080093c8 	.word	0x080093c8
 8009264:	080093c8 	.word	0x080093c8
 8009268:	080093c8 	.word	0x080093c8
 800926c:	080093cc 	.word	0x080093cc

08009270 <_init>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	bf00      	nop
 8009274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009276:	bc08      	pop	{r3}
 8009278:	469e      	mov	lr, r3
 800927a:	4770      	bx	lr

0800927c <_fini>:
 800927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927e:	bf00      	nop
 8009280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009282:	bc08      	pop	{r3}
 8009284:	469e      	mov	lr, r3
 8009286:	4770      	bx	lr
