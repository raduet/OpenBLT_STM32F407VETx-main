
Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08008338  08008338  00018338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008428  08008428  00020188  2**0
                  CONTENTS
  4 .ARM          00000000  08008428  08008428  00020188  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008428  08008428  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008428  08008428  00018428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800842c  0800842c  0001842c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08008430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020188  2**0
                  CONTENTS
 10 .bss          000010d4  20000188  20000188  00020188  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000125c  2000125c  00020188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 13 .debug_info   000113d4  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f83  00000000  00000000  0003158c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  00035510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ff0  00000000  00000000  00036748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e58  00000000  00000000  00037738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015beb  00000000  00000000  0005c590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1379  00000000  00000000  0007217b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001434f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044a0  00000000  00000000  00143544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000188 	.word	0x20000188
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008320 	.word	0x08008320

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000018c 	.word	0x2000018c
 80001c4:	08008320 	.word	0x08008320

080001c8 <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* initialize the bootloader */
  BootInit();
 80001cc:	f006 fdb2 	bl	8006d34 <BootInit>
} /*** end of AppInit ***/
 80001d0:	bf00      	nop
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <AppTask>:
**            in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* Run the bootloader task. */
  BootTask();
 80001d8:	f006 fdbc 	bl	8006d54 <BootTask>
} /*** end of AppTask ***/
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}

080001e0 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	691a      	ldr	r2, [r3, #16]
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	4013      	ands	r3, r2
 80001f2:	683a      	ldr	r2, [r7, #0]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	bf0c      	ite	eq
 80001f8:	2301      	moveq	r3, #1
 80001fa:	2300      	movne	r3, #0
 80001fc:	b2db      	uxtb	r3, r3
}
 80001fe:	4618      	mov	r0, r3
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr

0800020a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800020a:	b480      	push	{r7}
 800020c:	b083      	sub	sp, #12
 800020e:	af00      	add	r7, sp, #0
 8000210:	6078      	str	r0, [r7, #4]
 8000212:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	683a      	ldr	r2, [r7, #0]
 8000218:	619a      	str	r2, [r3, #24]
}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr

08000226 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000226:	b480      	push	{r7}
 8000228:	b083      	sub	sp, #12
 800022a:	af00      	add	r7, sp, #0
 800022c:	6078      	str	r0, [r7, #4]
 800022e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	041a      	lsls	r2, r3, #16
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	619a      	str	r2, [r3, #24]
}
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr

08000244 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800024e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000250:	4907      	ldr	r1, [pc, #28]	; (8000270 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4313      	orrs	r3, r2
 8000256:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800025a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4013      	ands	r3, r2
 8000260:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000262:	68fb      	ldr	r3, [r7, #12]
}
 8000264:	bf00      	nop
 8000266:	3714      	adds	r7, #20
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr
 8000270:	40023800 	.word	0x40023800

08000274 <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* additional and optional backdoor entry through the pushbutton on the board. to
   * force the bootloader to stay active after reset, keep it pressed during reset.
   */
  if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0) != 0)
 8000278:	2101      	movs	r1, #1
 800027a:	4806      	ldr	r0, [pc, #24]	; (8000294 <CpuUserProgramStartHook+0x20>)
 800027c:	f7ff ffb0 	bl	80001e0 <LL_GPIO_IsInputPinSet>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <CpuUserProgramStartHook+0x16>
  {
    /* pushbutton pressed, so do not start the user program and keep the
     * bootloader active instead.
     */
    return BLT_FALSE;
 8000286:	2300      	movs	r3, #0
 8000288:	e002      	b.n	8000290 <CpuUserProgramStartHook+0x1c>
  }

  /* clean up the LED driver */
  LedBlinkExit();
 800028a:	f000 f857 	bl	800033c <LedBlinkExit>

  /* okay to start the user program */
  return BLT_TRUE;
 800028e:	2301      	movs	r3, #1
} /*** end of CpuUserProgramStartHook ***/
 8000290:	4618      	mov	r0, r3
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40020000 	.word	0x40020000

08000298 <UsbConnectHook>:
** \param     connect BLT_TRUE to connect and BLT_FALSE to disconnect.
** \return    none.
**
****************************************************************************************/
void UsbConnectHook(blt_bool connect)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
  static blt_bool initialized = BLT_FALSE;

  /* the connection to the USB bus is typically controlled by software through a digital
   * output. the GPIO pin for this must be configured as such.
   */
  if (initialized == BLT_FALSE)
 80002a2:	4b16      	ldr	r3, [pc, #88]	; (80002fc <UsbConnectHook+0x64>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d116      	bne.n	80002d8 <UsbConnectHook+0x40>
  {
    /* enable the clock for PC11 */
    LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80002aa:	2004      	movs	r0, #4
 80002ac:	f7ff ffca 	bl	8000244 <LL_AHB1_GRP1_EnableClock>
    /* configure DIS pin as open drain digital output */
    GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80002b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002b4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80002b6:	2301      	movs	r3, #1
 80002b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80002ba:	2300      	movs	r3, #0
 80002bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80002be:	2301      	movs	r3, #1
 80002c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80002c2:	2300      	movs	r3, #0
 80002c4:	61bb      	str	r3, [r7, #24]
    LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002c6:	f107 0308 	add.w	r3, r7, #8
 80002ca:	4619      	mov	r1, r3
 80002cc:	480c      	ldr	r0, [pc, #48]	; (8000300 <UsbConnectHook+0x68>)
 80002ce:	f002 feca 	bl	8003066 <LL_GPIO_Init>
    /* set to initialized as this part only has to be done once after reset */
    initialized = BLT_TRUE;
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <UsbConnectHook+0x64>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	701a      	strb	r2, [r3, #0]
  }

  /* determine if the USB should be connected or disconnected */
  if (connect == BLT_TRUE)
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d105      	bne.n	80002ea <UsbConnectHook+0x52>
  {
    /* the GPIO has a pull-up so to connect to the USB bus the pin needs to go low */
    LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_11);
 80002de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002e2:	4807      	ldr	r0, [pc, #28]	; (8000300 <UsbConnectHook+0x68>)
 80002e4:	f7ff ff9f 	bl	8000226 <LL_GPIO_ResetOutputPin>
  else
  {
    /* the GPIO has a pull-up so to disconnect to the USB bus the pin needs to go high */
    LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_11);
  }
} /*** end of UsbConnect ***/
 80002e8:	e004      	b.n	80002f4 <UsbConnectHook+0x5c>
    LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_11);
 80002ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002ee:	4804      	ldr	r0, [pc, #16]	; (8000300 <UsbConnectHook+0x68>)
 80002f0:	f7ff ff8b 	bl	800020a <LL_GPIO_SetOutputPin>
} /*** end of UsbConnect ***/
 80002f4:	bf00      	nop
 80002f6:	3720      	adds	r7, #32
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200001a4 	.word	0x200001a4
 8000300:	40020800 	.word	0x40020800

08000304 <UsbEnterLowPowerModeHook>:
**            to enter a low power mode.
** \return    none.
**
****************************************************************************************/
void UsbEnterLowPowerModeHook(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* support to enter a low power mode can be implemented here */
} /*** end of UsbEnterLowPowerMode ***/
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr

08000312 <UsbLeaveLowPowerModeHook>:
**            exit low power mode.
** \return    none.
**
****************************************************************************************/
void UsbLeaveLowPowerModeHook(void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0
  /* support to leave a low power mode can be implemented here */
} /*** end of UsbLeaveLowPowerMode ***/
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr

08000320 <LL_GPIO_SetOutputPin>:
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	683a      	ldr	r2, [r7, #0]
 800032e:	619a      	str	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <LedBlinkExit>:
**            exit.
** \return    none.
**
****************************************************************************************/
void LedBlinkExit(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* turn the LED off */
  LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_12);
 8000340:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000344:	4802      	ldr	r0, [pc, #8]	; (8000350 <LedBlinkExit+0x14>)
 8000346:	f7ff ffeb 	bl	8000320 <LL_GPIO_SetOutputPin>
} /*** end of LedBlinkExit ***/
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40020c00 	.word	0x40020c00

08000354 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <LL_RCC_HSE_Enable+0x1c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <LL_RCC_HSE_Enable+0x1c>)
 800035e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000362:	6013      	str	r3, [r2, #0]
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40023800 	.word	0x40023800

08000374 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <LL_RCC_HSE_IsReady+0x24>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000384:	bf0c      	ite	eq
 8000386:	2301      	moveq	r3, #1
 8000388:	2300      	movne	r3, #0
 800038a:	b2db      	uxtb	r3, r3
}
 800038c:	4618      	mov	r0, r3
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40023800 	.word	0x40023800

0800039c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <LL_RCC_SetSysClkSource+0x24>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	f023 0203 	bic.w	r2, r3, #3
 80003ac:	4904      	ldr	r1, [pc, #16]	; (80003c0 <LL_RCC_SetSysClkSource+0x24>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	608b      	str	r3, [r1, #8]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr
 80003c0:	40023800 	.word	0x40023800

080003c4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003c8:	4b04      	ldr	r3, [pc, #16]	; (80003dc <LL_RCC_GetSysClkSource+0x18>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	f003 030c 	and.w	r3, r3, #12
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40023800 	.word	0x40023800

080003e0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <LL_RCC_SetAHBPrescaler+0x24>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80003f0:	4904      	ldr	r1, [pc, #16]	; (8000404 <LL_RCC_SetAHBPrescaler+0x24>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4313      	orrs	r3, r2
 80003f6:	608b      	str	r3, [r1, #8]
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	40023800 	.word	0x40023800

08000408 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000418:	4904      	ldr	r1, [pc, #16]	; (800042c <LL_RCC_SetAPB1Prescaler+0x24>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4313      	orrs	r3, r2
 800041e:	608b      	str	r3, [r1, #8]
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	40023800 	.word	0x40023800

08000430 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <LL_RCC_SetAPB2Prescaler+0x24>)
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000440:	4904      	ldr	r1, [pc, #16]	; (8000454 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4313      	orrs	r3, r2
 8000446:	608b      	str	r3, [r1, #8]
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	40023800 	.word	0x40023800

08000458 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <LL_RCC_PLL_Enable+0x1c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a04      	ldr	r2, [pc, #16]	; (8000474 <LL_RCC_PLL_Enable+0x1c>)
 8000462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000466:	6013      	str	r3, [r2, #0]
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40023800 	.word	0x40023800

08000478 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <LL_RCC_PLL_IsReady+0x24>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000488:	bf0c      	ite	eq
 800048a:	2301      	moveq	r3, #1
 800048c:	2300      	movne	r3, #0
 800048e:	b2db      	uxtb	r3, r3
}
 8000490:	4618      	mov	r0, r3
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40023800 	.word	0x40023800

080004a0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
 80004ac:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80004b0:	685a      	ldr	r2, [r3, #4]
 80004b2:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80004b4:	4013      	ands	r3, r2
 80004b6:	68f9      	ldr	r1, [r7, #12]
 80004b8:	68ba      	ldr	r2, [r7, #8]
 80004ba:	4311      	orrs	r1, r2
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	0192      	lsls	r2, r2, #6
 80004c0:	430a      	orrs	r2, r1
 80004c2:	4908      	ldr	r1, [pc, #32]	; (80004e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80004c4:	4313      	orrs	r3, r2
 80004c6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80004d0:	4904      	ldr	r1, [pc, #16]	; (80004e4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80004d8:	bf00      	nop
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	40023800 	.word	0x40023800
 80004e8:	ffbf8000 	.word	0xffbf8000

080004ec <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 80004fc:	685a      	ldr	r2, [r3, #4]
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 8000500:	4013      	ands	r3, r2
 8000502:	68f9      	ldr	r1, [r7, #12]
 8000504:	68ba      	ldr	r2, [r7, #8]
 8000506:	4311      	orrs	r1, r2
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	0192      	lsls	r2, r2, #6
 800050c:	4311      	orrs	r1, r2
 800050e:	683a      	ldr	r2, [r7, #0]
 8000510:	430a      	orrs	r2, r1
 8000512:	4904      	ldr	r1, [pc, #16]	; (8000524 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8000514:	4313      	orrs	r3, r2
 8000516:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40023800 	.word	0x40023800
 8000528:	f0bf8000 	.word	0xf0bf8000

0800052c <LL_AHB1_GRP1_EnableClock>:
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000538:	4907      	ldr	r1, [pc, #28]	; (8000558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4313      	orrs	r3, r2
 800053e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4013      	ands	r3, r2
 8000548:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800054a:	68fb      	ldr	r3, [r7, #12]
}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40023800 	.word	0x40023800

0800055c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <LL_FLASH_SetLatency+0x24>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f023 0207 	bic.w	r2, r3, #7
 800056c:	4904      	ldr	r1, [pc, #16]	; (8000580 <LL_FLASH_SetLatency+0x24>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	600b      	str	r3, [r1, #0]
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40023c00 	.word	0x40023c00

08000584 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <LL_FLASH_GetLatency+0x18>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f003 0307 	and.w	r3, r3, #7
}
 8000590:	4618      	mov	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40023c00 	.word	0x40023c00

080005a0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80005b0:	4904      	ldr	r1, [pc, #16]	; (80005c4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	600b      	str	r3, [r1, #0]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	40007000 	.word	0x40007000

080005c8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <LL_PWR_IsActiveFlag_VOS+0x24>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80005d8:	bf0c      	ite	eq
 80005da:	2301      	moveq	r3, #1
 80005dc:	2300      	movne	r3, #0
 80005de:	b2db      	uxtb	r3, r3
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40007000 	.word	0x40007000

080005f0 <LL_GPIO_ResetOutputPin>:
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	041a      	lsls	r2, r3, #16
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	619a      	str	r2, [r3, #24]
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 f9cd 	bl	80009b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f807 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f85d 	bl	80006d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  AppInit();
 800061e:	f7ff fdd3 	bl	80001c8 <AppInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  AppTask();
 8000622:	f7ff fdd7 	bl	80001d4 <AppTask>
 8000626:	e7fc      	b.n	8000622 <main+0x14>

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 800062c:	2005      	movs	r0, #5
 800062e:	f7ff ff95 	bl	800055c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000632:	bf00      	nop
 8000634:	f7ff ffa6 	bl	8000584 <LL_FLASH_GetLatency>
 8000638:	4603      	mov	r3, r0
 800063a:	2b05      	cmp	r3, #5
 800063c:	d1fa      	bne.n	8000634 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800063e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000642:	f7ff ffad 	bl	80005a0 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000646:	bf00      	nop
 8000648:	f7ff ffbe 	bl	80005c8 <LL_PWR_IsActiveFlag_VOS>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0fa      	beq.n	8000648 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSE_Enable();
 8000652:	f7ff fe7f 	bl	8000354 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000656:	bf00      	nop
 8000658:	f7ff fe8c 	bl	8000374 <LL_RCC_HSE_IsReady>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d1fa      	bne.n	8000658 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8000662:	2300      	movs	r3, #0
 8000664:	22a8      	movs	r2, #168	; 0xa8
 8000666:	2104      	movs	r1, #4
 8000668:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800066c:	f7ff ff18 	bl	80004a0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLQ_DIV_7);
 8000670:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8000674:	22a8      	movs	r2, #168	; 0xa8
 8000676:	2104      	movs	r1, #4
 8000678:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800067c:	f7ff ff36 	bl	80004ec <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 8000680:	f7ff feea 	bl	8000458 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000684:	bf00      	nop
 8000686:	f7ff fef7 	bl	8000478 <LL_RCC_PLL_IsReady>
 800068a:	4603      	mov	r3, r0
 800068c:	2b01      	cmp	r3, #1
 800068e:	d1fa      	bne.n	8000686 <SystemClock_Config+0x5e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff fea5 	bl	80003e0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000696:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800069a:	f7ff feb5 	bl	8000408 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800069e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80006a2:	f7ff fec5 	bl	8000430 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80006a6:	2002      	movs	r0, #2
 80006a8:	f7ff fe78 	bl	800039c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80006ac:	bf00      	nop
 80006ae:	f7ff fe89 	bl	80003c4 <LL_RCC_GetSysClkSource>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b08      	cmp	r3, #8
 80006b6:	d1fa      	bne.n	80006ae <SystemClock_Config+0x86>
  {

  }
  LL_SetSystemCoreClock(168000000);
 80006b8:	4806      	ldr	r0, [pc, #24]	; (80006d4 <SystemClock_Config+0xac>)
 80006ba:	f004 f9e5 	bl	8004a88 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80006be:	200f      	movs	r0, #15
 80006c0:	f000 f9cc 	bl	8000a5c <HAL_InitTick>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ca:	f000 f875 	bl	80007b8 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	0a037a00 	.word	0x0a037a00

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	463b      	mov	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
 80006ec:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80006ee:	2080      	movs	r0, #128	; 0x80
 80006f0:	f7ff ff1c 	bl	800052c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f7ff ff19 	bl	800052c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80006fa:	2002      	movs	r0, #2
 80006fc:	f7ff ff16 	bl	800052c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000700:	2008      	movs	r0, #8
 8000702:	f7ff ff13 	bl	800052c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000706:	2004      	movs	r0, #4
 8000708:	f7ff ff10 	bl	800052c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 800070c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000710:	4825      	ldr	r0, [pc, #148]	; (80007a8 <MX_GPIO_Init+0xd0>)
 8000712:	f7ff ff6d 	bl	80005f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12);
 8000716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071a:	4824      	ldr	r0, [pc, #144]	; (80007ac <MX_GPIO_Init+0xd4>)
 800071c:	f7ff ff68 	bl	80005f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_12);
 8000720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000724:	4822      	ldr	r0, [pc, #136]	; (80007b0 <MX_GPIO_Init+0xd8>)
 8000726:	f7ff ff63 	bl	80005f0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800072a:	2301      	movs	r3, #1
 800072c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	463b      	mov	r3, r7
 8000738:	4619      	mov	r1, r3
 800073a:	481e      	ldr	r0, [pc, #120]	; (80007b4 <MX_GPIO_Init+0xdc>)
 800073c:	f002 fc93 	bl	8003066 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000744:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000746:	2301      	movs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000756:	463b      	mov	r3, r7
 8000758:	4619      	mov	r1, r3
 800075a:	4813      	ldr	r0, [pc, #76]	; (80007a8 <MX_GPIO_Init+0xd0>)
 800075c:	f002 fc83 	bl	8003066 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000766:	2301      	movs	r3, #1
 8000768:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000776:	463b      	mov	r3, r7
 8000778:	4619      	mov	r1, r3
 800077a:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_GPIO_Init+0xd4>)
 800077c:	f002 fc73 	bl	8003066 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000786:	2301      	movs	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000796:	463b      	mov	r3, r7
 8000798:	4619      	mov	r1, r3
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_GPIO_Init+0xd8>)
 800079c:	f002 fc63 	bl	8003066 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40020400 	.word	0x40020400
 80007ac:	40020c00 	.word	0x40020c00
 80007b0:	40020800 	.word	0x40020800
 80007b4:	40020000 	.word	0x40020000

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <HAL_MspInit+0x4c>)
 80007d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d8:	6453      	str	r3, [r2, #68]	; 0x44
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_MspInit+0x4c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6413      	str	r3, [r2, #64]	; 0x40
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000834:	d132      	bne.n	800089c <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <HAL_PCD_MspInit+0x90>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a19      	ldr	r2, [pc, #100]	; (80008a4 <HAL_PCD_MspInit+0x90>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <HAL_PCD_MspInit+0x90>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000852:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000864:	230a      	movs	r3, #10
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <HAL_PCD_MspInit+0x94>)
 8000870:	f000 fd1a 	bl	80012a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_PCD_MspInit+0x90>)
 8000876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000878:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_PCD_MspInit+0x90>)
 800087a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087e:	6353      	str	r3, [r2, #52]	; 0x34
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <HAL_PCD_MspInit+0x90>)
 8000886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <HAL_PCD_MspInit+0x90>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088e:	6453      	str	r3, [r2, #68]	; 0x44
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <HAL_PCD_MspInit+0x90>)
 8000892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000

080008ac <HAL_PCD_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspDeInit(PCD_HandleTypeDef* hpcd)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB_OTG_FS)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008bc:	d10a      	bne.n	80008d4 <HAL_PCD_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <HAL_PCD_MspDeInit+0x30>)
 80008c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008c2:	4a06      	ldr	r2, [pc, #24]	; (80008dc <HAL_PCD_MspDeInit+0x30>)
 80008c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008c8:	6353      	str	r3, [r2, #52]	; 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 80008ca:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <HAL_PCD_MspDeInit+0x34>)
 80008d0:	f000 fe86 	bl	80015e0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }

}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020000 	.word	0x40020000

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <NMI_Handler+0x4>

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 f8c4 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <SystemInit+0x20>)
 800093e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <SystemInit+0x20>)
 8000944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800095c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000994 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000962:	490e      	ldr	r1, [pc, #56]	; (800099c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000964:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000978:	4c0b      	ldr	r4, [pc, #44]	; (80009a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000986:	f7ff ffd7 	bl	8000938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800098a:	f007 fca5 	bl	80082d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098e:	f7ff fe3e 	bl	800060e <main>
  bx  lr    
 8000992:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800099c:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80009a0:	08008430 	.word	0x08008430
  ldr r2, =_sbss
 80009a4:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80009a8:	2000125c 	.word	0x2000125c

080009ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <ADC_IRQHandler>
	...

080009b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0d      	ldr	r2, [pc, #52]	; (80009f0 <HAL_Init+0x40>)
 80009ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c0:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <HAL_Init+0x40>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <HAL_Init+0x40>)
 80009c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <HAL_Init+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a07      	ldr	r2, [pc, #28]	; (80009f0 <HAL_Init+0x40>)
 80009d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 f959 	bl	8000c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009de:	200f      	movs	r0, #15
 80009e0:	f000 f83c 	bl	8000a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e4:	f7ff feee 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023c00 	.word	0x40023c00

080009f4 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <HAL_DeInit+0x54>)
 80009fa:	f04f 32ff 	mov.w	r2, #4294967295
 80009fe:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_DeInit+0x54>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <HAL_DeInit+0x54>)
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_DeInit+0x54>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_DeInit+0x54>)
 8000a16:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <HAL_DeInit+0x54>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_DeInit+0x54>)
 8000a24:	f04f 32ff 	mov.w	r2, #4294967295
 8000a28:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000a2a:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <HAL_DeInit+0x54>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <HAL_DeInit+0x54>)
 8000a32:	f04f 32ff 	mov.w	r2, #4294967295
 8000a36:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <HAL_DeInit+0x54>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000a3e:	f000 f805 	bl	8000a4c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_InitTick+0x54>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_InitTick+0x58>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f92f 	bl	8000cde <HAL_SYSTICK_Config>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00e      	b.n	8000aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b0f      	cmp	r3, #15
 8000a8e:	d80a      	bhi.n	8000aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a90:	2200      	movs	r2, #0
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f000 f905 	bl	8000ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a9c:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <HAL_InitTick+0x5c>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e000      	b.n	8000aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000004 	.word	0x20000004

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_IncTick+0x20>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x24>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_IncTick+0x24>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	200006b4 	.word	0x200006b4

08000ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aec:	f005 fd80 	bl	80065f0 <HAL_GetTick>
 8000af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000afc:	d005      	beq.n	8000b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_Delay+0x44>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b0a:	bf00      	nop
 8000b0c:	f005 fd70 	bl	80065f0 <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d8f7      	bhi.n	8000b0c <HAL_Delay+0x28>
  {
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000008 	.word	0x20000008

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db0a      	blt.n	8000bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	490c      	ldr	r1, [pc, #48]	; (8000bdc <__NVIC_SetPriority+0x4c>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	0112      	lsls	r2, r2, #4
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb8:	e00a      	b.n	8000bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4908      	ldr	r1, [pc, #32]	; (8000be0 <__NVIC_SetPriority+0x50>)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	f003 030f 	and.w	r3, r3, #15
 8000bc6:	3b04      	subs	r3, #4
 8000bc8:	0112      	lsls	r2, r2, #4
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	440b      	add	r3, r1
 8000bce:	761a      	strb	r2, [r3, #24]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000e100 	.word	0xe000e100
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b089      	sub	sp, #36	; 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f1c3 0307 	rsb	r3, r3, #7
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	bf28      	it	cs
 8000c02:	2304      	movcs	r3, #4
 8000c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	2b06      	cmp	r3, #6
 8000c0c:	d902      	bls.n	8000c14 <NVIC_EncodePriority+0x30>
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3b03      	subs	r3, #3
 8000c12:	e000      	b.n	8000c16 <NVIC_EncodePriority+0x32>
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43da      	mvns	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	43d9      	mvns	r1, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	4313      	orrs	r3, r2
         );
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3724      	adds	r7, #36	; 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c5c:	d301      	bcc.n	8000c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00f      	b.n	8000c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <SysTick_Config+0x40>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6a:	210f      	movs	r1, #15
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f7ff ff8e 	bl	8000b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <SysTick_Config+0x40>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <SysTick_Config+0x40>)
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	e000e010 	.word	0xe000e010

08000c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ff47 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb8:	f7ff ff5c 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	68b9      	ldr	r1, [r7, #8]
 8000cc2:	6978      	ldr	r0, [r7, #20]
 8000cc4:	f7ff ff8e 	bl	8000be4 <NVIC_EncodePriority>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff5d 	bl	8000b90 <__NVIC_SetPriority>
}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ffb0 	bl	8000c4c <SysTick_Config>
 8000cec:	4603      	mov	r3, r0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <HAL_FLASH_Program+0xa0>)
 8000d0c:	7e1b      	ldrb	r3, [r3, #24]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d101      	bne.n	8000d16 <HAL_FLASH_Program+0x1e>
 8000d12:	2302      	movs	r3, #2
 8000d14:	e03b      	b.n	8000d8e <HAL_FLASH_Program+0x96>
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <HAL_FLASH_Program+0xa0>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d20:	f000 f870 	bl	8000e04 <FLASH_WaitForLastOperation>
 8000d24:	4603      	mov	r3, r0
 8000d26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d12b      	bne.n	8000d86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d105      	bne.n	8000d40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000d34:	783b      	ldrb	r3, [r7, #0]
 8000d36:	4619      	mov	r1, r3
 8000d38:	68b8      	ldr	r0, [r7, #8]
 8000d3a:	f000 f91b 	bl	8000f74 <FLASH_Program_Byte>
 8000d3e:	e016      	b.n	8000d6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d105      	bne.n	8000d52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000d46:	883b      	ldrh	r3, [r7, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	68b8      	ldr	r0, [r7, #8]
 8000d4c:	f000 f8ee 	bl	8000f2c <FLASH_Program_HalfWord>
 8000d50:	e00d      	b.n	8000d6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d105      	bne.n	8000d64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	68b8      	ldr	r0, [r7, #8]
 8000d5e:	f000 f8c3 	bl	8000ee8 <FLASH_Program_Word>
 8000d62:	e004      	b.n	8000d6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d68:	68b8      	ldr	r0, [r7, #8]
 8000d6a:	f000 f88b 	bl	8000e84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000d6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d72:	f000 f847 	bl	8000e04 <FLASH_WaitForLastOperation>
 8000d76:	4603      	mov	r3, r0
 8000d78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_FLASH_Program+0xa4>)
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <HAL_FLASH_Program+0xa4>)
 8000d80:	f023 0301 	bic.w	r3, r3, #1
 8000d84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <HAL_FLASH_Program+0xa0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200006b8 	.word	0x200006b8
 8000d9c:	40023c00 	.word	0x40023c00

08000da0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_FLASH_Unlock+0x38>)
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	da0b      	bge.n	8000dca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_FLASH_Unlock+0x38>)
 8000db4:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <HAL_FLASH_Unlock+0x3c>)
 8000db6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <HAL_FLASH_Unlock+0x38>)
 8000dba:	4a09      	ldr	r2, [pc, #36]	; (8000de0 <HAL_FLASH_Unlock+0x40>)
 8000dbc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_FLASH_Unlock+0x38>)
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	da01      	bge.n	8000dca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000dca:	79fb      	ldrb	r3, [r7, #7]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	40023c00 	.word	0x40023c00
 8000ddc:	45670123 	.word	0x45670123
 8000de0:	cdef89ab 	.word	0xcdef89ab

08000de4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_FLASH_Lock+0x1c>)
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_FLASH_Lock+0x1c>)
 8000dee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000df2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	40023c00 	.word	0x40023c00

08000e04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <FLASH_WaitForLastOperation+0x78>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000e16:	f005 fbeb 	bl	80065f0 <HAL_GetTick>
 8000e1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000e1c:	e010      	b.n	8000e40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d00c      	beq.n	8000e40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d007      	beq.n	8000e3c <FLASH_WaitForLastOperation+0x38>
 8000e2c:	f005 fbe0 	bl	80065f0 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d201      	bcs.n	8000e40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e019      	b.n	8000e74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <FLASH_WaitForLastOperation+0x7c>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1e8      	bne.n	8000e1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <FLASH_WaitForLastOperation+0x7c>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <FLASH_WaitForLastOperation+0x7c>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <FLASH_WaitForLastOperation+0x7c>)
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000e6a:	f000 f8a5 	bl	8000fb8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
  
}  
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200006b8 	.word	0x200006b8
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <FLASH_Program_DoubleWord+0x60>)
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <FLASH_Program_DoubleWord+0x60>)
 8000e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <FLASH_Program_DoubleWord+0x60>)
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <FLASH_Program_DoubleWord+0x60>)
 8000ea2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000ea6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <FLASH_Program_DoubleWord+0x60>)
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <FLASH_Program_DoubleWord+0x60>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	683a      	ldr	r2, [r7, #0]
 8000eb8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000eba:	f3bf 8f6f 	isb	sy
}
 8000ebe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	f04f 0300 	mov.w	r3, #0
 8000ecc:	000a      	movs	r2, r1
 8000ece:	2300      	movs	r3, #0
 8000ed0:	68f9      	ldr	r1, [r7, #12]
 8000ed2:	3104      	adds	r1, #4
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	600b      	str	r3, [r1, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <FLASH_Program_Word+0x40>)
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	4a0c      	ldr	r2, [pc, #48]	; (8000f28 <FLASH_Program_Word+0x40>)
 8000ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000efc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <FLASH_Program_Word+0x40>)
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <FLASH_Program_Word+0x40>)
 8000f04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <FLASH_Program_Word+0x40>)
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	4a06      	ldr	r2, [pc, #24]	; (8000f28 <FLASH_Program_Word+0x40>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	601a      	str	r2, [r3, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	40023c00 	.word	0x40023c00

08000f2c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <FLASH_Program_HalfWord+0x44>)
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <FLASH_Program_HalfWord+0x44>)
 8000f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <FLASH_Program_HalfWord+0x44>)
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <FLASH_Program_HalfWord+0x44>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <FLASH_Program_HalfWord+0x44>)
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <FLASH_Program_HalfWord+0x44>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	887a      	ldrh	r2, [r7, #2]
 8000f60:	801a      	strh	r2, [r3, #0]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023c00 	.word	0x40023c00

08000f74 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <FLASH_Program_Byte+0x40>)
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <FLASH_Program_Byte+0x40>)
 8000f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <FLASH_Program_Byte+0x40>)
 8000f8e:	4a09      	ldr	r2, [pc, #36]	; (8000fb4 <FLASH_Program_Byte+0x40>)
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <FLASH_Program_Byte+0x40>)
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <FLASH_Program_Byte+0x40>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	78fa      	ldrb	r2, [r7, #3]
 8000fa4:	701a      	strb	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40023c00 	.word	0x40023c00

08000fb8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <FLASH_SetErrorCode+0xa4>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	f003 0310 	and.w	r3, r3, #16
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d008      	beq.n	8000fda <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000fc8:	4b25      	ldr	r3, [pc, #148]	; (8001060 <FLASH_SetErrorCode+0xa8>)
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	f043 0310 	orr.w	r3, r3, #16
 8000fd0:	4a23      	ldr	r2, [pc, #140]	; (8001060 <FLASH_SetErrorCode+0xa8>)
 8000fd2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000fd4:	4b21      	ldr	r3, [pc, #132]	; (800105c <FLASH_SetErrorCode+0xa4>)
 8000fd6:	2210      	movs	r2, #16
 8000fd8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000fda:	4b20      	ldr	r3, [pc, #128]	; (800105c <FLASH_SetErrorCode+0xa4>)
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	f003 0320 	and.w	r3, r3, #32
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d008      	beq.n	8000ff8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <FLASH_SetErrorCode+0xa8>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f043 0308 	orr.w	r3, r3, #8
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <FLASH_SetErrorCode+0xa8>)
 8000ff0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <FLASH_SetErrorCode+0xa4>)
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <FLASH_SetErrorCode+0xa4>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001000:	2b00      	cmp	r3, #0
 8001002:	d008      	beq.n	8001016 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <FLASH_SetErrorCode+0xa8>)
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <FLASH_SetErrorCode+0xa8>)
 800100e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <FLASH_SetErrorCode+0xa4>)
 8001012:	2240      	movs	r2, #64	; 0x40
 8001014:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <FLASH_SetErrorCode+0xa4>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101e:	2b00      	cmp	r3, #0
 8001020:	d008      	beq.n	8001034 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <FLASH_SetErrorCode+0xa8>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f043 0302 	orr.w	r3, r3, #2
 800102a:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <FLASH_SetErrorCode+0xa8>)
 800102c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <FLASH_SetErrorCode+0xa4>)
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <FLASH_SetErrorCode+0xa4>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d008      	beq.n	8001052 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <FLASH_SetErrorCode+0xa8>)
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	f043 0320 	orr.w	r3, r3, #32
 8001048:	4a05      	ldr	r2, [pc, #20]	; (8001060 <FLASH_SetErrorCode+0xa8>)
 800104a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <FLASH_SetErrorCode+0xa4>)
 800104e:	2202      	movs	r2, #2
 8001050:	60da      	str	r2, [r3, #12]
  }
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40023c00 	.word	0x40023c00
 8001060:	200006b8 	.word	0x200006b8

08001064 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001076:	4b31      	ldr	r3, [pc, #196]	; (800113c <HAL_FLASHEx_Erase+0xd8>)
 8001078:	7e1b      	ldrb	r3, [r3, #24]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d101      	bne.n	8001082 <HAL_FLASHEx_Erase+0x1e>
 800107e:	2302      	movs	r3, #2
 8001080:	e058      	b.n	8001134 <HAL_FLASHEx_Erase+0xd0>
 8001082:	4b2e      	ldr	r3, [pc, #184]	; (800113c <HAL_FLASHEx_Erase+0xd8>)
 8001084:	2201      	movs	r2, #1
 8001086:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001088:	f24c 3050 	movw	r0, #50000	; 0xc350
 800108c:	f7ff feba 	bl	8000e04 <FLASH_WaitForLastOperation>
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d148      	bne.n	800112c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d115      	bne.n	80010d6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4610      	mov	r0, r2
 80010b8:	f000 f844 	bl	8001144 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010c0:	f7ff fea0 	bl	8000e04 <FLASH_WaitForLastOperation>
 80010c4:	4603      	mov	r3, r0
 80010c6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <HAL_FLASHEx_Erase+0xdc>)
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <HAL_FLASHEx_Erase+0xdc>)
 80010ce:	f023 0304 	bic.w	r3, r3, #4
 80010d2:	6113      	str	r3, [r2, #16]
 80010d4:	e028      	b.n	8001128 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	e01c      	b.n	8001118 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	4619      	mov	r1, r3
 80010e6:	68b8      	ldr	r0, [r7, #8]
 80010e8:	f000 f850 	bl	800118c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010f0:	f7ff fe88 	bl	8000e04 <FLASH_WaitForLastOperation>
 80010f4:	4603      	mov	r3, r0
 80010f6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <HAL_FLASHEx_Erase+0xdc>)
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	4a10      	ldr	r2, [pc, #64]	; (8001140 <HAL_FLASHEx_Erase+0xdc>)
 80010fe:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001102:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	601a      	str	r2, [r3, #0]
          break;
 8001110:	e00a      	b.n	8001128 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	3301      	adds	r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	4413      	add	r3, r2
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	429a      	cmp	r2, r3
 8001126:	d3da      	bcc.n	80010de <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001128:	f000 f878 	bl	800121c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <HAL_FLASHEx_Erase+0xd8>)
 800112e:	2200      	movs	r2, #0
 8001130:	761a      	strb	r2, [r3, #24]

  return status;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200006b8 	.word	0x200006b8
 8001140:	40023c00 	.word	0x40023c00

08001144 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <FLASH_MassErase+0x44>)
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	4a0c      	ldr	r2, [pc, #48]	; (8001188 <FLASH_MassErase+0x44>)
 8001156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800115a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <FLASH_MassErase+0x44>)
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	4a09      	ldr	r2, [pc, #36]	; (8001188 <FLASH_MassErase+0x44>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <FLASH_MassErase+0x44>)
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	4313      	orrs	r3, r2
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <FLASH_MassErase+0x44>)
 8001174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001178:	6113      	str	r3, [r2, #16]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023c00 	.word	0x40023c00

0800118c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d102      	bne.n	80011a8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	e010      	b.n	80011ca <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d103      	bne.n	80011b6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80011ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	e009      	b.n	80011ca <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80011b6:	78fb      	ldrb	r3, [r7, #3]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d103      	bne.n	80011c4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80011bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	e002      	b.n	80011ca <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80011c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <FLASH_Erase_Sector+0x8c>)
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <FLASH_Erase_Sector+0x8c>)
 80011d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <FLASH_Erase_Sector+0x8c>)
 80011d8:	691a      	ldr	r2, [r3, #16]
 80011da:	490f      	ldr	r1, [pc, #60]	; (8001218 <FLASH_Erase_Sector+0x8c>)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <FLASH_Erase_Sector+0x8c>)
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	4a0c      	ldr	r2, [pc, #48]	; (8001218 <FLASH_Erase_Sector+0x8c>)
 80011e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <FLASH_Erase_Sector+0x8c>)
 80011f0:	691a      	ldr	r2, [r3, #16]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <FLASH_Erase_Sector+0x8c>)
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <FLASH_Erase_Sector+0x8c>)
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <FLASH_Erase_Sector+0x8c>)
 8001206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120a:	6113      	str	r3, [r2, #16]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	40023c00 	.word	0x40023c00

0800121c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001220:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <FLASH_FlushCaches+0x88>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001228:	2b00      	cmp	r3, #0
 800122a:	d017      	beq.n	800125c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <FLASH_FlushCaches+0x88>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a1c      	ldr	r2, [pc, #112]	; (80012a4 <FLASH_FlushCaches+0x88>)
 8001232:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001236:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <FLASH_FlushCaches+0x88>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <FLASH_FlushCaches+0x88>)
 800123e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <FLASH_FlushCaches+0x88>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <FLASH_FlushCaches+0x88>)
 800124a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800124e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <FLASH_FlushCaches+0x88>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a13      	ldr	r2, [pc, #76]	; (80012a4 <FLASH_FlushCaches+0x88>)
 8001256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <FLASH_FlushCaches+0x88>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001264:	2b00      	cmp	r3, #0
 8001266:	d017      	beq.n	8001298 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <FLASH_FlushCaches+0x88>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <FLASH_FlushCaches+0x88>)
 800126e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001272:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <FLASH_FlushCaches+0x88>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <FLASH_FlushCaches+0x88>)
 800127a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <FLASH_FlushCaches+0x88>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <FLASH_FlushCaches+0x88>)
 8001286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800128a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <FLASH_FlushCaches+0x88>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <FLASH_FlushCaches+0x88>)
 8001292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001296:	6013      	str	r3, [r2, #0]
  }
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023c00 	.word	0x40023c00

080012a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
 80012c2:	e16b      	b.n	800159c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c4:	2201      	movs	r2, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	429a      	cmp	r2, r3
 80012de:	f040 815a 	bne.w	8001596 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d005      	beq.n	80012fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d130      	bne.n	800135c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001330:	2201      	movs	r2, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 0201 	and.w	r2, r3, #1
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b03      	cmp	r3, #3
 8001366:	d017      	beq.n	8001398 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	2203      	movs	r2, #3
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d123      	bne.n	80013ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	08da      	lsrs	r2, r3, #3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3208      	adds	r2, #8
 80013ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	220f      	movs	r2, #15
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	08da      	lsrs	r2, r3, #3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3208      	adds	r2, #8
 80013e6:	69b9      	ldr	r1, [r7, #24]
 80013e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	2203      	movs	r2, #3
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0203 	and.w	r2, r3, #3
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 80b4 	beq.w	8001596 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b60      	ldr	r3, [pc, #384]	; (80015b4 <HAL_GPIO_Init+0x30c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a5f      	ldr	r2, [pc, #380]	; (80015b4 <HAL_GPIO_Init+0x30c>)
 8001438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b5d      	ldr	r3, [pc, #372]	; (80015b4 <HAL_GPIO_Init+0x30c>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800144a:	4a5b      	ldr	r2, [pc, #364]	; (80015b8 <HAL_GPIO_Init+0x310>)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3302      	adds	r3, #2
 8001452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	220f      	movs	r2, #15
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a52      	ldr	r2, [pc, #328]	; (80015bc <HAL_GPIO_Init+0x314>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d02b      	beq.n	80014ce <HAL_GPIO_Init+0x226>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a51      	ldr	r2, [pc, #324]	; (80015c0 <HAL_GPIO_Init+0x318>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d025      	beq.n	80014ca <HAL_GPIO_Init+0x222>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a50      	ldr	r2, [pc, #320]	; (80015c4 <HAL_GPIO_Init+0x31c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d01f      	beq.n	80014c6 <HAL_GPIO_Init+0x21e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4f      	ldr	r2, [pc, #316]	; (80015c8 <HAL_GPIO_Init+0x320>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d019      	beq.n	80014c2 <HAL_GPIO_Init+0x21a>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4e      	ldr	r2, [pc, #312]	; (80015cc <HAL_GPIO_Init+0x324>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d013      	beq.n	80014be <HAL_GPIO_Init+0x216>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4d      	ldr	r2, [pc, #308]	; (80015d0 <HAL_GPIO_Init+0x328>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00d      	beq.n	80014ba <HAL_GPIO_Init+0x212>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4c      	ldr	r2, [pc, #304]	; (80015d4 <HAL_GPIO_Init+0x32c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d007      	beq.n	80014b6 <HAL_GPIO_Init+0x20e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4b      	ldr	r2, [pc, #300]	; (80015d8 <HAL_GPIO_Init+0x330>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_GPIO_Init+0x20a>
 80014ae:	2307      	movs	r3, #7
 80014b0:	e00e      	b.n	80014d0 <HAL_GPIO_Init+0x228>
 80014b2:	2308      	movs	r3, #8
 80014b4:	e00c      	b.n	80014d0 <HAL_GPIO_Init+0x228>
 80014b6:	2306      	movs	r3, #6
 80014b8:	e00a      	b.n	80014d0 <HAL_GPIO_Init+0x228>
 80014ba:	2305      	movs	r3, #5
 80014bc:	e008      	b.n	80014d0 <HAL_GPIO_Init+0x228>
 80014be:	2304      	movs	r3, #4
 80014c0:	e006      	b.n	80014d0 <HAL_GPIO_Init+0x228>
 80014c2:	2303      	movs	r3, #3
 80014c4:	e004      	b.n	80014d0 <HAL_GPIO_Init+0x228>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e002      	b.n	80014d0 <HAL_GPIO_Init+0x228>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <HAL_GPIO_Init+0x228>
 80014ce:	2300      	movs	r3, #0
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	f002 0203 	and.w	r2, r2, #3
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	4093      	lsls	r3, r2
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e0:	4935      	ldr	r1, [pc, #212]	; (80015b8 <HAL_GPIO_Init+0x310>)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ee:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <HAL_GPIO_Init+0x334>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001512:	4a32      	ldr	r2, [pc, #200]	; (80015dc <HAL_GPIO_Init+0x334>)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001518:	4b30      	ldr	r3, [pc, #192]	; (80015dc <HAL_GPIO_Init+0x334>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800153c:	4a27      	ldr	r2, [pc, #156]	; (80015dc <HAL_GPIO_Init+0x334>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <HAL_GPIO_Init+0x334>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001566:	4a1d      	ldr	r2, [pc, #116]	; (80015dc <HAL_GPIO_Init+0x334>)
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_GPIO_Init+0x334>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001590:	4a12      	ldr	r2, [pc, #72]	; (80015dc <HAL_GPIO_Init+0x334>)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3301      	adds	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2b0f      	cmp	r3, #15
 80015a0:	f67f ae90 	bls.w	80012c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3724      	adds	r7, #36	; 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40013800 	.word	0x40013800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020400 	.word	0x40020400
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020c00 	.word	0x40020c00
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40021400 	.word	0x40021400
 80015d4:	40021800 	.word	0x40021800
 80015d8:	40021c00 	.word	0x40021c00
 80015dc:	40013c00 	.word	0x40013c00

080015e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e0cd      	b.n	8001798 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015fc:	2201      	movs	r2, #1
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	429a      	cmp	r2, r3
 8001614:	f040 80bd 	bne.w	8001792 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001618:	4a65      	ldr	r2, [pc, #404]	; (80017b0 <HAL_GPIO_DeInit+0x1d0>)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	3302      	adds	r3, #2
 8001620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001624:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	220f      	movs	r2, #15
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	4013      	ands	r3, r2
 8001638:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a5d      	ldr	r2, [pc, #372]	; (80017b4 <HAL_GPIO_DeInit+0x1d4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d02b      	beq.n	800169a <HAL_GPIO_DeInit+0xba>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a5c      	ldr	r2, [pc, #368]	; (80017b8 <HAL_GPIO_DeInit+0x1d8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d025      	beq.n	8001696 <HAL_GPIO_DeInit+0xb6>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a5b      	ldr	r2, [pc, #364]	; (80017bc <HAL_GPIO_DeInit+0x1dc>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d01f      	beq.n	8001692 <HAL_GPIO_DeInit+0xb2>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a5a      	ldr	r2, [pc, #360]	; (80017c0 <HAL_GPIO_DeInit+0x1e0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d019      	beq.n	800168e <HAL_GPIO_DeInit+0xae>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a59      	ldr	r2, [pc, #356]	; (80017c4 <HAL_GPIO_DeInit+0x1e4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d013      	beq.n	800168a <HAL_GPIO_DeInit+0xaa>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a58      	ldr	r2, [pc, #352]	; (80017c8 <HAL_GPIO_DeInit+0x1e8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d00d      	beq.n	8001686 <HAL_GPIO_DeInit+0xa6>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a57      	ldr	r2, [pc, #348]	; (80017cc <HAL_GPIO_DeInit+0x1ec>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d007      	beq.n	8001682 <HAL_GPIO_DeInit+0xa2>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a56      	ldr	r2, [pc, #344]	; (80017d0 <HAL_GPIO_DeInit+0x1f0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_GPIO_DeInit+0x9e>
 800167a:	2307      	movs	r3, #7
 800167c:	e00e      	b.n	800169c <HAL_GPIO_DeInit+0xbc>
 800167e:	2308      	movs	r3, #8
 8001680:	e00c      	b.n	800169c <HAL_GPIO_DeInit+0xbc>
 8001682:	2306      	movs	r3, #6
 8001684:	e00a      	b.n	800169c <HAL_GPIO_DeInit+0xbc>
 8001686:	2305      	movs	r3, #5
 8001688:	e008      	b.n	800169c <HAL_GPIO_DeInit+0xbc>
 800168a:	2304      	movs	r3, #4
 800168c:	e006      	b.n	800169c <HAL_GPIO_DeInit+0xbc>
 800168e:	2303      	movs	r3, #3
 8001690:	e004      	b.n	800169c <HAL_GPIO_DeInit+0xbc>
 8001692:	2302      	movs	r3, #2
 8001694:	e002      	b.n	800169c <HAL_GPIO_DeInit+0xbc>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_GPIO_DeInit+0xbc>
 800169a:	2300      	movs	r3, #0
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	f002 0203 	and.w	r2, r2, #3
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	4093      	lsls	r3, r2
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d132      	bne.n	8001712 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80016ac:	4b49      	ldr	r3, [pc, #292]	; (80017d4 <HAL_GPIO_DeInit+0x1f4>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	4947      	ldr	r1, [pc, #284]	; (80017d4 <HAL_GPIO_DeInit+0x1f4>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80016ba:	4b46      	ldr	r3, [pc, #280]	; (80017d4 <HAL_GPIO_DeInit+0x1f4>)
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	4944      	ldr	r1, [pc, #272]	; (80017d4 <HAL_GPIO_DeInit+0x1f4>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80016c8:	4b42      	ldr	r3, [pc, #264]	; (80017d4 <HAL_GPIO_DeInit+0x1f4>)
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	4940      	ldr	r1, [pc, #256]	; (80017d4 <HAL_GPIO_DeInit+0x1f4>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80016d6:	4b3f      	ldr	r3, [pc, #252]	; (80017d4 <HAL_GPIO_DeInit+0x1f4>)
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	43db      	mvns	r3, r3
 80016de:	493d      	ldr	r1, [pc, #244]	; (80017d4 <HAL_GPIO_DeInit+0x1f4>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	220f      	movs	r2, #15
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80016f4:	4a2e      	ldr	r2, [pc, #184]	; (80017b0 <HAL_GPIO_DeInit+0x1d0>)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3302      	adds	r3, #2
 80016fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	43da      	mvns	r2, r3
 8001704:	482a      	ldr	r0, [pc, #168]	; (80017b0 <HAL_GPIO_DeInit+0x1d0>)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	400a      	ands	r2, r1
 800170c:	3302      	adds	r3, #2
 800170e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2103      	movs	r1, #3
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	401a      	ands	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	08da      	lsrs	r2, r3, #3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3208      	adds	r2, #8
 8001730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	220f      	movs	r2, #15
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	08d2      	lsrs	r2, r2, #3
 8001748:	4019      	ands	r1, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3208      	adds	r2, #8
 800174e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2103      	movs	r1, #3
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	401a      	ands	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	2101      	movs	r1, #1
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	401a      	ands	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	2103      	movs	r1, #3
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	401a      	ands	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b0f      	cmp	r3, #15
 800179c:	f67f af2e 	bls.w	80015fc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	371c      	adds	r7, #28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40013800 	.word	0x40013800
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40020800 	.word	0x40020800
 80017c0:	40020c00 	.word	0x40020c00
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40021400 	.word	0x40021400
 80017cc:	40021800 	.word	0x40021800
 80017d0:	40021c00 	.word	0x40021c00
 80017d4:	40013c00 	.word	0x40013c00

080017d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017da:	b08f      	sub	sp, #60	; 0x3c
 80017dc:	af0a      	add	r7, sp, #40	; 0x28
 80017de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e10f      	b.n	8001a0a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d106      	bne.n	800180a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff f805 	bl	8000814 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2203      	movs	r2, #3
 800180e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f001 fda4 	bl	8003376 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	687e      	ldr	r6, [r7, #4]
 8001836:	466d      	mov	r5, sp
 8001838:	f106 0410 	add.w	r4, r6, #16
 800183c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001844:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001848:	e885 0003 	stmia.w	r5, {r0, r1}
 800184c:	1d33      	adds	r3, r6, #4
 800184e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001850:	6838      	ldr	r0, [r7, #0]
 8001852:	f001 fc7b 	bl	800314c <USB_CoreInit>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0d0      	b.n	8001a0a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f001 fd92 	bl	8003398 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e04a      	b.n	8001910 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	333d      	adds	r3, #61	; 0x3d
 800188a:	2201      	movs	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	333c      	adds	r3, #60	; 0x3c
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018a2:	7bfa      	ldrb	r2, [r7, #15]
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	b298      	uxth	r0, r3
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	3344      	adds	r3, #68	; 0x44
 80018b6:	4602      	mov	r2, r0
 80018b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4413      	add	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	3340      	adds	r3, #64	; 0x40
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	3348      	adds	r3, #72	; 0x48
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	334c      	adds	r3, #76	; 0x4c
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	3354      	adds	r3, #84	; 0x54
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	3301      	adds	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	429a      	cmp	r2, r3
 8001918:	d3af      	bcc.n	800187a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	e044      	b.n	80019aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4413      	add	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	3301      	adds	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
 80019aa:	7bfa      	ldrb	r2, [r7, #15]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d3b5      	bcc.n	8001920 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	687e      	ldr	r6, [r7, #4]
 80019bc:	466d      	mov	r5, sp
 80019be:	f106 0410 	add.w	r4, r6, #16
 80019c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80019d2:	1d33      	adds	r3, r6, #4
 80019d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d6:	6838      	ldr	r0, [r7, #0]
 80019d8:	f001 fd2a 	bl	8003430 <USB_DevInit>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2202      	movs	r2, #2
 80019e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00d      	b.n	8001a0a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 fec8 	bl	8004798 <USB_DevDisconnect>

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a12 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e015      	b.n	8001a50 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2203      	movs	r2, #3
 8001a28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 fe1b 	bl	800466c <USB_StopDevice>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e007      	b.n	8001a50 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7fe ff33 	bl	80008ac <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_PCD_Start+0x1c>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e020      	b.n	8001ab6 <HAL_PCD_Start+0x5e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d109      	bne.n	8001a98 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d005      	beq.n	8001a98 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f001 fc59 	bl	8003354 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 fe55 	bl	8004756 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_PCD_Stop+0x1c>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e026      	b.n	8001b28 <HAL_PCD_Stop+0x6a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 fc45 	bl	8003376 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fe51 	bl	8004798 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2110      	movs	r1, #16
 8001afc:	4618      	mov	r0, r3
 8001afe:	f001 fdfb 	bl	80036f8 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d109      	bne.n	8001b1e <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d005      	beq.n	8001b1e <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b08d      	sub	sp, #52	; 0x34
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f002 feda 	bl	8004900 <USB_GetMode>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f040 848a 	bne.w	8002468 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 fe3e 	bl	80047da <USB_ReadInterrupts>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 8480 	beq.w	8002466 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	0a1b      	lsrs	r3, r3, #8
 8001b70:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f002 fe2b 	bl	80047da <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d107      	bne.n	8001b9e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695a      	ldr	r2, [r3, #20]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f002 0202 	and.w	r2, r2, #2
 8001b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f002 fe19 	bl	80047da <USB_ReadInterrupts>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d161      	bne.n	8001c76 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699a      	ldr	r2, [r3, #24]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0210 	bic.w	r2, r2, #16
 8001bc0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f003 020f 	and.w	r2, r3, #15
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	3304      	adds	r3, #4
 8001be0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	0c5b      	lsrs	r3, r3, #17
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d124      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d035      	beq.n	8001c66 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	6a38      	ldr	r0, [r7, #32]
 8001c0e:	f002 fc01 	bl	8004414 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	691a      	ldr	r2, [r3, #16]
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c1e:	441a      	add	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	6a1a      	ldr	r2, [r3, #32]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c30:	441a      	add	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	621a      	str	r2, [r3, #32]
 8001c36:	e016      	b.n	8001c66 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	0c5b      	lsrs	r3, r3, #17
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	2b06      	cmp	r3, #6
 8001c42:	d110      	bne.n	8001c66 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	6a38      	ldr	r0, [r7, #32]
 8001c50:	f002 fbe0 	bl	8004414 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	6a1a      	ldr	r2, [r3, #32]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c60:	441a      	add	r2, r3
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699a      	ldr	r2, [r3, #24]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0210 	orr.w	r2, r2, #16
 8001c74:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f002 fdad 	bl	80047da <USB_ReadInterrupts>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c8a:	f040 80a7 	bne.w	8001ddc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 fdb2 	bl	8004800 <USB_ReadDevAllOutEpInterrupt>
 8001c9c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c9e:	e099      	b.n	8001dd4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 808e 	beq.w	8001dc8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f002 fdd6 	bl	8004868 <USB_ReadDevOutEPInterrupt>
 8001cbc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00c      	beq.n	8001ce2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001cda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 ff1f 	bl	8002b20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00c      	beq.n	8001d06 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	015a      	lsls	r2, r3, #5
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001cfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fff5 	bl	8002cf0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	f003 0310 	and.w	r3, r3, #16
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	015a      	lsls	r2, r3, #5
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2310      	movs	r3, #16
 8001d20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d030      	beq.n	8001d8e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d34:	2b80      	cmp	r3, #128	; 0x80
 8001d36:	d109      	bne.n	8001d4c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d4a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3304      	adds	r3, #4
 8001d60:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	78db      	ldrb	r3, [r3, #3]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d108      	bne.n	8001d7c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	4619      	mov	r1, r3
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f005 ffba 	bl	8007cf0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d88:	461a      	mov	r2, r3
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001da4:	461a      	mov	r2, r3
 8001da6:	2320      	movs	r3, #32
 8001da8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d009      	beq.n	8001dc8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dc6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	3301      	adds	r3, #1
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f47f af62 	bne.w	8001ca0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f002 fcfa 	bl	80047da <USB_ReadInterrupts>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001df0:	f040 80db 	bne.w	8001faa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 fd1b 	bl	8004834 <USB_ReadDevAllInEpInterrupt>
 8001dfe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001e04:	e0cd      	b.n	8001fa2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80c2 	beq.w	8001f96 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 fd41 	bl	80048a4 <USB_ReadDevInEPInterrupt>
 8001e22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d057      	beq.n	8001ede <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	2201      	movs	r2, #1
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69f9      	ldr	r1, [r7, #28]
 8001e4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e4e:	4013      	ands	r3, r2
 8001e50:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2301      	movs	r3, #1
 8001e62:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d132      	bne.n	8001ed2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	334c      	adds	r3, #76	; 0x4c
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4403      	add	r3, r0
 8001e8c:	3348      	adds	r3, #72	; 0x48
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4419      	add	r1, r3
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4403      	add	r3, r0
 8001ea0:	334c      	adds	r3, #76	; 0x4c
 8001ea2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d113      	bne.n	8001ed2 <HAL_PCD_IRQHandler+0x3a2>
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	3354      	adds	r3, #84	; 0x54
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d108      	bne.n	8001ed2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2101      	movs	r1, #1
 8001ece:	f002 fd49 	bl	8004964 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f005 fe81 	bl	8007be0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d008      	beq.n	8001efa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	015a      	lsls	r2, r3, #5
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	4413      	add	r3, r2
 8001ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f10:	461a      	mov	r2, r3
 8001f12:	2310      	movs	r3, #16
 8001f14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	015a      	lsls	r2, r3, #5
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	2340      	movs	r3, #64	; 0x40
 8001f30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d023      	beq.n	8001f84 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f3e:	6a38      	ldr	r0, [r7, #32]
 8001f40:	f001 fbda 	bl	80036f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	3338      	adds	r3, #56	; 0x38
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	3304      	adds	r3, #4
 8001f56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	78db      	ldrb	r3, [r3, #3]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d108      	bne.n	8001f72 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2200      	movs	r2, #0
 8001f64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f005 fed1 	bl	8007d14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2302      	movs	r3, #2
 8001f82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 fd37 	bl	8002a04 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	3301      	adds	r3, #1
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9e:	085b      	lsrs	r3, r3, #1
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f47f af2e 	bne.w	8001e06 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f002 fc13 	bl	80047da <USB_ReadInterrupts>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fbe:	d122      	bne.n	8002006 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	69fa      	ldr	r2, [r7, #28]
 8001fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fce:	f023 0301 	bic.w	r3, r3, #1
 8001fd2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d108      	bne.n	8001ff0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 ff1f 	bl	8002e2c <HAL_PCDEx_LPM_Callback>
 8001fee:	e002      	b.n	8001ff6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f005 fe6d 	bl	8007cd0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695a      	ldr	r2, [r3, #20]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002004:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f002 fbe5 	bl	80047da <USB_ReadInterrupts>
 8002010:	4603      	mov	r3, r0
 8002012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800201a:	d112      	bne.n	8002042 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d102      	bne.n	8002032 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f005 fe27 	bl	8007c80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002040:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f002 fbc7 	bl	80047da <USB_ReadInterrupts>
 800204c:	4603      	mov	r3, r0
 800204e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002056:	f040 80b7 	bne.w	80021c8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2110      	movs	r1, #16
 8002074:	4618      	mov	r0, r3
 8002076:	f001 fb3f 	bl	80036f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800207a:	2300      	movs	r3, #0
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800207e:	e046      	b.n	800210e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002082:	015a      	lsls	r2, r3, #5
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	4413      	add	r3, r2
 8002088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800208c:	461a      	mov	r2, r3
 800208e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002092:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	4413      	add	r3, r2
 800209c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a4:	0151      	lsls	r1, r2, #5
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	440a      	add	r2, r1
 80020aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80020b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b6:	015a      	lsls	r2, r3, #5
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c0:	461a      	mov	r2, r3
 80020c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d8:	0151      	lsls	r1, r2, #5
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	440a      	add	r2, r1
 80020de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80020e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f8:	0151      	lsls	r1, r2, #5
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	440a      	add	r2, r1
 80020fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002102:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002106:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210a:	3301      	adds	r3, #1
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002114:	429a      	cmp	r2, r3
 8002116:	d3b3      	bcc.n	8002080 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002126:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800212a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	2b00      	cmp	r3, #0
 8002132:	d016      	beq.n	8002162 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800213a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002144:	f043 030b 	orr.w	r3, r3, #11
 8002148:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800215a:	f043 030b 	orr.w	r3, r3, #11
 800215e:	6453      	str	r3, [r2, #68]	; 0x44
 8002160:	e015      	b.n	800218e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002170:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002174:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002178:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002188:	f043 030b 	orr.w	r3, r3, #11
 800218c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800219c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80021a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021b2:	461a      	mov	r2, r3
 80021b4:	f002 fbd6 	bl	8004964 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f002 fb04 	bl	80047da <USB_ReadInterrupts>
 80021d2:	4603      	mov	r3, r0
 80021d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021dc:	d124      	bne.n	8002228 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f002 fb9a 	bl	800491c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f001 fb00 	bl	80037f2 <USB_GetDevSpeed>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681c      	ldr	r4, [r3, #0]
 80021fe:	f000 fe21 	bl	8002e44 <HAL_RCC_GetHCLKFreq>
 8002202:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	4620      	mov	r0, r4
 800220e:	f000 ffff 	bl	8003210 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f005 fd0c 	bl	8007c30 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002226:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f002 fad4 	bl	80047da <USB_ReadInterrupts>
 8002232:	4603      	mov	r3, r0
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b08      	cmp	r3, #8
 800223a:	d10a      	bne.n	8002252 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f005 fce9 	bl	8007c14 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f002 0208 	and.w	r2, r2, #8
 8002250:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f002 fabf 	bl	80047da <USB_ReadInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002262:	2b80      	cmp	r3, #128	; 0x80
 8002264:	d122      	bne.n	80022ac <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002272:	2301      	movs	r3, #1
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
 8002276:	e014      	b.n	80022a2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d105      	bne.n	800229c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	b2db      	uxtb	r3, r3
 8002294:	4619      	mov	r1, r3
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fb83 	bl	80029a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	3301      	adds	r3, #1
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d3e5      	bcc.n	8002278 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f002 fa92 	bl	80047da <USB_ReadInterrupts>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022c0:	d13b      	bne.n	800233a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022c2:	2301      	movs	r3, #1
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
 80022c6:	e02b      	b.n	8002320 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	3340      	adds	r3, #64	; 0x40
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d115      	bne.n	800231a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80022ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da12      	bge.n	800231a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	333f      	adds	r3, #63	; 0x3f
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002310:	b2db      	uxtb	r3, r3
 8002312:	4619      	mov	r1, r3
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 fb44 	bl	80029a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	3301      	adds	r3, #1
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002326:	429a      	cmp	r2, r3
 8002328:	d3ce      	bcc.n	80022c8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002338:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f002 fa4b 	bl	80047da <USB_ReadInterrupts>
 8002344:	4603      	mov	r3, r0
 8002346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800234e:	d155      	bne.n	80023fc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002350:	2301      	movs	r3, #1
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
 8002354:	e045      	b.n	80023e2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4413      	add	r3, r2
 800235e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d12e      	bne.n	80023dc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800237e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002380:	2b00      	cmp	r3, #0
 8002382:	da2b      	bge.n	80023dc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002390:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002394:	429a      	cmp	r2, r3
 8002396:	d121      	bne.n	80023dc <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d8:	6053      	str	r3, [r2, #4]
            break;
 80023da:	e007      	b.n	80023ec <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	3301      	adds	r3, #1
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d3b4      	bcc.n	8002356 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80023fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f002 f9ea 	bl	80047da <USB_ReadInterrupts>
 8002406:	4603      	mov	r3, r0
 8002408:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800240c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002410:	d10a      	bne.n	8002428 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f005 fc90 	bl	8007d38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695a      	ldr	r2, [r3, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002426:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f002 f9d4 	bl	80047da <USB_ReadInterrupts>
 8002432:	4603      	mov	r3, r0
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b04      	cmp	r3, #4
 800243a:	d115      	bne.n	8002468 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f005 fc83 	bl	8007d5a <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6859      	ldr	r1, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	430a      	orrs	r2, r1
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	e000      	b.n	8002468 <HAL_PCD_IRQHandler+0x938>
      return;
 8002466:	bf00      	nop
    }
  }
}
 8002468:	3734      	adds	r7, #52	; 0x34
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}

0800246e <HAL_PCD_DevConnect>:
  * @brief  Connect the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_PCD_DevConnect+0x1c>
 8002486:	2302      	movs	r3, #2
 8002488:	e01b      	b.n	80024c2 <HAL_PCD_DevConnect+0x54>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	2b01      	cmp	r3, #1
 8002498:	d109      	bne.n	80024ae <HAL_PCD_DevConnect+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d005      	beq.n	80024ae <HAL_PCD_DevConnect+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  (void)USB_DevConnect(hpcd->Instance);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 f94f 	bl	8004756 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_PCD_DevDisconnect>:
  * @brief  Disconnect the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_PCD_DevDisconnect+0x1c>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e01b      	b.n	800251e <HAL_PCD_DevDisconnect+0x54>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DevDisconnect(hpcd->Instance);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f002 f950 	bl	8004798 <USB_DevDisconnect>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d109      	bne.n	8002514 <HAL_PCD_DevDisconnect+0x4a>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002504:	2b01      	cmp	r3, #1
 8002506:	d005      	beq.n	8002514 <HAL_PCD_DevDisconnect+0x4a>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	460b      	mov	r3, r1
 8002530:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_PCD_SetAddress+0x1a>
 800253c:	2302      	movs	r3, #2
 800253e:	e013      	b.n	8002568 <HAL_PCD_SetAddress+0x42>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f002 f8d6 	bl	800470a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	4608      	mov	r0, r1
 800257a:	4611      	mov	r1, r2
 800257c:	461a      	mov	r2, r3
 800257e:	4603      	mov	r3, r0
 8002580:	70fb      	strb	r3, [r7, #3]
 8002582:	460b      	mov	r3, r1
 8002584:	803b      	strh	r3, [r7, #0]
 8002586:	4613      	mov	r3, r2
 8002588:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800258e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002592:	2b00      	cmp	r3, #0
 8002594:	da0f      	bge.n	80025b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	f003 020f 	and.w	r2, r3, #15
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	3338      	adds	r3, #56	; 0x38
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	3304      	adds	r3, #4
 80025ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	705a      	strb	r2, [r3, #1]
 80025b4:	e00f      	b.n	80025d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	f003 020f 	and.w	r2, r3, #15
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	3304      	adds	r3, #4
 80025ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025e2:	883a      	ldrh	r2, [r7, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	78ba      	ldrb	r2, [r7, #2]
 80025ec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	785b      	ldrb	r3, [r3, #1]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d004      	beq.n	8002600 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002600:	78bb      	ldrb	r3, [r7, #2]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d102      	bne.n	800260c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_PCD_EP_Open+0xaa>
 8002616:	2302      	movs	r3, #2
 8002618:	e00e      	b.n	8002638 <HAL_PCD_EP_Open+0xc8>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68f9      	ldr	r1, [r7, #12]
 8002628:	4618      	mov	r0, r3
 800262a:	f001 f907 	bl	800383c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002636:	7afb      	ldrb	r3, [r7, #11]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800264c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002650:	2b00      	cmp	r3, #0
 8002652:	da0f      	bge.n	8002674 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	f003 020f 	and.w	r2, r3, #15
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	3338      	adds	r3, #56	; 0x38
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	3304      	adds	r3, #4
 800266a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	705a      	strb	r2, [r3, #1]
 8002672:	e00f      	b.n	8002694 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	f003 020f 	and.w	r2, r3, #15
 800267a:	4613      	mov	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4413      	add	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	3304      	adds	r3, #4
 800268c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	b2da      	uxtb	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_PCD_EP_Close+0x6e>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e00e      	b.n	80026cc <HAL_PCD_EP_Close+0x8c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68f9      	ldr	r1, [r7, #12]
 80026bc:	4618      	mov	r0, r3
 80026be:	f001 f945 	bl	800394c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	460b      	mov	r3, r1
 80026e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e4:	7afb      	ldrb	r3, [r7, #11]
 80026e6:	f003 020f 	and.w	r2, r3, #15
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4413      	add	r3, r2
 80026fa:	3304      	adds	r3, #4
 80026fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	2200      	movs	r2, #0
 8002714:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002716:	7afb      	ldrb	r3, [r7, #11]
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	b2da      	uxtb	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d102      	bne.n	8002730 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002730:	7afb      	ldrb	r3, [r7, #11]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	6979      	ldr	r1, [r7, #20]
 8002748:	f001 fc24 	bl	8003f94 <USB_EP0StartXfer>
 800274c:	e008      	b.n	8002760 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	6979      	ldr	r1, [r7, #20]
 800275c:	f001 f9d2 	bl	8003b04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	460b      	mov	r3, r1
 8002774:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	f003 020f 	and.w	r2, r3, #15
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800278c:	681b      	ldr	r3, [r3, #0]
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	460b      	mov	r3, r1
 80027a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027aa:	7afb      	ldrb	r3, [r7, #11]
 80027ac:	f003 020f 	and.w	r2, r3, #15
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	3338      	adds	r3, #56	; 0x38
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4413      	add	r3, r2
 80027be:	3304      	adds	r3, #4
 80027c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2200      	movs	r2, #0
 80027d2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2201      	movs	r2, #1
 80027d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027da:	7afb      	ldrb	r3, [r7, #11]
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d102      	bne.n	80027f4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027f4:	7afb      	ldrb	r3, [r7, #11]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	6979      	ldr	r1, [r7, #20]
 800280c:	f001 fbc2 	bl	8003f94 <USB_EP0StartXfer>
 8002810:	e008      	b.n	8002824 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	6979      	ldr	r1, [r7, #20]
 8002820:	f001 f970 	bl	8003b04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800283a:	78fb      	ldrb	r3, [r7, #3]
 800283c:	f003 020f 	and.w	r2, r3, #15
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	429a      	cmp	r2, r3
 8002846:	d901      	bls.n	800284c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e050      	b.n	80028ee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800284c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002850:	2b00      	cmp	r3, #0
 8002852:	da0f      	bge.n	8002874 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	f003 020f 	and.w	r2, r3, #15
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	3338      	adds	r3, #56	; 0x38
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	4413      	add	r3, r2
 8002868:	3304      	adds	r3, #4
 800286a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2201      	movs	r2, #1
 8002870:	705a      	strb	r2, [r3, #1]
 8002872:	e00d      	b.n	8002890 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	3304      	adds	r3, #4
 8002888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2201      	movs	r2, #1
 8002894:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	b2da      	uxtb	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_PCD_EP_SetStall+0x82>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e01e      	b.n	80028ee <HAL_PCD_EP_SetStall+0xc0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68f9      	ldr	r1, [r7, #12]
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 fe00 	bl	80044c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10a      	bne.n	80028e4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	b2d9      	uxtb	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028de:	461a      	mov	r2, r3
 80028e0:	f002 f840 	bl	8004964 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	460b      	mov	r3, r1
 8002900:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	f003 020f 	and.w	r2, r3, #15
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	429a      	cmp	r2, r3
 800290e:	d901      	bls.n	8002914 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e042      	b.n	800299a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002918:	2b00      	cmp	r3, #0
 800291a:	da0f      	bge.n	800293c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	f003 020f 	and.w	r2, r3, #15
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	3338      	adds	r3, #56	; 0x38
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	4413      	add	r3, r2
 8002930:	3304      	adds	r3, #4
 8002932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	705a      	strb	r2, [r3, #1]
 800293a:	e00f      	b.n	800295c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	f003 020f 	and.w	r2, r3, #15
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	3304      	adds	r3, #4
 8002954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	b2da      	uxtb	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_PCD_EP_ClrStall+0x86>
 8002978:	2302      	movs	r3, #2
 800297a:	e00e      	b.n	800299a <HAL_PCD_EP_ClrStall+0xa4>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68f9      	ldr	r1, [r7, #12]
 800298a:	4618      	mov	r0, r3
 800298c:	f001 fe08 	bl	80045a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	460b      	mov	r3, r1
 80029ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80029ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da0c      	bge.n	80029d0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	f003 020f 	and.w	r2, r3, #15
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	3338      	adds	r3, #56	; 0x38
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	3304      	adds	r3, #4
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	e00c      	b.n	80029ea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	f003 020f 	and.w	r2, r3, #15
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	3304      	adds	r3, #4
 80029e8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68f9      	ldr	r1, [r7, #12]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f001 fc27 	bl	8004244 <USB_EPStopXfer>
 80029f6:	4603      	mov	r3, r0
 80029f8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80029fa:	7afb      	ldrb	r3, [r7, #11]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	3338      	adds	r3, #56	; 0x38
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	4413      	add	r3, r2
 8002a28:	3304      	adds	r3, #4
 8002a2a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a1a      	ldr	r2, [r3, #32]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d901      	bls.n	8002a3c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e06c      	b.n	8002b16 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	699a      	ldr	r2, [r3, #24]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d902      	bls.n	8002a58 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	3303      	adds	r3, #3
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a60:	e02b      	b.n	8002aba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d902      	bls.n	8002a7e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3303      	adds	r3, #3
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6919      	ldr	r1, [r3, #16]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	6978      	ldr	r0, [r7, #20]
 8002a9e:	f001 fc7b 	bl	8004398 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	441a      	add	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a1a      	ldr	r2, [r3, #32]
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	441a      	add	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d809      	bhi.n	8002ae4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a1a      	ldr	r2, [r3, #32]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d203      	bcs.n	8002ae4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1be      	bne.n	8002a62 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	699a      	ldr	r2, [r3, #24]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d811      	bhi.n	8002b14 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	2201      	movs	r2, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	6939      	ldr	r1, [r7, #16]
 8002b0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b10:	4013      	ands	r3, r2
 8002b12:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	333c      	adds	r3, #60	; 0x3c
 8002b38:	3304      	adds	r3, #4
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d17b      	bne.n	8002c4e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d015      	beq.n	8002b8c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	4a61      	ldr	r2, [pc, #388]	; (8002ce8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	f240 80b9 	bls.w	8002cdc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80b3 	beq.w	8002cdc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b82:	461a      	mov	r2, r3
 8002b84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b88:	6093      	str	r3, [r2, #8]
 8002b8a:	e0a7      	b.n	8002cdc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d009      	beq.n	8002baa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2320      	movs	r3, #32
 8002ba6:	6093      	str	r3, [r2, #8]
 8002ba8:	e098      	b.n	8002cdc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f040 8093 	bne.w	8002cdc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	4a4b      	ldr	r2, [pc, #300]	; (8002ce8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d90f      	bls.n	8002bde <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bda:	6093      	str	r3, [r2, #8]
 8002bdc:	e07e      	b.n	8002cdc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	0159      	lsls	r1, r3, #5
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	440b      	add	r3, r1
 8002c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0a:	1ad2      	subs	r2, r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d114      	bne.n	8002c40 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	f001 fe9a 	bl	8004964 <USB_EP0_OutStart>
 8002c30:	e006      	b.n	8002c40 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	441a      	add	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4619      	mov	r1, r3
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f004 ffaf 	bl	8007baa <HAL_PCD_DataOutStageCallback>
 8002c4c:	e046      	b.n	8002cdc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	4a26      	ldr	r2, [pc, #152]	; (8002cec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d124      	bne.n	8002ca0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c72:	6093      	str	r3, [r2, #8]
 8002c74:	e032      	b.n	8002cdc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2320      	movs	r3, #32
 8002c90:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	4619      	mov	r1, r3
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f004 ff86 	bl	8007baa <HAL_PCD_DataOutStageCallback>
 8002c9e:	e01d      	b.n	8002cdc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d114      	bne.n	8002cd0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d108      	bne.n	8002cd0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2100      	movs	r1, #0
 8002ccc:	f001 fe4a 	bl	8004964 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f004 ff67 	bl	8007baa <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	4f54300a 	.word	0x4f54300a
 8002cec:	4f54310a 	.word	0x4f54310a

08002cf0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	333c      	adds	r3, #60	; 0x3c
 8002d08:	3304      	adds	r3, #4
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4a15      	ldr	r2, [pc, #84]	; (8002d78 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d90e      	bls.n	8002d44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d009      	beq.n	8002d44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f004 ff1e 	bl	8007b86 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d90c      	bls.n	8002d6c <PCD_EP_OutSetupPacket_int+0x7c>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d108      	bne.n	8002d6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d64:	461a      	mov	r2, r3
 8002d66:	2101      	movs	r1, #1
 8002d68:	f001 fdfc 	bl	8004964 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	4f54300a 	.word	0x4f54300a

08002d7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	70fb      	strb	r3, [r7, #3]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d107      	bne.n	8002daa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d9a:	883b      	ldrh	r3, [r7, #0]
 8002d9c:	0419      	lsls	r1, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
 8002da8:	e028      	b.n	8002dfc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	4413      	add	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	e00d      	b.n	8002dda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	3340      	adds	r3, #64	; 0x40
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	0c1b      	lsrs	r3, r3, #16
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
 8002dda:	7bfa      	ldrb	r2, [r7, #15]
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d3ec      	bcc.n	8002dbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002de4:	883b      	ldrh	r3, [r7, #0]
 8002de6:	0418      	lsls	r0, r3, #16
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6819      	ldr	r1, [r3, #0]
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	4302      	orrs	r2, r0
 8002df4:	3340      	adds	r3, #64	; 0x40
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	460b      	mov	r3, r1
 8002e14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000000 	.word	0x20000000

08002e5c <LL_GPIO_SetPinMode>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b089      	sub	sp, #36	; 0x24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2103      	movs	r1, #3
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	61bb      	str	r3, [r7, #24]
  return result;
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	601a      	str	r2, [r3, #0]
}
 8002eae:	bf00      	nop
 8002eb0:	3724      	adds	r7, #36	; 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <LL_GPIO_SetPinOutputType>:
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	401a      	ands	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	605a      	str	r2, [r3, #4]
}
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <LL_GPIO_SetPinSpeed>:
{
 8002eea:	b480      	push	{r7}
 8002eec:	b089      	sub	sp, #36	; 0x24
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	613b      	str	r3, [r7, #16]
  return result;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	2103      	movs	r1, #3
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	401a      	ands	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa93 f3a3 	rbit	r3, r3
 8002f24:	61bb      	str	r3, [r7, #24]
  return result;
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	fab3 f383 	clz	r3, r3
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	431a      	orrs	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	609a      	str	r2, [r3, #8]
}
 8002f3c:	bf00      	nop
 8002f3e:	3724      	adds	r7, #36	; 0x24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_GPIO_SetPinPull>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b089      	sub	sp, #36	; 0x24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	613b      	str	r3, [r7, #16]
  return result;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2103      	movs	r1, #3
 8002f70:	fa01 f303 	lsl.w	r3, r1, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	401a      	ands	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	61bb      	str	r3, [r7, #24]
  return result;
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	431a      	orrs	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	60da      	str	r2, [r3, #12]
}
 8002f9a:	bf00      	nop
 8002f9c:	3724      	adds	r7, #36	; 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_GPIO_SetAFPin_0_7>:
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b089      	sub	sp, #36	; 0x24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a1a      	ldr	r2, [r3, #32]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	613b      	str	r3, [r7, #16]
  return result;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	fab3 f383 	clz	r3, r3
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	210f      	movs	r1, #15
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	401a      	ands	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	61bb      	str	r3, [r7, #24]
  return result;
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	621a      	str	r2, [r3, #32]
}
 8002ff8:	bf00      	nop
 8002ffa:	3724      	adds	r7, #36	; 0x24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_GPIO_SetAFPin_8_15>:
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	; 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	0a1b      	lsrs	r3, r3, #8
 8003018:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	613b      	str	r3, [r7, #16]
  return result;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	210f      	movs	r1, #15
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	401a      	ands	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	61bb      	str	r3, [r7, #24]
  return result;
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	fa01 f303 	lsl.w	r3, r1, r3
 8003054:	431a      	orrs	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	625a      	str	r2, [r3, #36]	; 0x24
}
 800305a:	bf00      	nop
 800305c:	3724      	adds	r7, #36	; 0x24
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b088      	sub	sp, #32
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003070:	2300      	movs	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003074:	2300      	movs	r3, #0
 8003076:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	613b      	str	r3, [r7, #16]
  return result;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003090:	e050      	b.n	8003134 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	2101      	movs	r1, #1
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d042      	beq.n	800312e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d003      	beq.n	80030b8 <LL_GPIO_Init+0x52>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d10d      	bne.n	80030d4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	461a      	mov	r2, r3
 80030be:	69b9      	ldr	r1, [r7, #24]
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff12 	bl	8002eea <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	461a      	mov	r2, r3
 80030cc:	69b9      	ldr	r1, [r7, #24]
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff fef3 	bl	8002eba <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	461a      	mov	r2, r3
 80030da:	69b9      	ldr	r1, [r7, #24]
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7ff ff33 	bl	8002f48 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d11a      	bne.n	8003120 <LL_GPIO_Init+0xba>
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	60bb      	str	r3, [r7, #8]
  return result;
 80030f6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b07      	cmp	r3, #7
 8003100:	d807      	bhi.n	8003112 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	461a      	mov	r2, r3
 8003108:	69b9      	ldr	r1, [r7, #24]
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff ff4b 	bl	8002fa6 <LL_GPIO_SetAFPin_0_7>
 8003110:	e006      	b.n	8003120 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	461a      	mov	r2, r3
 8003118:	69b9      	ldr	r1, [r7, #24]
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff ff72 	bl	8003004 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	461a      	mov	r2, r3
 8003126:	69b9      	ldr	r1, [r7, #24]
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff fe97 	bl	8002e5c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3301      	adds	r3, #1
 8003132:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	fa22 f303 	lsr.w	r3, r2, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1a7      	bne.n	8003092 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3720      	adds	r7, #32
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800314c:	b084      	sub	sp, #16
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	f107 001c 	add.w	r0, r7, #28
 800315a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	2b01      	cmp	r3, #1
 8003162:	d122      	bne.n	80031aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800318c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800318e:	2b01      	cmp	r3, #1
 8003190:	d105      	bne.n	800319e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f001 fc3e 	bl	8004a20 <USB_CoreReset>
 80031a4:	4603      	mov	r3, r0
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	e01a      	b.n	80031e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f001 fc32 	bl	8004a20 <USB_CoreReset>
 80031bc:	4603      	mov	r3, r0
 80031be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80031c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	639a      	str	r2, [r3, #56]	; 0x38
 80031d2:	e005      	b.n	80031e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80031e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d10b      	bne.n	80031fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f043 0206 	orr.w	r2, r3, #6
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800320a:	b004      	add	sp, #16
 800320c:	4770      	bx	lr
	...

08003210 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d165      	bne.n	80032f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4a41      	ldr	r2, [pc, #260]	; (800332c <USB_SetTurnaroundTime+0x11c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d906      	bls.n	800323a <USB_SetTurnaroundTime+0x2a>
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4a40      	ldr	r2, [pc, #256]	; (8003330 <USB_SetTurnaroundTime+0x120>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d202      	bcs.n	800323a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003234:	230f      	movs	r3, #15
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	e062      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	4a3c      	ldr	r2, [pc, #240]	; (8003330 <USB_SetTurnaroundTime+0x120>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d306      	bcc.n	8003250 <USB_SetTurnaroundTime+0x40>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4a3b      	ldr	r2, [pc, #236]	; (8003334 <USB_SetTurnaroundTime+0x124>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d202      	bcs.n	8003250 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800324a:	230e      	movs	r3, #14
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	e057      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4a38      	ldr	r2, [pc, #224]	; (8003334 <USB_SetTurnaroundTime+0x124>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d306      	bcc.n	8003266 <USB_SetTurnaroundTime+0x56>
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4a37      	ldr	r2, [pc, #220]	; (8003338 <USB_SetTurnaroundTime+0x128>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d202      	bcs.n	8003266 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003260:	230d      	movs	r3, #13
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	e04c      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4a33      	ldr	r2, [pc, #204]	; (8003338 <USB_SetTurnaroundTime+0x128>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d306      	bcc.n	800327c <USB_SetTurnaroundTime+0x6c>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	4a32      	ldr	r2, [pc, #200]	; (800333c <USB_SetTurnaroundTime+0x12c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d802      	bhi.n	800327c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003276:	230c      	movs	r3, #12
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	e041      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4a2f      	ldr	r2, [pc, #188]	; (800333c <USB_SetTurnaroundTime+0x12c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d906      	bls.n	8003292 <USB_SetTurnaroundTime+0x82>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4a2e      	ldr	r2, [pc, #184]	; (8003340 <USB_SetTurnaroundTime+0x130>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d802      	bhi.n	8003292 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800328c:	230b      	movs	r3, #11
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	e036      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	4a2a      	ldr	r2, [pc, #168]	; (8003340 <USB_SetTurnaroundTime+0x130>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d906      	bls.n	80032a8 <USB_SetTurnaroundTime+0x98>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4a29      	ldr	r2, [pc, #164]	; (8003344 <USB_SetTurnaroundTime+0x134>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d802      	bhi.n	80032a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80032a2:	230a      	movs	r3, #10
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	e02b      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4a26      	ldr	r2, [pc, #152]	; (8003344 <USB_SetTurnaroundTime+0x134>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d906      	bls.n	80032be <USB_SetTurnaroundTime+0xae>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4a25      	ldr	r2, [pc, #148]	; (8003348 <USB_SetTurnaroundTime+0x138>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d202      	bcs.n	80032be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80032b8:	2309      	movs	r3, #9
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	e020      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	4a21      	ldr	r2, [pc, #132]	; (8003348 <USB_SetTurnaroundTime+0x138>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d306      	bcc.n	80032d4 <USB_SetTurnaroundTime+0xc4>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	4a20      	ldr	r2, [pc, #128]	; (800334c <USB_SetTurnaroundTime+0x13c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d802      	bhi.n	80032d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80032ce:	2308      	movs	r3, #8
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	e015      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4a1d      	ldr	r2, [pc, #116]	; (800334c <USB_SetTurnaroundTime+0x13c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d906      	bls.n	80032ea <USB_SetTurnaroundTime+0xda>
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4a1c      	ldr	r2, [pc, #112]	; (8003350 <USB_SetTurnaroundTime+0x140>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d202      	bcs.n	80032ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80032e4:	2307      	movs	r3, #7
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	e00a      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80032ea:	2306      	movs	r3, #6
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	e007      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80032f6:	2309      	movs	r3, #9
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	e001      	b.n	8003300 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80032fc:	2309      	movs	r3, #9
 80032fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	029b      	lsls	r3, r3, #10
 8003314:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003318:	431a      	orrs	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	00d8acbf 	.word	0x00d8acbf
 8003330:	00e4e1c0 	.word	0x00e4e1c0
 8003334:	00f42400 	.word	0x00f42400
 8003338:	01067380 	.word	0x01067380
 800333c:	011a499f 	.word	0x011a499f
 8003340:	01312cff 	.word	0x01312cff
 8003344:	014ca43f 	.word	0x014ca43f
 8003348:	016e3600 	.word	0x016e3600
 800334c:	01a6ab1f 	.word	0x01a6ab1f
 8003350:	01e84800 	.word	0x01e84800

08003354 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f023 0201 	bic.w	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d115      	bne.n	80033e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80033c6:	2001      	movs	r0, #1
 80033c8:	f7fd fb8c 	bl	8000ae4 <HAL_Delay>
      ms++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3301      	adds	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f001 fa94 	bl	8004900 <USB_GetMode>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d01e      	beq.n	800341c <USB_SetCurrentMode+0x84>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b31      	cmp	r3, #49	; 0x31
 80033e2:	d9f0      	bls.n	80033c6 <USB_SetCurrentMode+0x2e>
 80033e4:	e01a      	b.n	800341c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d115      	bne.n	8003418 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80033f8:	2001      	movs	r0, #1
 80033fa:	f7fd fb73 	bl	8000ae4 <HAL_Delay>
      ms++;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	3301      	adds	r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f001 fa7b 	bl	8004900 <USB_GetMode>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <USB_SetCurrentMode+0x84>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b31      	cmp	r3, #49	; 0x31
 8003414:	d9f0      	bls.n	80033f8 <USB_SetCurrentMode+0x60>
 8003416:	e001      	b.n	800341c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e005      	b.n	8003428 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b32      	cmp	r3, #50	; 0x32
 8003420:	d101      	bne.n	8003426 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003430:	b084      	sub	sp, #16
 8003432:	b580      	push	{r7, lr}
 8003434:	b086      	sub	sp, #24
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800343e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	e009      	b.n	8003464 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	3340      	adds	r3, #64	; 0x40
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	2200      	movs	r2, #0
 800345c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	3301      	adds	r3, #1
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	2b0e      	cmp	r3, #14
 8003468:	d9f2      	bls.n	8003450 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800346a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800346c:	2b00      	cmp	r3, #0
 800346e:	d11c      	bne.n	80034aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800347e:	f043 0302 	orr.w	r3, r3, #2
 8003482:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	639a      	str	r2, [r3, #56]	; 0x38
 80034a8:	e00b      	b.n	80034c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80034c8:	461a      	mov	r2, r3
 80034ca:	2300      	movs	r3, #0
 80034cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d4:	4619      	mov	r1, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034dc:	461a      	mov	r2, r3
 80034de:	680b      	ldr	r3, [r1, #0]
 80034e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d10c      	bne.n	8003502 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d104      	bne.n	80034f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80034ee:	2100      	movs	r1, #0
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f965 	bl	80037c0 <USB_SetDevSpeed>
 80034f6:	e008      	b.n	800350a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80034f8:	2101      	movs	r1, #1
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f960 	bl	80037c0 <USB_SetDevSpeed>
 8003500:	e003      	b.n	800350a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003502:	2103      	movs	r1, #3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f95b 	bl	80037c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800350a:	2110      	movs	r1, #16
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f8f3 	bl	80036f8 <USB_FlushTxFifo>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f91f 	bl	8003760 <USB_FlushRxFifo>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003532:	461a      	mov	r2, r3
 8003534:	2300      	movs	r3, #0
 8003536:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	461a      	mov	r2, r3
 8003540:	2300      	movs	r3, #0
 8003542:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800354a:	461a      	mov	r2, r3
 800354c:	2300      	movs	r3, #0
 800354e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003550:	2300      	movs	r3, #0
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	e043      	b.n	80035de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800356c:	d118      	bne.n	80035a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003580:	461a      	mov	r2, r3
 8003582:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	e013      	b.n	80035b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003596:	461a      	mov	r2, r3
 8003598:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e008      	b.n	80035b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ac:	461a      	mov	r2, r3
 80035ae:	2300      	movs	r3, #0
 80035b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035be:	461a      	mov	r2, r3
 80035c0:	2300      	movs	r3, #0
 80035c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d0:	461a      	mov	r2, r3
 80035d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	3301      	adds	r3, #1
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d3b7      	bcc.n	8003556 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035e6:	2300      	movs	r3, #0
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	e043      	b.n	8003674 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003602:	d118      	bne.n	8003636 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10a      	bne.n	8003620 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4413      	add	r3, r2
 8003612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003616:	461a      	mov	r2, r3
 8003618:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	e013      	b.n	8003648 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362c:	461a      	mov	r2, r3
 800362e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	e008      	b.n	8003648 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003642:	461a      	mov	r2, r3
 8003644:	2300      	movs	r3, #0
 8003646:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003654:	461a      	mov	r2, r3
 8003656:	2300      	movs	r3, #0
 8003658:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003666:	461a      	mov	r2, r3
 8003668:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800366c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	3301      	adds	r3, #1
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	429a      	cmp	r2, r3
 800367a:	d3b7      	bcc.n	80035ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800368e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800369c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f043 0210 	orr.w	r2, r3, #16
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699a      	ldr	r2, [r3, #24]
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <USB_DevInit+0x2c4>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80036bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f043 0208 	orr.w	r2, r3, #8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80036ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d107      	bne.n	80036e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036dc:	f043 0304 	orr.w	r3, r3, #4
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036f0:	b004      	add	sp, #16
 80036f2:	4770      	bx	lr
 80036f4:	803c3800 	.word	0x803c3800

080036f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3301      	adds	r3, #1
 800370a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4a13      	ldr	r2, [pc, #76]	; (800375c <USB_FlushTxFifo+0x64>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e01b      	b.n	8003750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	daf2      	bge.n	8003706 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	019b      	lsls	r3, r3, #6
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3301      	adds	r3, #1
 8003734:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a08      	ldr	r2, [pc, #32]	; (800375c <USB_FlushTxFifo+0x64>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e006      	b.n	8003750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b20      	cmp	r3, #32
 800374c:	d0f0      	beq.n	8003730 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	00030d40 	.word	0x00030d40

08003760 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3301      	adds	r3, #1
 8003770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a11      	ldr	r2, [pc, #68]	; (80037bc <USB_FlushRxFifo+0x5c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e018      	b.n	80037b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	daf2      	bge.n	800376c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2210      	movs	r2, #16
 800378e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3301      	adds	r3, #1
 8003794:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a08      	ldr	r2, [pc, #32]	; (80037bc <USB_FlushRxFifo+0x5c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e006      	b.n	80037b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b10      	cmp	r3, #16
 80037ac:	d0f0      	beq.n	8003790 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	00030d40 	.word	0x00030d40

080037c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	68f9      	ldr	r1, [r7, #12]
 80037dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037e0:	4313      	orrs	r3, r2
 80037e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b087      	sub	sp, #28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0306 	and.w	r3, r3, #6
 800380a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003812:	2300      	movs	r3, #0
 8003814:	75fb      	strb	r3, [r7, #23]
 8003816:	e00a      	b.n	800382e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d002      	beq.n	8003824 <USB_GetDevSpeed+0x32>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2b06      	cmp	r3, #6
 8003822:	d102      	bne.n	800382a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003824:	2302      	movs	r3, #2
 8003826:	75fb      	strb	r3, [r7, #23]
 8003828:	e001      	b.n	800382e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800382a:	230f      	movs	r3, #15
 800382c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800382e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003830:	4618      	mov	r0, r3
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	785b      	ldrb	r3, [r3, #1]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d13a      	bne.n	80038ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385e:	69da      	ldr	r2, [r3, #28]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	2101      	movs	r1, #1
 800386a:	fa01 f303 	lsl.w	r3, r1, r3
 800386e:	b29b      	uxth	r3, r3
 8003870:	68f9      	ldr	r1, [r7, #12]
 8003872:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003876:	4313      	orrs	r3, r2
 8003878:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d155      	bne.n	800393c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	791b      	ldrb	r3, [r3, #4]
 80038aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	059b      	lsls	r3, r3, #22
 80038b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038b4:	4313      	orrs	r3, r2
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	0151      	lsls	r1, r2, #5
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	440a      	add	r2, r1
 80038be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	e036      	b.n	800393c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	2101      	movs	r1, #1
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	68f9      	ldr	r1, [r7, #12]
 80038e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d11a      	bne.n	800393c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	791b      	ldrb	r3, [r3, #4]
 8003920:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003922:	430b      	orrs	r3, r1
 8003924:	4313      	orrs	r3, r2
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	0151      	lsls	r1, r2, #5
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	440a      	add	r2, r1
 800392e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800393a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	785b      	ldrb	r3, [r3, #1]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d161      	bne.n	8003a2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800397a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800397e:	d11f      	bne.n	80039c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	0151      	lsls	r1, r2, #5
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	440a      	add	r2, r1
 8003996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800399a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800399e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	0151      	lsls	r1, r2, #5
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	440a      	add	r2, r1
 80039b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	2101      	movs	r1, #1
 80039d2:	fa01 f303 	lsl.w	r3, r1, r3
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039e0:	4013      	ands	r3, r2
 80039e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	2101      	movs	r1, #1
 80039f6:	fa01 f303 	lsl.w	r3, r1, r3
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	68f9      	ldr	r1, [r7, #12]
 8003a00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a04:	4013      	ands	r3, r2
 8003a06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	0159      	lsls	r1, r3, #5
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	440b      	add	r3, r1
 8003a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a22:	4619      	mov	r1, r3
 8003a24:	4b35      	ldr	r3, [pc, #212]	; (8003afc <USB_DeactivateEndpoint+0x1b0>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]
 8003a2a:	e060      	b.n	8003aee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a42:	d11f      	bne.n	8003a84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	0151      	lsls	r1, r2, #5
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	440a      	add	r2, r1
 8003a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	2101      	movs	r1, #1
 8003a96:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9a:	041b      	lsls	r3, r3, #16
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	68f9      	ldr	r1, [r7, #12]
 8003aa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aae:	69da      	ldr	r2, [r3, #28]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	2101      	movs	r1, #1
 8003aba:	fa01 f303 	lsl.w	r3, r1, r3
 8003abe:	041b      	lsls	r3, r3, #16
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	68f9      	ldr	r1, [r7, #12]
 8003ac4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	0159      	lsls	r1, r3, #5
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	440b      	add	r3, r1
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <USB_DeactivateEndpoint+0x1b4>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	ec337800 	.word	0xec337800
 8003b00:	eff37800 	.word	0xeff37800

08003b04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08a      	sub	sp, #40	; 0x28
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	785b      	ldrb	r3, [r3, #1]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	f040 815c 	bne.w	8003dde <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d132      	bne.n	8003b94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	0151      	lsls	r1, r2, #5
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	440a      	add	r2, r1
 8003b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	0151      	lsls	r1, r2, #5
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	440a      	add	r2, r1
 8003b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	0151      	lsls	r1, r2, #5
 8003b84:	69fa      	ldr	r2, [r7, #28]
 8003b86:	440a      	add	r2, r1
 8003b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b8c:	0cdb      	lsrs	r3, r3, #19
 8003b8e:	04db      	lsls	r3, r3, #19
 8003b90:	6113      	str	r3, [r2, #16]
 8003b92:	e074      	b.n	8003c7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	0151      	lsls	r1, r2, #5
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	440a      	add	r2, r1
 8003baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bae:	0cdb      	lsrs	r3, r3, #19
 8003bb0:	04db      	lsls	r3, r3, #19
 8003bb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	0151      	lsls	r1, r2, #5
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	440a      	add	r2, r1
 8003bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6999      	ldr	r1, [r3, #24]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	440b      	add	r3, r1
 8003bf0:	1e59      	subs	r1, r3, #1
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bfa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003bfc:	4b9d      	ldr	r3, [pc, #628]	; (8003e74 <USB_EPStartXfer+0x370>)
 8003bfe:	400b      	ands	r3, r1
 8003c00:	69b9      	ldr	r1, [r7, #24]
 8003c02:	0148      	lsls	r0, r1, #5
 8003c04:	69f9      	ldr	r1, [r7, #28]
 8003c06:	4401      	add	r1, r0
 8003c08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c26:	69b9      	ldr	r1, [r7, #24]
 8003c28:	0148      	lsls	r0, r1, #5
 8003c2a:	69f9      	ldr	r1, [r7, #28]
 8003c2c:	4401      	add	r1, r0
 8003c2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c32:	4313      	orrs	r3, r2
 8003c34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	791b      	ldrb	r3, [r3, #4]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d11f      	bne.n	8003c7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	0151      	lsls	r1, r2, #5
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	440a      	add	r2, r1
 8003c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003c5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	0151      	lsls	r1, r2, #5
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	440a      	add	r2, r1
 8003c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d14b      	bne.n	8003d1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d009      	beq.n	8003ca0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	791b      	ldrb	r3, [r3, #4]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d128      	bne.n	8003cfa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d110      	bne.n	8003cda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	0151      	lsls	r1, r2, #5
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	440a      	add	r2, r1
 8003cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	e00f      	b.n	8003cfa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	015a      	lsls	r2, r3, #5
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	0151      	lsls	r1, r2, #5
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	440a      	add	r2, r1
 8003cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	0151      	lsls	r1, r2, #5
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	440a      	add	r2, r1
 8003d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	e133      	b.n	8003f84 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	0151      	lsls	r1, r2, #5
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	440a      	add	r2, r1
 8003d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	791b      	ldrb	r3, [r3, #4]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d015      	beq.n	8003d70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 811b 	beq.w	8003f84 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	2101      	movs	r1, #1
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	69f9      	ldr	r1, [r7, #28]
 8003d66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	634b      	str	r3, [r1, #52]	; 0x34
 8003d6e:	e109      	b.n	8003f84 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d110      	bne.n	8003da2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	0151      	lsls	r1, r2, #5
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	440a      	add	r2, r1
 8003d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	e00f      	b.n	8003dc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	0151      	lsls	r1, r2, #5
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	440a      	add	r2, r1
 8003db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	6919      	ldr	r1, [r3, #16]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	781a      	ldrb	r2, [r3, #0]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	b298      	uxth	r0, r3
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fade 	bl	8004398 <USB_WritePacket>
 8003ddc:	e0d2      	b.n	8003f84 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	0151      	lsls	r1, r2, #5
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	440a      	add	r2, r1
 8003df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003df8:	0cdb      	lsrs	r3, r3, #19
 8003dfa:	04db      	lsls	r3, r3, #19
 8003dfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	0151      	lsls	r1, r2, #5
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	440a      	add	r2, r1
 8003e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d126      	bne.n	8003e78 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e40:	69b9      	ldr	r1, [r7, #24]
 8003e42:	0148      	lsls	r0, r1, #5
 8003e44:	69f9      	ldr	r1, [r7, #28]
 8003e46:	4401      	add	r1, r0
 8003e48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	0151      	lsls	r1, r2, #5
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	440a      	add	r2, r1
 8003e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e6e:	6113      	str	r3, [r2, #16]
 8003e70:	e03a      	b.n	8003ee8 <USB_EPStartXfer+0x3e4>
 8003e72:	bf00      	nop
 8003e74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	699a      	ldr	r2, [r3, #24]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4413      	add	r3, r2
 8003e82:	1e5a      	subs	r2, r3, #1
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	8afa      	ldrh	r2, [r7, #22]
 8003e94:	fb03 f202 	mul.w	r2, r3, r2
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	8afb      	ldrh	r3, [r7, #22]
 8003eac:	04d9      	lsls	r1, r3, #19
 8003eae:	4b38      	ldr	r3, [pc, #224]	; (8003f90 <USB_EPStartXfer+0x48c>)
 8003eb0:	400b      	ands	r3, r1
 8003eb2:	69b9      	ldr	r1, [r7, #24]
 8003eb4:	0148      	lsls	r0, r1, #5
 8003eb6:	69f9      	ldr	r1, [r7, #28]
 8003eb8:	4401      	add	r1, r0
 8003eba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed8:	69b9      	ldr	r1, [r7, #24]
 8003eda:	0148      	lsls	r0, r1, #5
 8003edc:	69f9      	ldr	r1, [r7, #28]
 8003ede:	4401      	add	r1, r0
 8003ee0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d10d      	bne.n	8003f0a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	6919      	ldr	r1, [r3, #16]
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f06:	460a      	mov	r2, r1
 8003f08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	791b      	ldrb	r3, [r3, #4]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d128      	bne.n	8003f64 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d110      	bne.n	8003f44 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	0151      	lsls	r1, r2, #5
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	440a      	add	r2, r1
 8003f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	e00f      	b.n	8003f64 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	0151      	lsls	r1, r2, #5
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	440a      	add	r2, r1
 8003f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	0151      	lsls	r1, r2, #5
 8003f76:	69fa      	ldr	r2, [r7, #28]
 8003f78:	440a      	add	r2, r1
 8003f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	1ff80000 	.word	0x1ff80000

08003f94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	785b      	ldrb	r3, [r3, #1]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	f040 80ce 	bne.w	8004152 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d132      	bne.n	8004024 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	0151      	lsls	r1, r2, #5
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	440a      	add	r2, r1
 8003fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fe0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	0151      	lsls	r1, r2, #5
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	440a      	add	r2, r1
 8003ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004000:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	0151      	lsls	r1, r2, #5
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	440a      	add	r2, r1
 8004018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401c:	0cdb      	lsrs	r3, r3, #19
 800401e:	04db      	lsls	r3, r3, #19
 8004020:	6113      	str	r3, [r2, #16]
 8004022:	e04e      	b.n	80040c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	0151      	lsls	r1, r2, #5
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	440a      	add	r2, r1
 800403a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800403e:	0cdb      	lsrs	r3, r3, #19
 8004040:	04db      	lsls	r3, r3, #19
 8004042:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	0151      	lsls	r1, r2, #5
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	440a      	add	r2, r1
 800405a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800405e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004062:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004066:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	699a      	ldr	r2, [r3, #24]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	429a      	cmp	r2, r3
 8004072:	d903      	bls.n	800407c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	0151      	lsls	r1, r2, #5
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	440a      	add	r2, r1
 8004092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004096:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800409a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b2:	6939      	ldr	r1, [r7, #16]
 80040b4:	0148      	lsls	r0, r1, #5
 80040b6:	6979      	ldr	r1, [r7, #20]
 80040b8:	4401      	add	r1, r0
 80040ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040be:	4313      	orrs	r3, r2
 80040c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d11e      	bne.n	8004106 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d009      	beq.n	80040e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040dc:	461a      	mov	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	0151      	lsls	r1, r2, #5
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	440a      	add	r2, r1
 80040fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	e097      	b.n	8004236 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	4413      	add	r3, r2
 800410e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	0151      	lsls	r1, r2, #5
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	440a      	add	r2, r1
 800411c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004120:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004124:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 8083 	beq.w	8004236 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	2101      	movs	r1, #1
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	6979      	ldr	r1, [r7, #20]
 8004148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800414c:	4313      	orrs	r3, r2
 800414e:	634b      	str	r3, [r1, #52]	; 0x34
 8004150:	e071      	b.n	8004236 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	0151      	lsls	r1, r2, #5
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	440a      	add	r2, r1
 8004168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800416c:	0cdb      	lsrs	r3, r3, #19
 800416e:	04db      	lsls	r3, r3, #19
 8004170:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	0151      	lsls	r1, r2, #5
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	440a      	add	r2, r1
 8004188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800418c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004190:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004194:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	0151      	lsls	r1, r2, #5
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	440a      	add	r2, r1
 80041c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e4:	6939      	ldr	r1, [r7, #16]
 80041e6:	0148      	lsls	r0, r1, #5
 80041e8:	6979      	ldr	r1, [r7, #20]
 80041ea:	4401      	add	r1, r0
 80041ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041f0:	4313      	orrs	r3, r2
 80041f2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d10d      	bne.n	8004216 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6919      	ldr	r1, [r3, #16]
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004212:	460a      	mov	r2, r1
 8004214:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	0151      	lsls	r1, r2, #5
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	440a      	add	r2, r1
 800422c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004230:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004234:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	785b      	ldrb	r3, [r3, #1]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d14a      	bne.n	80042f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800427a:	f040 8086 	bne.w	800438a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	0151      	lsls	r1, r2, #5
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	440a      	add	r2, r1
 8004298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800429c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	7812      	ldrb	r2, [r2, #0]
 80042b6:	0151      	lsls	r1, r2, #5
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	440a      	add	r2, r1
 80042bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3301      	adds	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d902      	bls.n	80042dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	75fb      	strb	r3, [r7, #23]
          break;
 80042da:	e056      	b.n	800438a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042f4:	d0e7      	beq.n	80042c6 <USB_EPStopXfer+0x82>
 80042f6:	e048      	b.n	800438a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800430c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004310:	d13b      	bne.n	800438a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	7812      	ldrb	r2, [r2, #0]
 8004326:	0151      	lsls	r1, r2, #5
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	440a      	add	r2, r1
 800432c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004330:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004334:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	7812      	ldrb	r2, [r2, #0]
 800434a:	0151      	lsls	r1, r2, #5
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	440a      	add	r2, r1
 8004350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004354:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004358:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3301      	adds	r3, #1
 800435e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f242 7210 	movw	r2, #10000	; 0x2710
 8004366:	4293      	cmp	r3, r2
 8004368:	d902      	bls.n	8004370 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	75fb      	strb	r3, [r7, #23]
          break;
 800436e:	e00c      	b.n	800438a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004388:	d0e7      	beq.n	800435a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800438a:	7dfb      	ldrb	r3, [r7, #23]
}
 800438c:	4618      	mov	r0, r3
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004398:	b480      	push	{r7}
 800439a:	b089      	sub	sp, #36	; 0x24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	4611      	mov	r1, r2
 80043a4:	461a      	mov	r2, r3
 80043a6:	460b      	mov	r3, r1
 80043a8:	71fb      	strb	r3, [r7, #7]
 80043aa:	4613      	mov	r3, r2
 80043ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80043b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d123      	bne.n	8004406 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80043be:	88bb      	ldrh	r3, [r7, #4]
 80043c0:	3303      	adds	r3, #3
 80043c2:	089b      	lsrs	r3, r3, #2
 80043c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80043c6:	2300      	movs	r3, #0
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	e018      	b.n	80043fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	031a      	lsls	r2, r3, #12
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d8:	461a      	mov	r2, r3
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	3301      	adds	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3301      	adds	r3, #1
 80043ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	3301      	adds	r3, #1
 80043f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	3301      	adds	r3, #1
 80043f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	3301      	adds	r3, #1
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	429a      	cmp	r2, r3
 8004404:	d3e2      	bcc.n	80043cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3724      	adds	r7, #36	; 0x24
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004414:	b480      	push	{r7}
 8004416:	b08b      	sub	sp, #44	; 0x2c
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	4613      	mov	r3, r2
 8004420:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	089b      	lsrs	r3, r3, #2
 800442e:	b29b      	uxth	r3, r3
 8004430:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	f003 0303 	and.w	r3, r3, #3
 8004438:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800443a:	2300      	movs	r3, #0
 800443c:	623b      	str	r3, [r7, #32]
 800443e:	e014      	b.n	800446a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	601a      	str	r2, [r3, #0]
    pDest++;
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	3301      	adds	r3, #1
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	3301      	adds	r3, #1
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	3301      	adds	r3, #1
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	3301      	adds	r3, #1
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	3301      	adds	r3, #1
 8004468:	623b      	str	r3, [r7, #32]
 800446a:	6a3a      	ldr	r2, [r7, #32]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	429a      	cmp	r2, r3
 8004470:	d3e6      	bcc.n	8004440 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004472:	8bfb      	ldrh	r3, [r7, #30]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01e      	beq.n	80044b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004482:	461a      	mov	r2, r3
 8004484:	f107 0310 	add.w	r3, r7, #16
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
 8004498:	b2da      	uxtb	r2, r3
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	701a      	strb	r2, [r3, #0]
      i++;
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	3301      	adds	r3, #1
 80044a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	3301      	adds	r3, #1
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80044aa:	8bfb      	ldrh	r3, [r7, #30]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80044b0:	8bfb      	ldrh	r3, [r7, #30]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1ea      	bne.n	800448c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	372c      	adds	r7, #44	; 0x2c
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	785b      	ldrb	r3, [r3, #1]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d12c      	bne.n	800453a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	db12      	blt.n	8004518 <USB_EPSetStall+0x54>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00f      	beq.n	8004518 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	0151      	lsls	r1, r2, #5
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	440a      	add	r2, r1
 800450e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004512:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004516:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	0151      	lsls	r1, r2, #5
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	440a      	add	r2, r1
 800452e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004532:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	e02b      	b.n	8004592 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	db12      	blt.n	8004572 <USB_EPSetStall+0xae>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00f      	beq.n	8004572 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	0151      	lsls	r1, r2, #5
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	440a      	add	r2, r1
 8004568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800456c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004570:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	0151      	lsls	r1, r2, #5
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	440a      	add	r2, r1
 8004588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800458c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004590:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	785b      	ldrb	r3, [r3, #1]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d128      	bne.n	800460e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	0151      	lsls	r1, r2, #5
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	440a      	add	r2, r1
 80045d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	791b      	ldrb	r3, [r3, #4]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d003      	beq.n	80045ec <USB_EPClearStall+0x4c>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	791b      	ldrb	r3, [r3, #4]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d138      	bne.n	800465e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	440a      	add	r2, r1
 8004602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	e027      	b.n	800465e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	440a      	add	r2, r1
 8004624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004628:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800462c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	791b      	ldrb	r3, [r3, #4]
 8004632:	2b03      	cmp	r3, #3
 8004634:	d003      	beq.n	800463e <USB_EPClearStall+0x9e>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	791b      	ldrb	r3, [r3, #4]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d10f      	bne.n	800465e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	0151      	lsls	r1, r2, #5
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	440a      	add	r2, r1
 8004654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	e016      	b.n	80046ac <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468a:	461a      	mov	r2, r3
 800468c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004690:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469e:	461a      	mov	r2, r3
 80046a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	3301      	adds	r3, #1
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b0e      	cmp	r3, #14
 80046b0:	d9e5      	bls.n	800467e <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b8:	461a      	mov	r2, r3
 80046ba:	2300      	movs	r3, #0
 80046bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c4:	461a      	mov	r2, r3
 80046c6:	2300      	movs	r3, #0
 80046c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d0:	461a      	mov	r2, r3
 80046d2:	2300      	movs	r3, #0
 80046d4:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff f842 	bl	8003760 <USB_FlushRxFifo>
 80046dc:	4603      	mov	r3, r0
 80046de:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <USB_StopDevice+0x7e>
  {
    return ret;
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	e00b      	b.n	8004702 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 80046ea:	2110      	movs	r1, #16
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff f803 	bl	80036f8 <USB_FlushTxFifo>
 80046f2:	4603      	mov	r3, r0
 80046f4:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <USB_StopDevice+0x94>
  {
    return ret;
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	e000      	b.n	8004702 <USB_StopDevice+0x96>
  }

  return ret;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800470a:	b480      	push	{r7}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	460b      	mov	r3, r1
 8004714:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004728:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800472c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800473e:	68f9      	ldr	r1, [r7, #12]
 8004740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004744:	4313      	orrs	r3, r2
 8004746:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004756:	b480      	push	{r7}
 8004758:	b085      	sub	sp, #20
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004770:	f023 0303 	bic.w	r3, r3, #3
 8004774:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004784:	f023 0302 	bic.w	r3, r3, #2
 8004788:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047c6:	f043 0302 	orr.w	r3, r3, #2
 80047ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047da:	b480      	push	{r7}
 80047dc:	b085      	sub	sp, #20
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4013      	ands	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047f2:	68fb      	ldr	r3, [r7, #12]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	4013      	ands	r3, r2
 8004822:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	0c1b      	lsrs	r3, r3, #16
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	4013      	ands	r3, r2
 8004856:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	b29b      	uxth	r3, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	4013      	ands	r3, r2
 8004894:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004896:	68bb      	ldr	r3, [r7, #8]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
 80048d4:	01db      	lsls	r3, r3, #7
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80048de:	78fb      	ldrb	r3, [r7, #3]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4013      	ands	r3, r2
 80048f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048f2:	68bb      	ldr	r3, [r7, #8]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f003 0301 	and.w	r3, r3, #1
}
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004936:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800493a:	f023 0307 	bic.w	r3, r3, #7
 800493e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800494e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004952:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
	...

08004964 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	460b      	mov	r3, r1
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	333c      	adds	r3, #60	; 0x3c
 800497a:	3304      	adds	r3, #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4a26      	ldr	r2, [pc, #152]	; (8004a1c <USB_EP0_OutStart+0xb8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d90a      	bls.n	800499e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004998:	d101      	bne.n	800499e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	e037      	b.n	8004a0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a4:	461a      	mov	r2, r3
 80049a6:	2300      	movs	r3, #0
 80049a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049cc:	f043 0318 	orr.w	r3, r3, #24
 80049d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80049e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80049e6:	7afb      	ldrb	r3, [r7, #11]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d10f      	bne.n	8004a0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f2:	461a      	mov	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004a0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	4f54300a 	.word	0x4f54300a

08004a20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4a13      	ldr	r2, [pc, #76]	; (8004a84 <USB_CoreReset+0x64>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d901      	bls.n	8004a3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e01b      	b.n	8004a76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	daf2      	bge.n	8004a2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f043 0201 	orr.w	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <USB_CoreReset+0x64>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d901      	bls.n	8004a68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e006      	b.n	8004a76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d0f0      	beq.n	8004a56 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	00030d40 	.word	0x00030d40

08004a88 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004a90:	4a04      	ldr	r2, [pc, #16]	; (8004aa4 <LL_SetSystemCoreClock+0x1c>)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6013      	str	r3, [r2, #0]
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	20000000 	.word	0x20000000

08004aa8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e025      	b.n	8004b0c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	79fa      	ldrb	r2, [r7, #7]
 8004afe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f003 f93b 	bl	8007d7c <USBD_LL_Init>
 8004b06:	4603      	mov	r3, r0
 8004b08:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <USBD_DeInit+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6852      	ldr	r2, [r2, #4]
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	4798      	blx	r3
  }

  if (pdev->pConfDesc != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <USBD_DeInit+0x40>
  {
    pdev->pConfDesc = NULL;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Stop the low level driver  */
  ret = USBD_LL_Stop(pdev);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f003 f9c7 	bl	8007ee8 <USBD_LL_Stop>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	73fb      	strb	r3, [r7, #15]

  if (ret != USBD_OK)
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <USBD_DeInit+0x54>
  {
    return ret;
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	e005      	b.n	8004b74 <USBD_DeInit+0x60>
  }

  /* Initialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f003 f959 	bl	8007e20 <USBD_LL_DeInit>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	73fb      	strb	r3, [r7, #15]

  return ret;
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e010      	b.n	8004bb6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	f107 020e 	add.w	r2, r7, #14
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4798      	blx	r3
 8004bac:	4602      	mov	r2, r0
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
#endif /* USE_USB_FS */


  return USBD_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b082      	sub	sp, #8
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f003 f95c 	bl	8007e84 <USBD_LL_Start>
 8004bcc:	4603      	mov	r3, r0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d009      	beq.n	8004c1a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	78fa      	ldrb	r2, [r7, #3]
 8004c10:	4611      	mov	r1, r2
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	4798      	blx	r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d007      	beq.n	8004c4a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	78fa      	ldrb	r2, [r7, #3]
 8004c44:	4611      	mov	r1, r2
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	4798      	blx	r3
  }

  return USBD_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c64:	6839      	ldr	r1, [r7, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 ff65 	bl	8005b36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004c88:	f003 031f 	and.w	r3, r3, #31
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d01a      	beq.n	8004cc6 <USBD_LL_SetupStage+0x72>
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d822      	bhi.n	8004cda <USBD_LL_SetupStage+0x86>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <USBD_LL_SetupStage+0x4a>
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d00a      	beq.n	8004cb2 <USBD_LL_SetupStage+0x5e>
 8004c9c:	e01d      	b.n	8004cda <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fa18 	bl	80050dc <USBD_StdDevReq>
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb0:	e020      	b.n	8004cf4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004cb8:	4619      	mov	r1, r3
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fa7c 	bl	80051b8 <USBD_StdItfReq>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc4:	e016      	b.n	8004cf4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004ccc:	4619      	mov	r1, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 faba 	bl	8005248 <USBD_StdEPReq>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd8:	e00c      	b.n	8004cf4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004ce0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f003 f9a3 	bl	8008034 <USBD_LL_StallEP>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf2:	bf00      	nop
  }

  return ret;
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b086      	sub	sp, #24
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	460b      	mov	r3, r1
 8004d08:	607a      	str	r2, [r7, #4]
 8004d0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004d0c:	7afb      	ldrb	r3, [r7, #11]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d137      	bne.n	8004d82 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004d18:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d14a      	bne.n	8004dba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d913      	bls.n	8004d58 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	1ad2      	subs	r2, r2, r3
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	4293      	cmp	r3, r2
 8004d48:	bf28      	it	cs
 8004d4a:	4613      	movcs	r3, r2
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 ffc7 	bl	8005ce4 <USBD_CtlContinueRx>
 8004d56:	e030      	b.n	8004dba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d105      	bne.n	8004d7a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 ffc3 	bl	8005d06 <USBD_CtlSendStatus>
 8004d80:	e01b      	b.n	8004dba <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d013      	beq.n	8004db6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d10e      	bne.n	8004db6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	7afa      	ldrb	r2, [r7, #11]
 8004da2:	4611      	mov	r1, r2
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	4798      	blx	r3
 8004da8:	4603      	mov	r3, r0
 8004daa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
 8004db4:	e002      	b.n	8004dbc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e000      	b.n	8004dbc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004dd2:	7afb      	ldrb	r3, [r7, #11]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d16a      	bne.n	8004eae <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3314      	adds	r3, #20
 8004ddc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d155      	bne.n	8004e94 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d914      	bls.n	8004e1e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	1ad2      	subs	r2, r2, r3
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	461a      	mov	r2, r3
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 ff59 	bl	8005cc2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e10:	2300      	movs	r3, #0
 8004e12:	2200      	movs	r2, #0
 8004e14:	2100      	movs	r1, #0
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f003 fa12 	bl	8008240 <USBD_LL_PrepareReceive>
 8004e1c:	e03a      	b.n	8004e94 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d11c      	bne.n	8004e64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d316      	bcc.n	8004e64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d20f      	bcs.n	8004e64 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004e44:	2200      	movs	r2, #0
 8004e46:	2100      	movs	r1, #0
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 ff3a 	bl	8005cc2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e56:	2300      	movs	r3, #0
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f003 f9ef 	bl	8008240 <USBD_LL_PrepareReceive>
 8004e62:	e017      	b.n	8004e94 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d105      	bne.n	8004e86 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e86:	2180      	movs	r1, #128	; 0x80
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f003 f8d3 	bl	8008034 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 ff4c 	bl	8005d2c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d123      	bne.n	8004ee6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7ff fe99 	bl	8004bd6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004eac:	e01b      	b.n	8004ee6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d013      	beq.n	8004ee2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d10e      	bne.n	8004ee2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	7afa      	ldrb	r2, [r7, #11]
 8004ece:	4611      	mov	r1, r2
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	4798      	blx	r3
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8004ede:	7dfb      	ldrb	r3, [r7, #23]
 8004ee0:	e002      	b.n	8004ee8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e000      	b.n	8004ee8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d009      	beq.n	8004f34 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6852      	ldr	r2, [r2, #4]
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	4611      	mov	r1, r2
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f34:	2340      	movs	r3, #64	; 0x40
 8004f36:	2200      	movs	r2, #0
 8004f38:	2100      	movs	r1, #0
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f003 f806 	bl	8007f4c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2240      	movs	r2, #64	; 0x40
 8004f4c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f50:	2340      	movs	r3, #64	; 0x40
 8004f52:	2200      	movs	r2, #0
 8004f54:	2180      	movs	r1, #128	; 0x80
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f002 fff8 	bl	8007f4c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2240      	movs	r2, #64	; 0x40
 8004f66:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	78fa      	ldrb	r2, [r7, #3]
 8004f82:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2204      	movs	r2, #4
 8004faa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d105      	bne.n	8004fda <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d10b      	bne.n	8005012 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d005      	beq.n	8005012 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b082      	sub	sp, #8
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800507c:	2b00      	cmp	r3, #0
 800507e:	d009      	beq.n	8005094 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6852      	ldr	r2, [r2, #4]
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	4611      	mov	r1, r2
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4798      	blx	r3
  }

  return USBD_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800509e:	b480      	push	{r7}
 80050a0:	b087      	sub	sp, #28
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	3301      	adds	r3, #1
 80050b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80050bc:	8a3b      	ldrh	r3, [r7, #16]
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	b21a      	sxth	r2, r3
 80050c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	b21b      	sxth	r3, r3
 80050ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80050cc:	89fb      	ldrh	r3, [r7, #14]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050f2:	2b40      	cmp	r3, #64	; 0x40
 80050f4:	d005      	beq.n	8005102 <USBD_StdDevReq+0x26>
 80050f6:	2b40      	cmp	r3, #64	; 0x40
 80050f8:	d853      	bhi.n	80051a2 <USBD_StdDevReq+0xc6>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00b      	beq.n	8005116 <USBD_StdDevReq+0x3a>
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d14f      	bne.n	80051a2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	6839      	ldr	r1, [r7, #0]
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	4798      	blx	r3
 8005110:	4603      	mov	r3, r0
 8005112:	73fb      	strb	r3, [r7, #15]
    break;
 8005114:	e04a      	b.n	80051ac <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	785b      	ldrb	r3, [r3, #1]
 800511a:	2b09      	cmp	r3, #9
 800511c:	d83b      	bhi.n	8005196 <USBD_StdDevReq+0xba>
 800511e:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <USBD_StdDevReq+0x48>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005179 	.word	0x08005179
 8005128:	0800518d 	.word	0x0800518d
 800512c:	08005197 	.word	0x08005197
 8005130:	08005183 	.word	0x08005183
 8005134:	08005197 	.word	0x08005197
 8005138:	08005157 	.word	0x08005157
 800513c:	0800514d 	.word	0x0800514d
 8005140:	08005197 	.word	0x08005197
 8005144:	0800516f 	.word	0x0800516f
 8005148:	08005161 	.word	0x08005161
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800514c:	6839      	ldr	r1, [r7, #0]
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f9d8 	bl	8005504 <USBD_GetDescriptor>
      break;
 8005154:	e024      	b.n	80051a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005156:	6839      	ldr	r1, [r7, #0]
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fb67 	bl	800582c <USBD_SetAddress>
      break;
 800515e:	e01f      	b.n	80051a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005160:	6839      	ldr	r1, [r7, #0]
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fba6 	bl	80058b4 <USBD_SetConfig>
 8005168:	4603      	mov	r3, r0
 800516a:	73fb      	strb	r3, [r7, #15]
      break;
 800516c:	e018      	b.n	80051a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800516e:	6839      	ldr	r1, [r7, #0]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fc43 	bl	80059fc <USBD_GetConfig>
      break;
 8005176:	e013      	b.n	80051a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005178:	6839      	ldr	r1, [r7, #0]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fc73 	bl	8005a66 <USBD_GetStatus>
      break;
 8005180:	e00e      	b.n	80051a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005182:	6839      	ldr	r1, [r7, #0]
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fca1 	bl	8005acc <USBD_SetFeature>
      break;
 800518a:	e009      	b.n	80051a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fcb0 	bl	8005af4 <USBD_ClrFeature>
      break;
 8005194:	e004      	b.n	80051a0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005196:	6839      	ldr	r1, [r7, #0]
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fd06 	bl	8005baa <USBD_CtlError>
      break;
 800519e:	bf00      	nop
    }
    break;
 80051a0:	e004      	b.n	80051ac <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fd00 	bl	8005baa <USBD_CtlError>
    break;
 80051aa:	bf00      	nop
  }

  return ret;
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop

080051b8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d005      	beq.n	80051de <USBD_StdItfReq+0x26>
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d82e      	bhi.n	8005234 <USBD_StdItfReq+0x7c>
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <USBD_StdItfReq+0x26>
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d12a      	bne.n	8005234 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051e4:	3b01      	subs	r3, #1
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d81d      	bhi.n	8005226 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	889b      	ldrh	r3, [r3, #4]
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d813      	bhi.n	800521c <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	6839      	ldr	r1, [r7, #0]
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	4798      	blx	r3
 8005202:	4603      	mov	r3, r0
 8005204:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	88db      	ldrh	r3, [r3, #6]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d110      	bne.n	8005230 <USBD_StdItfReq+0x78>
 800520e:	7bfb      	ldrb	r3, [r7, #15]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10d      	bne.n	8005230 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fd76 	bl	8005d06 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800521a:	e009      	b.n	8005230 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800521c:	6839      	ldr	r1, [r7, #0]
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fcc3 	bl	8005baa <USBD_CtlError>
      break;
 8005224:	e004      	b.n	8005230 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8005226:	6839      	ldr	r1, [r7, #0]
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fcbe 	bl	8005baa <USBD_CtlError>
      break;
 800522e:	e000      	b.n	8005232 <USBD_StdItfReq+0x7a>
      break;
 8005230:	bf00      	nop
    }
    break;
 8005232:	e004      	b.n	800523e <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8005234:	6839      	ldr	r1, [r7, #0]
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fcb7 	bl	8005baa <USBD_CtlError>
    break;
 800523c:	bf00      	nop
  }

  return ret;
 800523e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	889b      	ldrh	r3, [r3, #4]
 800525a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	d007      	beq.n	8005278 <USBD_StdEPReq+0x30>
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	f200 8140 	bhi.w	80054ee <USBD_StdEPReq+0x2a6>
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00c      	beq.n	800528c <USBD_StdEPReq+0x44>
 8005272:	2b20      	cmp	r3, #32
 8005274:	f040 813b 	bne.w	80054ee <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	6839      	ldr	r1, [r7, #0]
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	4798      	blx	r3
 8005286:	4603      	mov	r3, r0
 8005288:	73fb      	strb	r3, [r7, #15]
    break;
 800528a:	e135      	b.n	80054f8 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	2b03      	cmp	r3, #3
 8005292:	d007      	beq.n	80052a4 <USBD_StdEPReq+0x5c>
 8005294:	2b03      	cmp	r3, #3
 8005296:	f300 8124 	bgt.w	80054e2 <USBD_StdEPReq+0x29a>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d07b      	beq.n	8005396 <USBD_StdEPReq+0x14e>
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d03b      	beq.n	800531a <USBD_StdEPReq+0xd2>
 80052a2:	e11e      	b.n	80054e2 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d002      	beq.n	80052b4 <USBD_StdEPReq+0x6c>
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	d016      	beq.n	80052e0 <USBD_StdEPReq+0x98>
 80052b2:	e02c      	b.n	800530e <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052b4:	7bbb      	ldrb	r3, [r7, #14]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00d      	beq.n	80052d6 <USBD_StdEPReq+0x8e>
 80052ba:	7bbb      	ldrb	r3, [r7, #14]
 80052bc:	2b80      	cmp	r3, #128	; 0x80
 80052be:	d00a      	beq.n	80052d6 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80052c0:	7bbb      	ldrb	r3, [r7, #14]
 80052c2:	4619      	mov	r1, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f002 feb5 	bl	8008034 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80052ca:	2180      	movs	r1, #128	; 0x80
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f002 feb1 	bl	8008034 <USBD_LL_StallEP>
 80052d2:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80052d4:	e020      	b.n	8005318 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 80052d6:	6839      	ldr	r1, [r7, #0]
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fc66 	bl	8005baa <USBD_CtlError>
        break;
 80052de:	e01b      	b.n	8005318 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	885b      	ldrh	r3, [r3, #2]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10e      	bne.n	8005306 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80052e8:	7bbb      	ldrb	r3, [r7, #14]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00b      	beq.n	8005306 <USBD_StdEPReq+0xbe>
 80052ee:	7bbb      	ldrb	r3, [r7, #14]
 80052f0:	2b80      	cmp	r3, #128	; 0x80
 80052f2:	d008      	beq.n	8005306 <USBD_StdEPReq+0xbe>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	88db      	ldrh	r3, [r3, #6]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d104      	bne.n	8005306 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80052fc:	7bbb      	ldrb	r3, [r7, #14]
 80052fe:	4619      	mov	r1, r3
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f002 fe97 	bl	8008034 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fcfd 	bl	8005d06 <USBD_CtlSendStatus>

        break;
 800530c:	e004      	b.n	8005318 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800530e:	6839      	ldr	r1, [r7, #0]
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fc4a 	bl	8005baa <USBD_CtlError>
        break;
 8005316:	bf00      	nop
      }
      break;
 8005318:	e0e8      	b.n	80054ec <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005320:	2b02      	cmp	r3, #2
 8005322:	d002      	beq.n	800532a <USBD_StdEPReq+0xe2>
 8005324:	2b03      	cmp	r3, #3
 8005326:	d016      	beq.n	8005356 <USBD_StdEPReq+0x10e>
 8005328:	e02e      	b.n	8005388 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800532a:	7bbb      	ldrb	r3, [r7, #14]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00d      	beq.n	800534c <USBD_StdEPReq+0x104>
 8005330:	7bbb      	ldrb	r3, [r7, #14]
 8005332:	2b80      	cmp	r3, #128	; 0x80
 8005334:	d00a      	beq.n	800534c <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005336:	7bbb      	ldrb	r3, [r7, #14]
 8005338:	4619      	mov	r1, r3
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f002 fe7a 	bl	8008034 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005340:	2180      	movs	r1, #128	; 0x80
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f002 fe76 	bl	8008034 <USBD_LL_StallEP>
 8005348:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800534a:	e023      	b.n	8005394 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800534c:	6839      	ldr	r1, [r7, #0]
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fc2b 	bl	8005baa <USBD_CtlError>
        break;
 8005354:	e01e      	b.n	8005394 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	885b      	ldrh	r3, [r3, #2]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d119      	bne.n	8005392 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800535e:	7bbb      	ldrb	r3, [r7, #14]
 8005360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005364:	2b00      	cmp	r3, #0
 8005366:	d004      	beq.n	8005372 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005368:	7bbb      	ldrb	r3, [r7, #14]
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f002 fe97 	bl	80080a0 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fcc7 	bl	8005d06 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	6839      	ldr	r1, [r7, #0]
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	4798      	blx	r3
        }
        break;
 8005386:	e004      	b.n	8005392 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8005388:	6839      	ldr	r1, [r7, #0]
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fc0d 	bl	8005baa <USBD_CtlError>
        break;
 8005390:	e000      	b.n	8005394 <USBD_StdEPReq+0x14c>
        break;
 8005392:	bf00      	nop
      }
      break;
 8005394:	e0aa      	b.n	80054ec <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800539c:	2b02      	cmp	r3, #2
 800539e:	d002      	beq.n	80053a6 <USBD_StdEPReq+0x15e>
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d032      	beq.n	800540a <USBD_StdEPReq+0x1c2>
 80053a4:	e097      	b.n	80054d6 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053a6:	7bbb      	ldrb	r3, [r7, #14]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <USBD_StdEPReq+0x174>
 80053ac:	7bbb      	ldrb	r3, [r7, #14]
 80053ae:	2b80      	cmp	r3, #128	; 0x80
 80053b0:	d004      	beq.n	80053bc <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80053b2:	6839      	ldr	r1, [r7, #0]
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fbf8 	bl	8005baa <USBD_CtlError>
          break;
 80053ba:	e091      	b.n	80054e0 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	da0b      	bge.n	80053dc <USBD_StdEPReq+0x194>
 80053c4:	7bbb      	ldrb	r3, [r7, #14]
 80053c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	3310      	adds	r3, #16
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	4413      	add	r3, r2
 80053d8:	3304      	adds	r3, #4
 80053da:	e00b      	b.n	80053f4 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 80053dc:	7bbb      	ldrb	r3, [r7, #14]
 80053de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	4413      	add	r3, r2
 80053f2:	3304      	adds	r3, #4
 80053f4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2202      	movs	r2, #2
 8005400:	4619      	mov	r1, r3
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fc42 	bl	8005c8c <USBD_CtlSendData>
        break;
 8005408:	e06a      	b.n	80054e0 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800540a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800540e:	2b00      	cmp	r3, #0
 8005410:	da11      	bge.n	8005436 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005412:	7bbb      	ldrb	r3, [r7, #14]
 8005414:	f003 020f 	and.w	r2, r3, #15
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	3324      	adds	r3, #36	; 0x24
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d117      	bne.n	800545c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 800542c:	6839      	ldr	r1, [r7, #0]
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fbbb 	bl	8005baa <USBD_CtlError>
            break;
 8005434:	e054      	b.n	80054e0 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005436:	7bbb      	ldrb	r3, [r7, #14]
 8005438:	f003 020f 	and.w	r2, r3, #15
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8005452:	6839      	ldr	r1, [r7, #0]
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fba8 	bl	8005baa <USBD_CtlError>
            break;
 800545a:	e041      	b.n	80054e0 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800545c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005460:	2b00      	cmp	r3, #0
 8005462:	da0b      	bge.n	800547c <USBD_StdEPReq+0x234>
 8005464:	7bbb      	ldrb	r3, [r7, #14]
 8005466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	3310      	adds	r3, #16
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	4413      	add	r3, r2
 8005478:	3304      	adds	r3, #4
 800547a:	e00b      	b.n	8005494 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800547c:	7bbb      	ldrb	r3, [r7, #14]
 800547e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005482:	4613      	mov	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	4413      	add	r3, r2
 8005492:	3304      	adds	r3, #4
 8005494:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005496:	7bbb      	ldrb	r3, [r7, #14]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <USBD_StdEPReq+0x25a>
 800549c:	7bbb      	ldrb	r3, [r7, #14]
 800549e:	2b80      	cmp	r3, #128	; 0x80
 80054a0:	d103      	bne.n	80054aa <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	e00e      	b.n	80054c8 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80054aa:	7bbb      	ldrb	r3, [r7, #14]
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f002 fe2c 	bl	800810c <USBD_LL_IsStallEP>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2201      	movs	r2, #1
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	e002      	b.n	80054c8 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2202      	movs	r2, #2
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fbdc 	bl	8005c8c <USBD_CtlSendData>
          break;
 80054d4:	e004      	b.n	80054e0 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 80054d6:	6839      	ldr	r1, [r7, #0]
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fb66 	bl	8005baa <USBD_CtlError>
        break;
 80054de:	bf00      	nop
      }
      break;
 80054e0:	e004      	b.n	80054ec <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fb60 	bl	8005baa <USBD_CtlError>
      break;
 80054ea:	bf00      	nop
    }
    break;
 80054ec:	e004      	b.n	80054f8 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fb5a 	bl	8005baa <USBD_CtlError>
    break;
 80054f6:	bf00      	nop
  }

  return ret;
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	885b      	ldrh	r3, [r3, #2]
 800551e:	0a1b      	lsrs	r3, r3, #8
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b01      	subs	r3, #1
 8005524:	2b0e      	cmp	r3, #14
 8005526:	f200 8152 	bhi.w	80057ce <USBD_GetDescriptor+0x2ca>
 800552a:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <USBD_GetDescriptor+0x2c>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	080055a1 	.word	0x080055a1
 8005534:	080055b9 	.word	0x080055b9
 8005538:	080055f9 	.word	0x080055f9
 800553c:	080057cf 	.word	0x080057cf
 8005540:	080057cf 	.word	0x080057cf
 8005544:	0800576f 	.word	0x0800576f
 8005548:	0800579b 	.word	0x0800579b
 800554c:	080057cf 	.word	0x080057cf
 8005550:	080057cf 	.word	0x080057cf
 8005554:	080057cf 	.word	0x080057cf
 8005558:	080057cf 	.word	0x080057cf
 800555c:	080057cf 	.word	0x080057cf
 8005560:	080057cf 	.word	0x080057cf
 8005564:	080057cf 	.word	0x080057cf
 8005568:	0800556d 	.word	0x0800556d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00b      	beq.n	8005590 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	7c12      	ldrb	r2, [r2, #16]
 8005584:	f107 0108 	add.w	r1, r7, #8
 8005588:	4610      	mov	r0, r2
 800558a:	4798      	blx	r3
 800558c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800558e:	e126      	b.n	80057de <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8005590:	6839      	ldr	r1, [r7, #0]
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fb09 	bl	8005baa <USBD_CtlError>
      err++;
 8005598:	7afb      	ldrb	r3, [r7, #11]
 800559a:	3301      	adds	r3, #1
 800559c:	72fb      	strb	r3, [r7, #11]
    break;
 800559e:	e11e      	b.n	80057de <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	7c12      	ldrb	r2, [r2, #16]
 80055ac:	f107 0108 	add.w	r1, r7, #8
 80055b0:	4610      	mov	r0, r2
 80055b2:	4798      	blx	r3
 80055b4:	60f8      	str	r0, [r7, #12]
    break;
 80055b6:	e112      	b.n	80057de <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	7c1b      	ldrb	r3, [r3, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10d      	bne.n	80055dc <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c8:	f107 0208 	add.w	r2, r7, #8
 80055cc:	4610      	mov	r0, r2
 80055ce:	4798      	blx	r3
 80055d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3301      	adds	r3, #1
 80055d6:	2202      	movs	r2, #2
 80055d8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80055da:	e100      	b.n	80057de <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	f107 0208 	add.w	r2, r7, #8
 80055e8:	4610      	mov	r0, r2
 80055ea:	4798      	blx	r3
 80055ec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3301      	adds	r3, #1
 80055f2:	2202      	movs	r2, #2
 80055f4:	701a      	strb	r2, [r3, #0]
    break;
 80055f6:	e0f2      	b.n	80057de <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	885b      	ldrh	r3, [r3, #2]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b05      	cmp	r3, #5
 8005600:	f200 80ac 	bhi.w	800575c <USBD_GetDescriptor+0x258>
 8005604:	a201      	add	r2, pc, #4	; (adr r2, 800560c <USBD_GetDescriptor+0x108>)
 8005606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560a:	bf00      	nop
 800560c:	08005625 	.word	0x08005625
 8005610:	08005659 	.word	0x08005659
 8005614:	0800568d 	.word	0x0800568d
 8005618:	080056c1 	.word	0x080056c1
 800561c:	080056f5 	.word	0x080056f5
 8005620:	08005729 	.word	0x08005729
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00b      	beq.n	8005648 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	7c12      	ldrb	r2, [r2, #16]
 800563c:	f107 0108 	add.w	r1, r7, #8
 8005640:	4610      	mov	r0, r2
 8005642:	4798      	blx	r3
 8005644:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005646:	e091      	b.n	800576c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 faad 	bl	8005baa <USBD_CtlError>
        err++;
 8005650:	7afb      	ldrb	r3, [r7, #11]
 8005652:	3301      	adds	r3, #1
 8005654:	72fb      	strb	r3, [r7, #11]
      break;
 8005656:	e089      	b.n	800576c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00b      	beq.n	800567c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	7c12      	ldrb	r2, [r2, #16]
 8005670:	f107 0108 	add.w	r1, r7, #8
 8005674:	4610      	mov	r0, r2
 8005676:	4798      	blx	r3
 8005678:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800567a:	e077      	b.n	800576c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fa93 	bl	8005baa <USBD_CtlError>
        err++;
 8005684:	7afb      	ldrb	r3, [r7, #11]
 8005686:	3301      	adds	r3, #1
 8005688:	72fb      	strb	r3, [r7, #11]
      break;
 800568a:	e06f      	b.n	800576c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00b      	beq.n	80056b0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	7c12      	ldrb	r2, [r2, #16]
 80056a4:	f107 0108 	add.w	r1, r7, #8
 80056a8:	4610      	mov	r0, r2
 80056aa:	4798      	blx	r3
 80056ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80056ae:	e05d      	b.n	800576c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80056b0:	6839      	ldr	r1, [r7, #0]
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fa79 	bl	8005baa <USBD_CtlError>
        err++;
 80056b8:	7afb      	ldrb	r3, [r7, #11]
 80056ba:	3301      	adds	r3, #1
 80056bc:	72fb      	strb	r3, [r7, #11]
      break;
 80056be:	e055      	b.n	800576c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00b      	beq.n	80056e4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	7c12      	ldrb	r2, [r2, #16]
 80056d8:	f107 0108 	add.w	r1, r7, #8
 80056dc:	4610      	mov	r0, r2
 80056de:	4798      	blx	r3
 80056e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80056e2:	e043      	b.n	800576c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80056e4:	6839      	ldr	r1, [r7, #0]
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fa5f 	bl	8005baa <USBD_CtlError>
        err++;
 80056ec:	7afb      	ldrb	r3, [r7, #11]
 80056ee:	3301      	adds	r3, #1
 80056f0:	72fb      	strb	r3, [r7, #11]
      break;
 80056f2:	e03b      	b.n	800576c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00b      	beq.n	8005718 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	7c12      	ldrb	r2, [r2, #16]
 800570c:	f107 0108 	add.w	r1, r7, #8
 8005710:	4610      	mov	r0, r2
 8005712:	4798      	blx	r3
 8005714:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005716:	e029      	b.n	800576c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fa45 	bl	8005baa <USBD_CtlError>
        err++;
 8005720:	7afb      	ldrb	r3, [r7, #11]
 8005722:	3301      	adds	r3, #1
 8005724:	72fb      	strb	r3, [r7, #11]
      break;
 8005726:	e021      	b.n	800576c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00b      	beq.n	800574c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	7c12      	ldrb	r2, [r2, #16]
 8005740:	f107 0108 	add.w	r1, r7, #8
 8005744:	4610      	mov	r0, r2
 8005746:	4798      	blx	r3
 8005748:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800574a:	e00f      	b.n	800576c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fa2b 	bl	8005baa <USBD_CtlError>
        err++;
 8005754:	7afb      	ldrb	r3, [r7, #11]
 8005756:	3301      	adds	r3, #1
 8005758:	72fb      	strb	r3, [r7, #11]
      break;
 800575a:	e007      	b.n	800576c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fa23 	bl	8005baa <USBD_CtlError>
      err++;
 8005764:	7afb      	ldrb	r3, [r7, #11]
 8005766:	3301      	adds	r3, #1
 8005768:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800576a:	bf00      	nop
    }
    break;
 800576c:	e037      	b.n	80057de <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	7c1b      	ldrb	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577e:	f107 0208 	add.w	r2, r7, #8
 8005782:	4610      	mov	r0, r2
 8005784:	4798      	blx	r3
 8005786:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005788:	e029      	b.n	80057de <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800578a:	6839      	ldr	r1, [r7, #0]
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fa0c 	bl	8005baa <USBD_CtlError>
      err++;
 8005792:	7afb      	ldrb	r3, [r7, #11]
 8005794:	3301      	adds	r3, #1
 8005796:	72fb      	strb	r3, [r7, #11]
    break;
 8005798:	e021      	b.n	80057de <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	7c1b      	ldrb	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10d      	bne.n	80057be <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057aa:	f107 0208 	add.w	r2, r7, #8
 80057ae:	4610      	mov	r0, r2
 80057b0:	4798      	blx	r3
 80057b2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3301      	adds	r3, #1
 80057b8:	2207      	movs	r2, #7
 80057ba:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80057bc:	e00f      	b.n	80057de <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f9f2 	bl	8005baa <USBD_CtlError>
      err++;
 80057c6:	7afb      	ldrb	r3, [r7, #11]
 80057c8:	3301      	adds	r3, #1
 80057ca:	72fb      	strb	r3, [r7, #11]
    break;
 80057cc:	e007      	b.n	80057de <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80057ce:	6839      	ldr	r1, [r7, #0]
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f9ea 	bl	8005baa <USBD_CtlError>
    err++;
 80057d6:	7afb      	ldrb	r3, [r7, #11]
 80057d8:	3301      	adds	r3, #1
 80057da:	72fb      	strb	r3, [r7, #11]
    break;
 80057dc:	bf00      	nop
  }

  if (err != 0U)
 80057de:	7afb      	ldrb	r3, [r7, #11]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d11e      	bne.n	8005822 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	88db      	ldrh	r3, [r3, #6]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d016      	beq.n	800581a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80057ec:	893b      	ldrh	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00e      	beq.n	8005810 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	88da      	ldrh	r2, [r3, #6]
 80057f6:	893b      	ldrh	r3, [r7, #8]
 80057f8:	4293      	cmp	r3, r2
 80057fa:	bf28      	it	cs
 80057fc:	4613      	movcs	r3, r2
 80057fe:	b29b      	uxth	r3, r3
 8005800:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005802:	893b      	ldrh	r3, [r7, #8]
 8005804:	461a      	mov	r2, r3
 8005806:	68f9      	ldr	r1, [r7, #12]
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fa3f 	bl	8005c8c <USBD_CtlSendData>
 800580e:	e009      	b.n	8005824 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f9c9 	bl	8005baa <USBD_CtlError>
 8005818:	e004      	b.n	8005824 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fa73 	bl	8005d06 <USBD_CtlSendStatus>
 8005820:	e000      	b.n	8005824 <USBD_GetDescriptor+0x320>
    return;
 8005822:	bf00      	nop
    }
  }
}
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop

0800582c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	889b      	ldrh	r3, [r3, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d130      	bne.n	80058a0 <USBD_SetAddress+0x74>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	88db      	ldrh	r3, [r3, #6]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d12c      	bne.n	80058a0 <USBD_SetAddress+0x74>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	885b      	ldrh	r3, [r3, #2]
 800584a:	2b7f      	cmp	r3, #127	; 0x7f
 800584c:	d828      	bhi.n	80058a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	885b      	ldrh	r3, [r3, #2]
 8005852:	b2db      	uxtb	r3, r3
 8005854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005858:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005860:	2b03      	cmp	r3, #3
 8005862:	d104      	bne.n	800586e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005864:	6839      	ldr	r1, [r7, #0]
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f99f 	bl	8005baa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800586c:	e01d      	b.n	80058aa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	7bfa      	ldrb	r2, [r7, #15]
 8005872:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f002 fc72 	bl	8008164 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fa40 	bl	8005d06 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d004      	beq.n	8005896 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005894:	e009      	b.n	80058aa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800589e:	e004      	b.n	80058aa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f981 	bl	8005baa <USBD_CtlError>
  }
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	885b      	ldrh	r3, [r3, #2]
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	4b4b      	ldr	r3, [pc, #300]	; (80059f8 <USBD_SetConfig+0x144>)
 80058ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80058cc:	4b4a      	ldr	r3, [pc, #296]	; (80059f8 <USBD_SetConfig+0x144>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d905      	bls.n	80058e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f967 	bl	8005baa <USBD_CtlError>
    return USBD_FAIL;
 80058dc:	2303      	movs	r3, #3
 80058de:	e087      	b.n	80059f0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d002      	beq.n	80058f0 <USBD_SetConfig+0x3c>
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d025      	beq.n	800593a <USBD_SetConfig+0x86>
 80058ee:	e071      	b.n	80059d4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80058f0:	4b41      	ldr	r3, [pc, #260]	; (80059f8 <USBD_SetConfig+0x144>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01c      	beq.n	8005932 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80058f8:	4b3f      	ldr	r3, [pc, #252]	; (80059f8 <USBD_SetConfig+0x144>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	461a      	mov	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005902:	4b3d      	ldr	r3, [pc, #244]	; (80059f8 <USBD_SetConfig+0x144>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	4619      	mov	r1, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff f96f 	bl	8004bec <USBD_SetClassConfig>
 800590e:	4603      	mov	r3, r0
 8005910:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d004      	beq.n	8005922 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005918:	6839      	ldr	r1, [r7, #0]
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f945 	bl	8005baa <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005920:	e065      	b.n	80059ee <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f9ef 	bl	8005d06 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2203      	movs	r2, #3
 800592c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005930:	e05d      	b.n	80059ee <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f9e7 	bl	8005d06 <USBD_CtlSendStatus>
    break;
 8005938:	e059      	b.n	80059ee <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800593a:	4b2f      	ldr	r3, [pc, #188]	; (80059f8 <USBD_SetConfig+0x144>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d112      	bne.n	8005968 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2202      	movs	r2, #2
 8005946:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800594a:	4b2b      	ldr	r3, [pc, #172]	; (80059f8 <USBD_SetConfig+0x144>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005954:	4b28      	ldr	r3, [pc, #160]	; (80059f8 <USBD_SetConfig+0x144>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff f962 	bl	8004c24 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f9d0 	bl	8005d06 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005966:	e042      	b.n	80059ee <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005968:	4b23      	ldr	r3, [pc, #140]	; (80059f8 <USBD_SetConfig+0x144>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	461a      	mov	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	429a      	cmp	r2, r3
 8005974:	d02a      	beq.n	80059cc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	b2db      	uxtb	r3, r3
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff f950 	bl	8004c24 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005984:	4b1c      	ldr	r3, [pc, #112]	; (80059f8 <USBD_SetConfig+0x144>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	461a      	mov	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800598e:	4b1a      	ldr	r3, [pc, #104]	; (80059f8 <USBD_SetConfig+0x144>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	4619      	mov	r1, r3
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff f929 	bl	8004bec <USBD_SetClassConfig>
 800599a:	4603      	mov	r3, r0
 800599c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00f      	beq.n	80059c4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80059a4:	6839      	ldr	r1, [r7, #0]
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f8ff 	bl	8005baa <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7ff f935 	bl	8004c24 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2202      	movs	r2, #2
 80059be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80059c2:	e014      	b.n	80059ee <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f99e 	bl	8005d06 <USBD_CtlSendStatus>
    break;
 80059ca:	e010      	b.n	80059ee <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f99a 	bl	8005d06 <USBD_CtlSendStatus>
    break;
 80059d2:	e00c      	b.n	80059ee <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80059d4:	6839      	ldr	r1, [r7, #0]
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f8e7 	bl	8005baa <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <USBD_SetConfig+0x144>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	4619      	mov	r1, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff f91e 	bl	8004c24 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80059e8:	2303      	movs	r3, #3
 80059ea:	73fb      	strb	r3, [r7, #15]
    break;
 80059ec:	bf00      	nop
  }

  return ret;
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	200006d8 	.word	0x200006d8

080059fc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	88db      	ldrh	r3, [r3, #6]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d004      	beq.n	8005a18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f8ca 	bl	8005baa <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005a16:	e022      	b.n	8005a5e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	dc02      	bgt.n	8005a28 <USBD_GetConfig+0x2c>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	dc03      	bgt.n	8005a2e <USBD_GetConfig+0x32>
 8005a26:	e015      	b.n	8005a54 <USBD_GetConfig+0x58>
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d00b      	beq.n	8005a44 <USBD_GetConfig+0x48>
 8005a2c:	e012      	b.n	8005a54 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3308      	adds	r3, #8
 8005a38:	2201      	movs	r2, #1
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f925 	bl	8005c8c <USBD_CtlSendData>
      break;
 8005a42:	e00c      	b.n	8005a5e <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3304      	adds	r3, #4
 8005a48:	2201      	movs	r2, #1
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f91d 	bl	8005c8c <USBD_CtlSendData>
      break;
 8005a52:	e004      	b.n	8005a5e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f8a7 	bl	8005baa <USBD_CtlError>
      break;
 8005a5c:	bf00      	nop
}
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a76:	3b01      	subs	r3, #1
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d81e      	bhi.n	8005aba <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	88db      	ldrh	r3, [r3, #6]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d004      	beq.n	8005a8e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f88f 	bl	8005baa <USBD_CtlError>
      break;
 8005a8c:	e01a      	b.n	8005ac4 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f043 0202 	orr.w	r2, r3, #2
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	330c      	adds	r3, #12
 8005aae:	2202      	movs	r2, #2
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f8ea 	bl	8005c8c <USBD_CtlSendData>
    break;
 8005ab8:	e004      	b.n	8005ac4 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005aba:	6839      	ldr	r1, [r7, #0]
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f874 	bl	8005baa <USBD_CtlError>
    break;
 8005ac2:	bf00      	nop
  }
}
 8005ac4:	bf00      	nop
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	885b      	ldrh	r3, [r3, #2]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d106      	bne.n	8005aec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f90d 	bl	8005d06 <USBD_CtlSendStatus>
  }
}
 8005aec:	bf00      	nop
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b04:	3b01      	subs	r3, #1
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d80b      	bhi.n	8005b22 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	885b      	ldrh	r3, [r3, #2]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d10c      	bne.n	8005b2c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f8f3 	bl	8005d06 <USBD_CtlSendStatus>
      }
      break;
 8005b20:	e004      	b.n	8005b2c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f840 	bl	8005baa <USBD_CtlError>
      break;
 8005b2a:	e000      	b.n	8005b2e <USBD_ClrFeature+0x3a>
      break;
 8005b2c:	bf00      	nop
  }
}
 8005b2e:	bf00      	nop
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	781a      	ldrb	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	781a      	ldrb	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f7ff fa9c 	bl	800509e <SWAPBYTE>
 8005b66:	4603      	mov	r3, r0
 8005b68:	461a      	mov	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3301      	adds	r3, #1
 8005b72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3301      	adds	r3, #1
 8005b78:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f7ff fa8f 	bl	800509e <SWAPBYTE>
 8005b80:	4603      	mov	r3, r0
 8005b82:	461a      	mov	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3301      	adds	r3, #1
 8005b92:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f7ff fa82 	bl	800509e <SWAPBYTE>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	80da      	strh	r2, [r3, #6]
}
 8005ba2:	bf00      	nop
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bb4:	2180      	movs	r1, #128	; 0x80
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f002 fa3c 	bl	8008034 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f002 fa38 	bl	8008034 <USBD_LL_StallEP>
}
 8005bc4:	bf00      	nop
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d036      	beq.n	8005c50 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005be6:	6938      	ldr	r0, [r7, #16]
 8005be8:	f000 f836 	bl	8005c58 <USBD_GetLen>
 8005bec:	4603      	mov	r3, r0
 8005bee:	3301      	adds	r3, #1
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005bfa:	7dfb      	ldrb	r3, [r7, #23]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	4413      	add	r3, r2
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	7812      	ldrb	r2, [r2, #0]
 8005c04:	701a      	strb	r2, [r3, #0]
  idx++;
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	4413      	add	r3, r2
 8005c12:	2203      	movs	r2, #3
 8005c14:	701a      	strb	r2, [r3, #0]
  idx++;
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005c1c:	e013      	b.n	8005c46 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	4413      	add	r3, r2
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	7812      	ldrb	r2, [r2, #0]
 8005c28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	613b      	str	r3, [r7, #16]
    idx++;
 8005c30:	7dfb      	ldrb	r3, [r7, #23]
 8005c32:	3301      	adds	r3, #1
 8005c34:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	701a      	strb	r2, [r3, #0]
    idx++;
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
 8005c42:	3301      	adds	r3, #1
 8005c44:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1e7      	bne.n	8005c1e <USBD_GetString+0x52>
 8005c4e:	e000      	b.n	8005c52 <USBD_GetString+0x86>
    return;
 8005c50:	bf00      	nop
  }
}
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005c68:	e005      	b.n	8005c76 <USBD_GetLen+0x1e>
  {
    len++;
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	3301      	adds	r3, #1
 8005c74:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1f5      	bne.n	8005c6a <USBD_GetLen+0x12>
  }

  return len;
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f002 fa8c 	bl	80081d0 <USBD_LL_Transmit>

  return USBD_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	60f8      	str	r0, [r7, #12]
 8005cca:	60b9      	str	r1, [r7, #8]
 8005ccc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f002 fa7b 	bl	80081d0 <USBD_LL_Transmit>

  return USBD_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f002 faa2 	bl	8008240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b082      	sub	sp, #8
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2204      	movs	r2, #4
 8005d12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005d16:	2300      	movs	r3, #0
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f002 fa57 	bl	80081d0 <USBD_LL_Transmit>

  return USBD_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2205      	movs	r2, #5
 8005d38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2100      	movs	r1, #0
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f002 fa7c 	bl	8008240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <CpuIrqDisable>:
** \brief     Disable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
 8005d52:	b480      	push	{r7}
 8005d54:	af00      	add	r7, sp, #0
  __asm volatile ("cpsid i");
 8005d56:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 8005d58:	bf00      	nop
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <CpuIrqEnable>:
** \brief     Enable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
 8005d62:	b480      	push	{r7}
 8005d64:	af00      	add	r7, sp, #0
  __asm volatile ("cpsie i");
 8005d66:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 8005d68:	bf00      	nop
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	af00      	add	r7, sp, #0
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 8005d76:	f7ff ffec 	bl	8005d52 <CpuIrqDisable>
} /*** end of CpuInit ***/
 8005d7a:	bf00      	nop
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 8005d86:	f000 fbcd 	bl	8006524 <NvmVerifyChecksum>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01e      	beq.n	8005dce <CpuStartUserProgram+0x4e>
    /* not a valid user program so it cannot be started */
    return;
  }
#if (BOOT_CPU_USER_PROGRAM_START_HOOK > 0)
  /* invoke callback */
  if (CpuUserProgramStartHook() == BLT_FALSE)
 8005d90:	f7fa fa70 	bl	8000274 <CpuUserProgramStartHook>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d01b      	beq.n	8005dd2 <CpuStartUserProgram+0x52>
    return;
  }
#endif
#if (BOOT_COM_ENABLE > 0)
  /* release the communication interface */
  ComFree();
 8005d9a:	f001 f811 	bl	8006dc0 <ComFree>
#endif
  /* reset the HAL */
  HAL_DeInit();
 8005d9e:	f7fa fe29 	bl	80009f4 <HAL_DeInit>
  /* reset the timer */
  TimerReset();
 8005da2:	f000 fbf3 	bl	800658c <TimerReset>
  /* remap user program's vector table */
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 8005da6:	f000 fbc4 	bl	8006532 <NvmGetUserProgBaseAddress>
 8005daa:	4603      	mov	r3, r0
 8005dac:	4a0b      	ldr	r2, [pc, #44]	; (8005ddc <CpuStartUserProgram+0x5c>)
 8005dae:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005db2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005db6:	6093      	str	r3, [r2, #8]
  /* set the address where the bootloader needs to jump to. this is the address of
   * the 2nd entry in the user program's vector table. this address points to the
   * user program's reset handler.
   */
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 8005db8:	f000 fbbb 	bl	8006532 <NvmGetUserProgBaseAddress>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	607b      	str	r3, [r7, #4]
  /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
   * explicitly disables these for security reasons. Enable them here again, so it does 
   * not have to be done by the user program.
   */
  CpuIrqEnable();
 8005dc4:	f7ff ffcd 	bl	8005d62 <CpuIrqEnable>
  /* start the user program by activating its reset interrupt service routine */
  pProgResetHandler();
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4798      	blx	r3
 8005dcc:	e002      	b.n	8005dd4 <CpuStartUserProgram+0x54>
    return;
 8005dce:	bf00      	nop
 8005dd0:	e000      	b.n	8005dd4 <CpuStartUserProgram+0x54>
    return;
 8005dd2:	bf00      	nop
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
#endif
} /*** end of CpuStartUserProgram ***/
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	e000ed00 	.word	0xe000ed00

08005de0 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	4613      	mov	r3, r2
 8005dec:	80fb      	strh	r3, [r7, #6]
  blt_int8u *from, *to;

  /* set casted pointers */
  from = (blt_int8u *)src;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	617b      	str	r3, [r7, #20]
  to = (blt_int8u *)dest;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	613b      	str	r3, [r7, #16]

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 8005df6:	e009      	b.n	8005e0c <CpuMemCopy+0x2c>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	1c53      	adds	r3, r2, #1
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1c59      	adds	r1, r3, #1
 8005e02:	6139      	str	r1, [r7, #16]
 8005e04:	7812      	ldrb	r2, [r2, #0]
 8005e06:	701a      	strb	r2, [r3, #0]
    /* keep the watchdog happy */
    CopService();
 8005e08:	f001 f864 	bl	8006ed4 <CopService>
  while (len-- > 0)
 8005e0c:	88fb      	ldrh	r3, [r7, #6]
 8005e0e:	1e5a      	subs	r2, r3, #1
 8005e10:	80fa      	strh	r2, [r7, #6]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f0      	bne.n	8005df8 <CpuMemCopy+0x18>
  }
} /*** end of CpuMemCopy ***/
 8005e16:	bf00      	nop
 8005e18:	bf00      	nop
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <FlashInit>:
** \brief     Initializes the flash driver.
** \return    none.
**
****************************************************************************************/
void FlashInit(void)
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0
  /* init the flash block info structs by setting the address to an invalid address */
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8005e24:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <FlashInit+0x20>)
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2a:	601a      	str	r2, [r3, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8005e2c:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <FlashInit+0x24>)
 8005e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e32:	601a      	str	r2, [r3, #0]
} /*** end of FlashInit ***/
 8005e34:	bf00      	nop
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	200006dc 	.word	0x200006dc
 8005e44:	200008e0 	.word	0x200008e0

08005e48 <FlashWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  blt_addr base_addr;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	1e5a      	subs	r2, r3, #1
 8005e58:	491c      	ldr	r1, [pc, #112]	; (8005ecc <FlashWrite+0x84>)
 8005e5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e5e:	4419      	add	r1, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	1acb      	subs	r3, r1, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d901      	bls.n	8005e6e <FlashWrite+0x26>
  {
    return BLT_FALSE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	e02a      	b.n	8005ec4 <FlashWrite+0x7c>
  }
  
  /* make sure the addresses are within the flash device */
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 faf0 	bl	8006454 <FlashGetSector>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2bff      	cmp	r3, #255	; 0xff
 8005e78:	d009      	beq.n	8005e8e <FlashWrite+0x46>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4413      	add	r3, r2
 8005e80:	3b01      	subs	r3, #1
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 fae6 	bl	8006454 <FlashGetSector>
 8005e88:	4603      	mov	r3, r0
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8005e8a:	2bff      	cmp	r3, #255	; 0xff
 8005e8c:	d101      	bne.n	8005e92 <FlashWrite+0x4a>
  {
    return BLT_FALSE;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e018      	b.n	8005ec4 <FlashWrite+0x7c>
  }

  /* if this is the bootblock, then let the boot block manager handle it */
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005e98:	f023 0301 	bic.w	r3, r3, #1
 8005e9c:	617b      	str	r3, [r7, #20]
  if (base_addr == flashLayout[0].sector_start)
 8005e9e:	4a0c      	ldr	r2, [pc, #48]	; (8005ed0 <FlashWrite+0x88>)
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d107      	bne.n	8005eb6 <FlashWrite+0x6e>
  {
    /* let the boot block manager handle it */
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	68f9      	ldr	r1, [r7, #12]
 8005eac:	4809      	ldr	r0, [pc, #36]	; (8005ed4 <FlashWrite+0x8c>)
 8005eae:	f000 f967 	bl	8006180 <FlashAddToBlock>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	e006      	b.n	8005ec4 <FlashWrite+0x7c>
  }
  /* let the block manager handle it */
  return FlashAddToBlock(&blockInfo, addr, data, len);
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	68f9      	ldr	r1, [r7, #12]
 8005ebc:	4806      	ldr	r0, [pc, #24]	; (8005ed8 <FlashWrite+0x90>)
 8005ebe:	f000 f95f 	bl	8006180 <FlashAddToBlock>
 8005ec2:	4603      	mov	r3, r0
} /*** end of FlashWrite ***/
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	08060000 	.word	0x08060000
 8005ed0:	0800c000 	.word	0x0800c000
 8005ed4:	200008e0 	.word	0x200008e0
 8005ed8:	200006dc 	.word	0x200006dc

08005edc <FlashErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashErase(blt_addr addr, blt_int32u len)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  blt_int8u first_sector;
  blt_int8u last_sector;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	1e5a      	subs	r2, r3, #1
 8005eea:	4916      	ldr	r1, [pc, #88]	; (8005f44 <FlashErase+0x68>)
 8005eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ef0:	4419      	add	r1, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	1acb      	subs	r3, r1, r3
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d901      	bls.n	8005f00 <FlashErase+0x24>
  {
    return BLT_FALSE;
 8005efc:	2300      	movs	r3, #0
 8005efe:	e01c      	b.n	8005f3a <FlashErase+0x5e>
  }
  
  /* obtain the first and last sector number */
  first_sector = FlashGetSector(addr);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 faa7 	bl	8006454 <FlashGetSector>
 8005f06:	4603      	mov	r3, r0
 8005f08:	73fb      	strb	r3, [r7, #15]
  last_sector  = FlashGetSector(addr+len-1);
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	4413      	add	r3, r2
 8005f10:	3b01      	subs	r3, #1
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fa9e 	bl	8006454 <FlashGetSector>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	73bb      	strb	r3, [r7, #14]
  /* check them */
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	2bff      	cmp	r3, #255	; 0xff
 8005f20:	d002      	beq.n	8005f28 <FlashErase+0x4c>
 8005f22:	7bbb      	ldrb	r3, [r7, #14]
 8005f24:	2bff      	cmp	r3, #255	; 0xff
 8005f26:	d101      	bne.n	8005f2c <FlashErase+0x50>
  {
    return BLT_FALSE;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e006      	b.n	8005f3a <FlashErase+0x5e>
  }
  /* erase the sectors */
  return FlashEraseSectors(first_sector, last_sector);
 8005f2c:	7bba      	ldrb	r2, [r7, #14]
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	4611      	mov	r1, r2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fa30 	bl	8006398 <FlashEraseSectors>
 8005f38:	4603      	mov	r3, r0
} /*** end of FlashErase ***/
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	08060000 	.word	0x08060000

08005f48 <FlashWriteChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWriteChecksum(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	607b      	str	r3, [r7, #4]

  /* first check that the bootblock contains valid data. if not, this means the
   * bootblock is not part of the reprogramming this time and therefore no
   * new checksum needs to be written
   */
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 8005f52:	4b1e      	ldr	r3, [pc, #120]	; (8005fcc <FlashWriteChecksum+0x84>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5a:	d101      	bne.n	8005f60 <FlashWriteChecksum+0x18>
  {
    return BLT_TRUE;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e031      	b.n	8005fc4 <FlashWriteChecksum+0x7c>
#endif

  /* compute the checksum. note that the user program's vectors are not yet written
   * to flash but are present in the bootblock data structure at this point.
   */
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 8005f60:	4b1b      	ldr	r3, [pc, #108]	; (8005fd0 <FlashWriteChecksum+0x88>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4413      	add	r3, r2
 8005f68:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 8005f6a:	4b1a      	ldr	r3, [pc, #104]	; (8005fd4 <FlashWriteChecksum+0x8c>)
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4413      	add	r3, r2
 8005f72:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 8005f74:	4b18      	ldr	r3, [pc, #96]	; (8005fd8 <FlashWriteChecksum+0x90>)
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 8005f7e:	4b17      	ldr	r3, [pc, #92]	; (8005fdc <FlashWriteChecksum+0x94>)
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4413      	add	r3, r2
 8005f86:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 8005f88:	4b15      	ldr	r3, [pc, #84]	; (8005fe0 <FlashWriteChecksum+0x98>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4413      	add	r3, r2
 8005f90:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 8005f92:	4b14      	ldr	r3, [pc, #80]	; (8005fe4 <FlashWriteChecksum+0x9c>)
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4413      	add	r3, r2
 8005f9a:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8005f9c:	4b12      	ldr	r3, [pc, #72]	; (8005fe8 <FlashWriteChecksum+0xa0>)
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	607b      	str	r3, [r7, #4]
  signature_checksum  = ~signature_checksum; /* one's complement */
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	607b      	str	r3, [r7, #4]
  signature_checksum += 1; /* two's complement */
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	607b      	str	r3, [r7, #4]

  /* write the checksum */
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 8005fb2:	4b0e      	ldr	r3, [pc, #56]	; (8005fec <FlashWriteChecksum+0xa4>)
 8005fb4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005fb8:	1d3a      	adds	r2, r7, #4
 8005fba:	2104      	movs	r1, #4
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff ff43 	bl	8005e48 <FlashWrite>
 8005fc2:	4603      	mov	r3, r0
                    sizeof(blt_addr), (blt_int8u *)&signature_checksum);
} /*** end of FlashWriteChecksum ***/
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	200008e0 	.word	0x200008e0
 8005fd0:	200008e4 	.word	0x200008e4
 8005fd4:	200008e8 	.word	0x200008e8
 8005fd8:	200008ec 	.word	0x200008ec
 8005fdc:	200008f0 	.word	0x200008f0
 8005fe0:	200008f4 	.word	0x200008f4
 8005fe4:	200008f8 	.word	0x200008f8
 8005fe8:	200008fc 	.word	0x200008fc
 8005fec:	0800c000 	.word	0x0800c000

08005ff0 <FlashVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashVerifyChecksum(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	607b      	str	r3, [r7, #4]

  /* verify the checksum based on how it was written by CpuWriteChecksum() */
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 8005ffa:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <FlashVerifyChecksum+0x84>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	4413      	add	r3, r2
 8006002:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 8006004:	4b1b      	ldr	r3, [pc, #108]	; (8006074 <FlashVerifyChecksum+0x84>)
 8006006:	3304      	adds	r3, #4
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	4413      	add	r3, r2
 800600e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 8006010:	4b18      	ldr	r3, [pc, #96]	; (8006074 <FlashVerifyChecksum+0x84>)
 8006012:	3308      	adds	r3, #8
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	4413      	add	r3, r2
 800601a:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 800601c:	4b15      	ldr	r3, [pc, #84]	; (8006074 <FlashVerifyChecksum+0x84>)
 800601e:	330c      	adds	r3, #12
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	4413      	add	r3, r2
 8006026:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 8006028:	4b12      	ldr	r3, [pc, #72]	; (8006074 <FlashVerifyChecksum+0x84>)
 800602a:	3310      	adds	r3, #16
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4413      	add	r3, r2
 8006032:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 8006034:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <FlashVerifyChecksum+0x84>)
 8006036:	3314      	adds	r3, #20
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	4413      	add	r3, r2
 800603e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 8006040:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <FlashVerifyChecksum+0x84>)
 8006042:	3318      	adds	r3, #24
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	4413      	add	r3, r2
 800604a:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 800604c:	4b09      	ldr	r3, [pc, #36]	; (8006074 <FlashVerifyChecksum+0x84>)
 800604e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	4413      	add	r3, r2
 8006058:	607b      	str	r3, [r7, #4]
  /* sum should add up to an unsigned 32-bit value of 0 */
  if (signature_checksum == 0)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <FlashVerifyChecksum+0x74>
  {
    /* checksum okay */
    return BLT_TRUE;
 8006060:	2301      	movs	r3, #1
 8006062:	e000      	b.n	8006066 <FlashVerifyChecksum+0x76>
  }
  /* checksum incorrect */
  return BLT_FALSE;
 8006064:	2300      	movs	r3, #0
} /*** end of FlashVerifyChecksum ***/
 8006066:	4618      	mov	r0, r3
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	0800c000 	.word	0x0800c000

08006078 <FlashDone>:
**            the currently active block that needs to be flashed.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashDone(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* check if there is still data waiting to be programmed in the boot block */
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 800607c:	4b0e      	ldr	r3, [pc, #56]	; (80060b8 <FlashDone+0x40>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d007      	beq.n	8006096 <FlashDone+0x1e>
  {
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 8006086:	480c      	ldr	r0, [pc, #48]	; (80060b8 <FlashDone+0x40>)
 8006088:	f000 f8dc 	bl	8006244 <FlashWriteBlock>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <FlashDone+0x1e>
    {
      return BLT_FALSE;
 8006092:	2300      	movs	r3, #0
 8006094:	e00d      	b.n	80060b2 <FlashDone+0x3a>
    }
  }

  /* check if there is still data waiting to be programmed */
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8006096:	4b09      	ldr	r3, [pc, #36]	; (80060bc <FlashDone+0x44>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609e:	d007      	beq.n	80060b0 <FlashDone+0x38>
  {
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 80060a0:	4806      	ldr	r0, [pc, #24]	; (80060bc <FlashDone+0x44>)
 80060a2:	f000 f8cf 	bl	8006244 <FlashWriteBlock>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <FlashDone+0x38>
    {
      return BLT_FALSE;
 80060ac:	2300      	movs	r3, #0
 80060ae:	e000      	b.n	80060b2 <FlashDone+0x3a>
    }
  }
  /* still here so all is okay */
  return BLT_TRUE;
 80060b0:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 80060b2:	4618      	mov	r0, r3
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	200008e0 	.word	0x200008e0
 80060bc:	200006dc 	.word	0x200006dc

080060c0 <FlashGetUserProgBaseAddress>:
**            This is basically the first address in the flashLayout table.
** \return    Base address.
**
****************************************************************************************/
blt_addr FlashGetUserProgBaseAddress(void)
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  return flashLayout[0].sector_start;
 80060c4:	4b02      	ldr	r3, [pc, #8]	; (80060d0 <FlashGetUserProgBaseAddress+0x10>)
} /*** end of FlashGetUserProgBaseAddress ***/
 80060c6:	4618      	mov	r0, r3
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	0800c000 	.word	0x0800c000

080060d4 <FlashInitBlock>:
** \param     address Base address of the block data.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashInitBlock(tFlashBlockInfo *block, blt_addr address)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  /* check address alignment */
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <FlashInitBlock+0x18>
  {
    return BLT_FALSE;
 80060e8:	2300      	movs	r3, #0
 80060ea:	e012      	b.n	8006112 <FlashInitBlock+0x3e>
  }
  /* make sure that we are initializing a new block and not the same one */
  if (block->base_addr == address)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d101      	bne.n	80060fa <FlashInitBlock+0x26>
  {
    /* block already initialized, so nothing to do */
    return BLT_TRUE;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e00b      	b.n	8006112 <FlashInitBlock+0x3e>
  }
  /* set the base address and copies the current data from flash */
  block->base_addr = address;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	601a      	str	r2, [r3, #0]
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3304      	adds	r3, #4
 8006104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f7ff fe68 	bl	8005de0 <CpuMemCopy>
  return BLT_TRUE;
 8006110:	2301      	movs	r3, #1
} /*** end of FlashInitBlock ***/
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <FlashSwitchBlock>:
** \return    The pointer of the block info struct that is no being used, or a NULL
**            pointer in case of error.
**
****************************************************************************************/
static tFlashBlockInfo *FlashSwitchBlock(tFlashBlockInfo *block, blt_addr base_addr)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  /* check if a switch needs to be made away from the boot block. in this case the boot
   * block shouldn't be written yet, because this is done at the end of the programming
   * session by FlashDone(), this is right after the checksum was written.
   */
  if (block == &bootBlockInfo)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a12      	ldr	r2, [pc, #72]	; (8006174 <FlashSwitchBlock+0x58>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d102      	bne.n	8006134 <FlashSwitchBlock+0x18>
  {
    /* switch from the boot block to the generic block info structure */
    block = &blockInfo;
 800612e:	4b12      	ldr	r3, [pc, #72]	; (8006178 <FlashSwitchBlock+0x5c>)
 8006130:	607b      	str	r3, [r7, #4]
 8006132:	e010      	b.n	8006156 <FlashSwitchBlock+0x3a>
  }
  /* check if a switch back into the bootblock is needed. in this case the generic block
   * doesn't need to be written here yet.
   */
  else if (base_addr == flashLayout[0].sector_start)
 8006134:	4a11      	ldr	r2, [pc, #68]	; (800617c <FlashSwitchBlock+0x60>)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	4293      	cmp	r3, r2
 800613a:	d104      	bne.n	8006146 <FlashSwitchBlock+0x2a>
  {
    /* switch from the generic block to the boot block info structure */
    block = &bootBlockInfo;
 800613c:	4b0d      	ldr	r3, [pc, #52]	; (8006174 <FlashSwitchBlock+0x58>)
 800613e:	607b      	str	r3, [r7, #4]
    base_addr = flashLayout[0].sector_start;
 8006140:	4b0e      	ldr	r3, [pc, #56]	; (800617c <FlashSwitchBlock+0x60>)
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	e007      	b.n	8006156 <FlashSwitchBlock+0x3a>
  }
  else
  {
    /* need to switch to a new block, so program the current one and init the next */
    if (FlashWriteBlock(block) == BLT_FALSE)
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f87c 	bl	8006244 <FlashWriteBlock>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <FlashSwitchBlock+0x3a>
    {
      return BLT_NULL;
 8006152:	2300      	movs	r3, #0
 8006154:	e009      	b.n	800616a <FlashSwitchBlock+0x4e>
    }
  }

  /* initialize tne new block when necessary */
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 8006156:	6839      	ldr	r1, [r7, #0]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff ffbb 	bl	80060d4 <FlashInitBlock>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <FlashSwitchBlock+0x4c>
  {
    return BLT_NULL;
 8006164:	2300      	movs	r3, #0
 8006166:	e000      	b.n	800616a <FlashSwitchBlock+0x4e>
  }

  /* still here to all is okay  */
  return block;
 8006168:	687b      	ldr	r3, [r7, #4]
} /*** end of FlashSwitchBlock ***/
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	200008e0 	.word	0x200008e0
 8006178:	200006dc 	.word	0x200006dc
 800617c:	0800c000 	.word	0x0800c000

08006180 <FlashAddToBlock>:
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashAddToBlock(tFlashBlockInfo *block, blt_addr address,
                                blt_int8u *data, blt_int32u len)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	603b      	str	r3, [r7, #0]
  blt_addr   current_base_addr;
  blt_int8u  *dst;
  blt_int8u  *src;

  /* determine the current base address */
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006194:	f023 0301 	bic.w	r3, r3, #1
 8006198:	617b      	str	r3, [r7, #20]

  /* make sure the blockInfo is not uninitialized */
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a2:	d108      	bne.n	80061b6 <FlashAddToBlock+0x36>
  {
    /* initialize the blockInfo struct for the current block */
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 80061a4:	6979      	ldr	r1, [r7, #20]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f7ff ff94 	bl	80060d4 <FlashInitBlock>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <FlashAddToBlock+0x36>
    {
      return BLT_FALSE;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e042      	b.n	800623c <FlashAddToBlock+0xbc>
    }
  }

  /* check if the new data fits in the current block */
  if (block->base_addr != current_base_addr)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d009      	beq.n	80061d4 <FlashAddToBlock+0x54>
  {
    /* need to switch to a new block, so program the current one and init the next */
    block = FlashSwitchBlock(block, current_base_addr);
 80061c0:	6979      	ldr	r1, [r7, #20]
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f7ff ffaa 	bl	800611c <FlashSwitchBlock>
 80061c8:	60f8      	str	r0, [r7, #12]
    if (block == BLT_NULL)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <FlashAddToBlock+0x54>
    {
      return BLT_FALSE;
 80061d0:	2300      	movs	r3, #0
 80061d2:	e033      	b.n	800623c <FlashAddToBlock+0xbc>
    }
  }

  /* add the data to the current block, but check for block overflow */
  dst = &(block->data[address - block->base_addr]);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	3304      	adds	r3, #4
 80061e2:	61fb      	str	r3, [r7, #28]
  src = data;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	61bb      	str	r3, [r7, #24]
  do
  {
    /* keep the watchdog happy */
    CopService();
 80061e8:	f000 fe74 	bl	8006ed4 <CopService>
    /* buffer overflow? */
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3304      	adds	r3, #4
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f8:	d30f      	bcc.n	800621a <FlashAddToBlock+0x9a>
    {
      /* need to switch to a new block, so program the current one and init the next */
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006200:	4619      	mov	r1, r3
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f7ff ff8a 	bl	800611c <FlashSwitchBlock>
 8006208:	60f8      	str	r0, [r7, #12]
      if (block == BLT_NULL)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <FlashAddToBlock+0x94>
      {
        return BLT_FALSE;
 8006210:	2300      	movs	r3, #0
 8006212:	e013      	b.n	800623c <FlashAddToBlock+0xbc>
      }
      /* reset destination pointer */
      dst = &(block->data[0]);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	3304      	adds	r3, #4
 8006218:	61fb      	str	r3, [r7, #28]
    }
    /* write the data to the buffer */
    *dst = *src;
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	781a      	ldrb	r2, [r3, #0]
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	701a      	strb	r2, [r3, #0]
    /* update pointers */
    dst++;
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	3301      	adds	r3, #1
 8006226:	61fb      	str	r3, [r7, #28]
    src++;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	3301      	adds	r3, #1
 800622c:	61bb      	str	r3, [r7, #24]
    /* decrement byte counter */
    len--;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	3b01      	subs	r3, #1
 8006232:	603b      	str	r3, [r7, #0]
  }
  while (len > 0);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1d6      	bne.n	80061e8 <FlashAddToBlock+0x68>
  /* still here so all is good */
  return BLT_TRUE;
 800623a:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 800623c:	4618      	mov	r0, r3
 800623e:	3720      	adds	r7, #32
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <FlashWriteBlock>:
** \param     block   Pointer to flash block info structure to operate on.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashWriteBlock(tFlashBlockInfo *block)
{
 8006244:	b5b0      	push	{r4, r5, r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  blt_addr   prog_addr;
  blt_int32u prog_data;
  blt_int32u word_cnt;
  blt_bool   result = BLT_TRUE;
 800624c:	2301      	movs	r3, #1
 800624e:	74fb      	strb	r3, [r7, #19]
    }
  }
#endif

  /* unlock the flash peripheral to enable the flash control register access. */
  HAL_FLASH_Unlock();
 8006250:	f7fa fda6 	bl	8000da0 <HAL_FLASH_Unlock>

  /* program all words in the block one by one */
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	e029      	b.n	80062ae <FlashWriteBlock+0x6a>
  {
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	4413      	add	r3, r2
 800626e:	3304      	adds	r3, #4
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60bb      	str	r3, [r7, #8]
    /* keep the watchdog happy */
    CopService();
 8006274:	f000 fe2e 	bl	8006ed4 <CopService>
    /* program the word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2200      	movs	r2, #0
 800627c:	461c      	mov	r4, r3
 800627e:	4615      	mov	r5, r2
 8006280:	4622      	mov	r2, r4
 8006282:	462b      	mov	r3, r5
 8006284:	68f9      	ldr	r1, [r7, #12]
 8006286:	2002      	movs	r0, #2
 8006288:	f7fa fd36 	bl	8000cf8 <HAL_FLASH_Program>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <FlashWriteBlock+0x54>
    {
      result = BLT_FALSE;
 8006292:	2300      	movs	r3, #0
 8006294:	74fb      	strb	r3, [r7, #19]
      break;
 8006296:	e00d      	b.n	80062b4 <FlashWriteBlock+0x70>
    }
    /* verify that the written data is actually there */
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d002      	beq.n	80062a8 <FlashWriteBlock+0x64>
    {
      result = BLT_FALSE;
 80062a2:	2300      	movs	r3, #0
 80062a4:	74fb      	strb	r3, [r7, #19]
      break;
 80062a6:	e005      	b.n	80062b4 <FlashWriteBlock+0x70>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	3301      	adds	r3, #1
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2b7f      	cmp	r3, #127	; 0x7f
 80062b2:	d9d2      	bls.n	800625a <FlashWriteBlock+0x16>
    }
  }

  /* lock the flash peripheral to disable the flash control register access. */
  HAL_FLASH_Lock();
 80062b4:	f7fa fd96 	bl	8000de4 <HAL_FLASH_Lock>

  /* Give the result back to the caller. */
  return result;
 80062b8:	7cfb      	ldrb	r3, [r7, #19]
} /*** end of FlashWriteBlock ***/
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080062c4 <FlashEmptyCheckSector>:
**            flashLayout array, not an index into the array.
** \return    BLT_TRUE if the flash sector is already erased, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashEmptyCheckSector(blt_int8u sector_num)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	71fb      	strb	r3, [r7, #7]
  blt_bool   result = BLT_FALSE;
 80062ce:	2300      	movs	r3, #0
 80062d0:	77fb      	strb	r3, [r7, #31]
  blt_int8u  sectorIdx;
  blt_int32u wordCnt;
  blt_int32u volatile const * wordPtr;
  
  /* find the index of this sector into the flashLayout array */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 80062d2:	2300      	movs	r3, #0
 80062d4:	77bb      	strb	r3, [r7, #30]
 80062d6:	e052      	b.n	800637e <FlashEmptyCheckSector+0xba>
  {
    /* is this the index that the sector number belongs to? */
    if (flashLayout[sectorIdx].sector_num == sector_num)
 80062d8:	7fba      	ldrb	r2, [r7, #30]
 80062da:	492d      	ldr	r1, [pc, #180]	; (8006390 <FlashEmptyCheckSector+0xcc>)
 80062dc:	4613      	mov	r3, r2
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	4413      	add	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	440b      	add	r3, r1
 80062e6:	3308      	adds	r3, #8
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	79fa      	ldrb	r2, [r7, #7]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d143      	bne.n	8006378 <FlashEmptyCheckSector+0xb4>
    {
      /* retrieve sector info */
      sectorAddr = flashLayout[sectorIdx].sector_start;
 80062f0:	7fba      	ldrb	r2, [r7, #30]
 80062f2:	4927      	ldr	r1, [pc, #156]	; (8006390 <FlashEmptyCheckSector+0xcc>)
 80062f4:	4613      	mov	r3, r2
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	4413      	add	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	440b      	add	r3, r1
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	613b      	str	r3, [r7, #16]
      sectorSize = flashLayout[sectorIdx].sector_size;
 8006302:	7fba      	ldrb	r2, [r7, #30]
 8006304:	4922      	ldr	r1, [pc, #136]	; (8006390 <FlashEmptyCheckSector+0xcc>)
 8006306:	4613      	mov	r3, r2
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	4413      	add	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	440b      	add	r3, r1
 8006310:	3304      	adds	r3, #4
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	60fb      	str	r3, [r7, #12]
      
      /* sanity check. sector base address should be 32-bit aligned and the size
       * should be a multiple of 32-bits.
       */
      ASSERT_RT(((sectorAddr % sizeof(blt_int32u)) == 0) && 
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d104      	bne.n	800632a <FlashEmptyCheckSector+0x66>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f003 0303 	and.w	r3, r3, #3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <FlashEmptyCheckSector+0x70>
 800632a:	f240 21c5 	movw	r1, #709	; 0x2c5
 800632e:	4819      	ldr	r0, [pc, #100]	; (8006394 <FlashEmptyCheckSector+0xd0>)
 8006330:	f000 fc96 	bl	8006c60 <AssertFailure>
                ((sectorSize % sizeof(blt_int32u)) == 0));  
      
      /* update result to success for now */
      result = BLT_TRUE;
 8006334:	2301      	movs	r3, #1
 8006336:	77fb      	strb	r3, [r7, #31]
      /* initialize the pointer to the first word in the sector */
      wordPtr = (blt_int32u volatile const *)sectorAddr;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	617b      	str	r3, [r7, #20]
      /* read sector 32-bits at a time */
      for (wordCnt = 0; wordCnt < (sectorSize/sizeof(blt_int32u)); wordCnt++)
 800633c:	2300      	movs	r3, #0
 800633e:	61bb      	str	r3, [r7, #24]
 8006340:	e014      	b.n	800636c <FlashEmptyCheckSector+0xa8>
      {
        /* service the watchdog every 256th loop iteration */
        if ((wordCnt % 256) == 0)
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <FlashEmptyCheckSector+0x8a>
        {
          CopService();
 800634a:	f000 fdc3 	bl	8006ed4 <CopService>
        }
        /* word not in the erased state? */
        if (*wordPtr != 0xFFFFFFFFu)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006356:	d003      	beq.n	8006360 <FlashEmptyCheckSector+0x9c>
        {
          /* sector not empty, update the result accordingly */
          result = BLT_FALSE;
 8006358:	2300      	movs	r3, #0
 800635a:	77fb      	strb	r3, [r7, #31]
          /* no point in continuing the sector empty check */
          break;
 800635c:	bf00      	nop
        }
        /* set pointer to the next word in the sector */
        wordPtr++;
      }
      /* sector index found and checked. no need to continue with another one.*/
      break;
 800635e:	e011      	b.n	8006384 <FlashEmptyCheckSector+0xc0>
        wordPtr++;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	3304      	adds	r3, #4
 8006364:	617b      	str	r3, [r7, #20]
      for (wordCnt = 0; wordCnt < (sectorSize/sizeof(blt_int32u)); wordCnt++)
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	3301      	adds	r3, #1
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	089b      	lsrs	r3, r3, #2
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	429a      	cmp	r2, r3
 8006374:	d3e5      	bcc.n	8006342 <FlashEmptyCheckSector+0x7e>
      break;
 8006376:	e005      	b.n	8006384 <FlashEmptyCheckSector+0xc0>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8006378:	7fbb      	ldrb	r3, [r7, #30]
 800637a:	3301      	adds	r3, #1
 800637c:	77bb      	strb	r3, [r7, #30]
 800637e:	7fbb      	ldrb	r3, [r7, #30]
 8006380:	2b04      	cmp	r3, #4
 8006382:	d9a9      	bls.n	80062d8 <FlashEmptyCheckSector+0x14>
    }
  }  
  /* give the result back to the caller. */
  return result;
 8006384:	7ffb      	ldrb	r3, [r7, #31]
} /*** end of FlashEmptyCheckSector ***/
 8006386:	4618      	mov	r0, r3
 8006388:	3720      	adds	r7, #32
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	080083e4 	.word	0x080083e4
 8006394:	08008338 	.word	0x08008338

08006398 <FlashEraseSectors>:
** \param     last_sector  Last flash sector number.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashEraseSectors(blt_int8u first_sector, blt_int8u last_sector)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08a      	sub	sp, #40	; 0x28
 800639c:	af00      	add	r7, sp, #0
 800639e:	4603      	mov	r3, r0
 80063a0:	460a      	mov	r2, r1
 80063a2:	71fb      	strb	r3, [r7, #7]
 80063a4:	4613      	mov	r3, r2
 80063a6:	71bb      	strb	r3, [r7, #6]
  blt_bool result = BLT_TRUE;
 80063a8:	2301      	movs	r3, #1
 80063aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  blt_int8u sectorIdx;
  FLASH_EraseInitTypeDef eraseInitStruct;
  blt_int32u eraseSectorError = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	60fb      	str	r3, [r7, #12]

  /* validate the sector numbers */
  if (first_sector > last_sector)
 80063b2:	79fa      	ldrb	r2, [r7, #7]
 80063b4:	79bb      	ldrb	r3, [r7, #6]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d902      	bls.n	80063c0 <FlashEraseSectors+0x28>
  {
    result = BLT_FALSE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if ((first_sector < flashLayout[0].sector_num) || \
 80063c0:	2203      	movs	r2, #3
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d303      	bcc.n	80063d0 <FlashEraseSectors+0x38>
      (last_sector > flashLayout[FLASH_TOTAL_SECTORS-1].sector_num))
 80063c8:	2207      	movs	r2, #7
  if ((first_sector < flashLayout[0].sector_num) || \
 80063ca:	79bb      	ldrb	r3, [r7, #6]
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d902      	bls.n	80063d6 <FlashEraseSectors+0x3e>
  {
    result = BLT_FALSE;
 80063d0:	2300      	movs	r3, #0
 80063d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* only move forward with the erase operation if all is okay so far */
  if (result == BLT_TRUE)
 80063d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d133      	bne.n	8006446 <FlashEraseSectors+0xae>
  {
    /* intialize the sector erase info structure */
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80063de:	2300      	movs	r3, #0
 80063e0:	613b      	str	r3, [r7, #16]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80063e2:	2302      	movs	r3, #2
 80063e4:	623b      	str	r3, [r7, #32]
    eraseInitStruct.NbSectors = 1;
 80063e6:	2301      	movs	r3, #1
 80063e8:	61fb      	str	r3, [r7, #28]

    /* unlock the flash array */
    HAL_FLASH_Unlock();
 80063ea:	f7fa fcd9 	bl	8000da0 <HAL_FLASH_Unlock>

    /* erase all sectors one by one */
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 80063ee:	79fb      	ldrb	r3, [r7, #7]
 80063f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80063f4:	e020      	b.n	8006438 <FlashEraseSectors+0xa0>
    {
      /* no need to erase the sector if it is already empty */
      if (FlashEmptyCheckSector(sectorIdx) == BLT_FALSE)
 80063f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff ff62 	bl	80062c4 <FlashEmptyCheckSector>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d113      	bne.n	800642e <FlashEraseSectors+0x96>
      {
        /* keep the watchdog happy */
        CopService();
 8006406:	f000 fd65 	bl	8006ed4 <CopService>
        /* set the sector to erase */
        eraseInitStruct.Sector = sectorIdx;
 800640a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800640e:	61bb      	str	r3, [r7, #24]
        /* submit the sector erase request */
        if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 8006410:	f107 020c 	add.w	r2, r7, #12
 8006414:	f107 0310 	add.w	r3, r7, #16
 8006418:	4611      	mov	r1, r2
 800641a:	4618      	mov	r0, r3
 800641c:	f7fa fe22 	bl	8001064 <HAL_FLASHEx_Erase>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <FlashEraseSectors+0x96>
        {
          /* could not perform erase operation */
          result = BLT_FALSE;
 8006426:	2300      	movs	r3, #0
 8006428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          /* error detected so don't bother continuing with the loop */
          break;
 800642c:	e009      	b.n	8006442 <FlashEraseSectors+0xaa>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 800642e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006432:	3301      	adds	r3, #1
 8006434:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006438:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800643c:	79bb      	ldrb	r3, [r7, #6]
 800643e:	429a      	cmp	r2, r3
 8006440:	d9d9      	bls.n	80063f6 <FlashEraseSectors+0x5e>
        }
      }
    }

    /* lock the flash array again */
    HAL_FLASH_Lock();
 8006442:	f7fa fccf 	bl	8000de4 <HAL_FLASH_Lock>
  }

  /* give the result back to the caller */
  return result;
 8006446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
} /*** end of FlashEraseSectors ***/
 800644a:	4618      	mov	r0, r3
 800644c:	3728      	adds	r7, #40	; 0x28
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  blt_int8u result = FLASH_INVALID_SECTOR;
 800645c:	23ff      	movs	r3, #255	; 0xff
 800645e:	73fb      	strb	r3, [r7, #15]
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8006460:	2300      	movs	r3, #0
 8006462:	73bb      	strb	r3, [r7, #14]
 8006464:	e02f      	b.n	80064c6 <FlashGetSector+0x72>
  {
    /* keep the watchdog happy */
    CopService();
 8006466:	f000 fd35 	bl	8006ed4 <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 800646a:	7bba      	ldrb	r2, [r7, #14]
 800646c:	491a      	ldr	r1, [pc, #104]	; (80064d8 <FlashGetSector+0x84>)
 800646e:	4613      	mov	r3, r2
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	440b      	add	r3, r1
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	429a      	cmp	r2, r3
 800647e:	d31f      	bcc.n	80064c0 <FlashGetSector+0x6c>
        (address < (flashLayout[sectorIdx].sector_start + \
 8006480:	7bba      	ldrb	r2, [r7, #14]
 8006482:	4915      	ldr	r1, [pc, #84]	; (80064d8 <FlashGetSector+0x84>)
 8006484:	4613      	mov	r3, r2
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	6819      	ldr	r1, [r3, #0]
                    flashLayout[sectorIdx].sector_size)))
 8006490:	7bba      	ldrb	r2, [r7, #14]
 8006492:	4811      	ldr	r0, [pc, #68]	; (80064d8 <FlashGetSector+0x84>)
 8006494:	4613      	mov	r3, r2
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4403      	add	r3, r0
 800649e:	3304      	adds	r3, #4
 80064a0:	681b      	ldr	r3, [r3, #0]
        (address < (flashLayout[sectorIdx].sector_start + \
 80064a2:	440b      	add	r3, r1
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d20a      	bcs.n	80064c0 <FlashGetSector+0x6c>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 80064aa:	7bba      	ldrb	r2, [r7, #14]
 80064ac:	490a      	ldr	r1, [pc, #40]	; (80064d8 <FlashGetSector+0x84>)
 80064ae:	4613      	mov	r3, r2
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	4413      	add	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	440b      	add	r3, r1
 80064b8:	3308      	adds	r3, #8
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	73fb      	strb	r3, [r7, #15]
      /* all done so no need to continue looping */
      break;
 80064be:	e005      	b.n	80064cc <FlashGetSector+0x78>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 80064c0:	7bbb      	ldrb	r3, [r7, #14]
 80064c2:	3301      	adds	r3, #1
 80064c4:	73bb      	strb	r3, [r7, #14]
 80064c6:	7bbb      	ldrb	r3, [r7, #14]
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	d9cc      	bls.n	8006466 <FlashGetSector+0x12>
    }
  }
  /* give the result back to the caller */
  return result;
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of FlashGetSector ***/
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	080083e4 	.word	0x080083e4

080064dc <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	af00      	add	r7, sp, #0
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 80064e0:	f7ff fc9e 	bl	8005e20 <FlashInit>
} /*** end of NvmInit ***/
 80064e4:	bf00      	nop
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	68b9      	ldr	r1, [r7, #8]
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f7ff fca5 	bl	8005e48 <FlashWrite>
 80064fe:	4603      	mov	r3, r0
} /*** end of NvmWrite ***/
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff fce1 	bl	8005edc <FlashErase>
 800651a:	4603      	mov	r3, r0
} /*** end of NvmErase ***/
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 8006528:	f7ff fd62 	bl	8005ff0 <FlashVerifyChecksum>
 800652c:	4603      	mov	r3, r0
#endif
} /*** end of NvmVerifyChecksum ***/
 800652e:	4618      	mov	r0, r3
 8006530:	bd80      	pop	{r7, pc}

08006532 <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	af00      	add	r7, sp, #0
  return FlashGetUserProgBaseAddress();
 8006536:	f7ff fdc3 	bl	80060c0 <FlashGetUserProgBaseAddress>
 800653a:	4603      	mov	r3, r0
} /*** end of NvmGetUserProgBaseAddress ***/
 800653c:	4618      	mov	r0, r3
 800653e:	bd80      	pop	{r7, pc}

08006540 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 8006544:	f7ff fd00 	bl	8005f48 <FlashWriteChecksum>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <NvmDone+0x12>
  {
    return BLT_FALSE;
 800654e:	2300      	movs	r3, #0
 8006550:	e002      	b.n	8006558 <NvmDone+0x18>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
 8006552:	f7ff fd91 	bl	8006078 <FlashDone>
 8006556:	4603      	mov	r3, r0
} /*** end of NvmDone ***/
 8006558:	4618      	mov	r0, r3
 800655a:	bd80      	pop	{r7, pc}

0800655c <TimerInit>:
** \brief     Initializes the polling based millisecond timer driver.
** \return    none.
**
****************************************************************************************/
void TimerInit(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
  /* Reset the timer configuration. */
  TimerReset();
 8006560:	f000 f814 	bl	800658c <TimerReset>

  /* Configure the systick frequency as a 1 ms event generator. */
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 8006564:	4b06      	ldr	r3, [pc, #24]	; (8006580 <TimerInit+0x24>)
 8006566:	4a07      	ldr	r2, [pc, #28]	; (8006584 <TimerInit+0x28>)
 8006568:	605a      	str	r2, [r3, #4]
  /* Reset the current counter value. */
  SysTick->VAL = 0;
 800656a:	4b05      	ldr	r3, [pc, #20]	; (8006580 <TimerInit+0x24>)
 800656c:	2200      	movs	r2, #0
 800656e:	609a      	str	r2, [r3, #8]
  /* Select core clock as source and enable the timer. */
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8006570:	4b03      	ldr	r3, [pc, #12]	; (8006580 <TimerInit+0x24>)
 8006572:	2205      	movs	r2, #5
 8006574:	601a      	str	r2, [r3, #0]
  /* Reset the millisecond counter value. */
  millisecond_counter = 0;
 8006576:	4b04      	ldr	r3, [pc, #16]	; (8006588 <TimerInit+0x2c>)
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 800657c:	bf00      	nop
 800657e:	bd80      	pop	{r7, pc}
 8006580:	e000e010 	.word	0xe000e010
 8006584:	0002903f 	.word	0x0002903f
 8006588:	20000ae4 	.word	0x20000ae4

0800658c <TimerReset>:
**            configuration.
** \return    none.
**
****************************************************************************************/
void TimerReset(void)
{
 800658c:	b480      	push	{r7}
 800658e:	af00      	add	r7, sp, #0
  /* Set the systick's registers back into the default reset value. */
  SysTick->CTRL = 0;
 8006590:	4b06      	ldr	r3, [pc, #24]	; (80065ac <TimerReset+0x20>)
 8006592:	2200      	movs	r2, #0
 8006594:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8006596:	4b05      	ldr	r3, [pc, #20]	; (80065ac <TimerReset+0x20>)
 8006598:	2200      	movs	r2, #0
 800659a:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 800659c:	4b03      	ldr	r3, [pc, #12]	; (80065ac <TimerReset+0x20>)
 800659e:	2200      	movs	r2, #0
 80065a0:	609a      	str	r2, [r3, #8]
} /* end of TimerReset */
 80065a2:	bf00      	nop
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	e000e010 	.word	0xe000e010

080065b0 <TimerUpdate>:
** \brief     Updates the millisecond timer.
** \return    none.
**
****************************************************************************************/
void TimerUpdate(void)
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 80065b4:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <TimerUpdate+0x24>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d004      	beq.n	80065ca <TimerUpdate+0x1a>
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 80065c0:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <TimerUpdate+0x28>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3301      	adds	r3, #1
 80065c6:	4a04      	ldr	r2, [pc, #16]	; (80065d8 <TimerUpdate+0x28>)
 80065c8:	6013      	str	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 80065ca:	bf00      	nop
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	e000e010 	.word	0xe000e010
 80065d8:	20000ae4 	.word	0x20000ae4

080065dc <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	af00      	add	r7, sp, #0
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 80065e0:	f7ff ffe6 	bl	80065b0 <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
 80065e4:	4b01      	ldr	r3, [pc, #4]	; (80065ec <TimerGet+0x10>)
 80065e6:	681b      	ldr	r3, [r3, #0]
} /*** end of TimerGet ***/
 80065e8:	4618      	mov	r0, r3
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	20000ae4 	.word	0x20000ae4

080065f0 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 80065f4:	f7ff fff2 	bl	80065dc <TimerGet>
 80065f8:	4603      	mov	r3, r0
} /*** end of HAL_GetTick ***/
 80065fa:	4618      	mov	r0, r3
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <UsbInit>:
** \brief     Initializes the USB communication interface.
** \return    none.
**
****************************************************************************************/
void UsbInit(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
  /* initialize the FIFO manager */
  UsbFifoMgrInit();
 8006604:	f000 f9a8 	bl	8006958 <UsbFifoMgrInit>
  /* place 2 buffers under FIFO management */
  fifoPipeBulkIN.handle  = UsbFifoMgrCreate(fifoPipeBulkIN.data,  FIFO_PIPE_SIZE);
 8006608:	2140      	movs	r1, #64	; 0x40
 800660a:	481e      	ldr	r0, [pc, #120]	; (8006684 <UsbInit+0x84>)
 800660c:	f000 f9d6 	bl	80069bc <UsbFifoMgrCreate>
 8006610:	4603      	mov	r3, r0
 8006612:	461a      	mov	r2, r3
 8006614:	4b1c      	ldr	r3, [pc, #112]	; (8006688 <UsbInit+0x88>)
 8006616:	701a      	strb	r2, [r3, #0]
  fifoPipeBulkOUT.handle = UsbFifoMgrCreate(fifoPipeBulkOUT.data, FIFO_PIPE_SIZE);
 8006618:	2140      	movs	r1, #64	; 0x40
 800661a:	481c      	ldr	r0, [pc, #112]	; (800668c <UsbInit+0x8c>)
 800661c:	f000 f9ce 	bl	80069bc <UsbFifoMgrCreate>
 8006620:	4603      	mov	r3, r0
 8006622:	461a      	mov	r2, r3
 8006624:	4b1a      	ldr	r3, [pc, #104]	; (8006690 <UsbInit+0x90>)
 8006626:	701a      	strb	r2, [r3, #0]
  /* validate fifo handles */
  ASSERT_RT((fifoPipeBulkIN.handle  != FIFO_ERR_INVALID_HANDLE) && \
 8006628:	4b17      	ldr	r3, [pc, #92]	; (8006688 <UsbInit+0x88>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2bff      	cmp	r3, #255	; 0xff
 800662e:	d003      	beq.n	8006638 <UsbInit+0x38>
 8006630:	4b17      	ldr	r3, [pc, #92]	; (8006690 <UsbInit+0x90>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2bff      	cmp	r3, #255	; 0xff
 8006636:	d103      	bne.n	8006640 <UsbInit+0x40>
 8006638:	2184      	movs	r1, #132	; 0x84
 800663a:	4816      	ldr	r0, [pc, #88]	; (8006694 <UsbInit+0x94>)
 800663c:	f000 fb10 	bl	8006c60 <AssertFailure>
            (fifoPipeBulkOUT.handle != FIFO_ERR_INVALID_HANDLE));
  /* initialize the USB device libary */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8006640:	2200      	movs	r2, #0
 8006642:	4915      	ldr	r1, [pc, #84]	; (8006698 <UsbInit+0x98>)
 8006644:	4815      	ldr	r0, [pc, #84]	; (800669c <UsbInit+0x9c>)
 8006646:	f7fe fa2f 	bl	8004aa8 <USBD_Init>
  /* register the bootloader's custom USB Bulk based class */
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_Bulk);
 800664a:	4915      	ldr	r1, [pc, #84]	; (80066a0 <UsbInit+0xa0>)
 800664c:	4813      	ldr	r0, [pc, #76]	; (800669c <UsbInit+0x9c>)
 800664e:	f7fe fa95 	bl	8004b7c <USBD_RegisterClass>
  /* inform application about the connect event */
  UsbConnectHook(BLT_TRUE);
 8006652:	2001      	movs	r0, #1
 8006654:	f7f9 fe20 	bl	8000298 <UsbConnectHook>
  /* start the USB device */
  USBD_Start(&hUsbDeviceFS);
 8006658:	4810      	ldr	r0, [pc, #64]	; (800669c <UsbInit+0x9c>)
 800665a:	f7fe fab0 	bl	8004bbe <USBD_Start>
  /* perform low level connect of the device */
  HAL_PCD_DevConnect((PCD_HandleTypeDef *)hUsbDeviceFS.pData);
 800665e:	4b0f      	ldr	r3, [pc, #60]	; (800669c <UsbInit+0x9c>)
 8006660:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006664:	4618      	mov	r0, r3
 8006666:	f7fb ff02 	bl	800246e <HAL_PCD_DevConnect>
  /* extend the time that the backdoor is open in case the default timed backdoor
   * mechanism is used.
   */
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
  if (BackDoorGetExtension() < BOOT_COM_USB_BACKDOOR_EXTENSION_MS)
 800666a:	f000 fb45 	bl	8006cf8 <BackDoorGetExtension>
 800666e:	4603      	mov	r3, r0
 8006670:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006674:	d203      	bcs.n	800667e <UsbInit+0x7e>
  {
    BackDoorSetExtension(BOOT_COM_USB_BACKDOOR_EXTENSION_MS);
 8006676:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800667a:	f000 fb2d 	bl	8006cd8 <BackDoorSetExtension>
  }
#endif /* BOOT_BACKDOOR_HOOKS_ENABLE == 0 */
} /*** end of UsbInit ***/
 800667e:	bf00      	nop
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20000b1d 	.word	0x20000b1d
 8006688:	20000b1c 	.word	0x20000b1c
 800668c:	20000b61 	.word	0x20000b61
 8006690:	20000b60 	.word	0x20000b60
 8006694:	0800835c 	.word	0x0800835c
 8006698:	20000110 	.word	0x20000110
 800669c:	20000ba4 	.word	0x20000ba4
 80066a0:	20000018 	.word	0x20000018

080066a4 <UsbFree>:
** \brief     Releases the USB communication interface.
** \return    none.
**
****************************************************************************************/
void UsbFree(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
  /* perform low level disconnect of the device */
  HAL_PCD_DevDisconnect((PCD_HandleTypeDef *)hUsbDeviceFS.pData);
 80066a8:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <UsbFree+0x20>)
 80066aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fb ff0b 	bl	80024ca <HAL_PCD_DevDisconnect>
  /* uninitialize the device */
  USBD_DeInit(&hUsbDeviceFS);
 80066b4:	4803      	ldr	r0, [pc, #12]	; (80066c4 <UsbFree+0x20>)
 80066b6:	f7fe fa2d 	bl	8004b14 <USBD_DeInit>
  /* inform application about the disconnect event */
  UsbConnectHook(BLT_FALSE);
 80066ba:	2000      	movs	r0, #0
 80066bc:	f7f9 fdec 	bl	8000298 <UsbConnectHook>
} /*** end of UsbFree ***/
 80066c0:	bf00      	nop
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20000ba4 	.word	0x20000ba4

080066c8 <UsbTransmitPacket>:
** \param     len  Number of bytes that are to be transmitted.
** \return    none.
**
****************************************************************************************/
void UsbTransmitPacket(blt_int8u *data, blt_int8u len)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	70fb      	strb	r3, [r7, #3]
  blt_int16u data_index;
  blt_bool result;

  /* verify validity of the len-paramenter */
  ASSERT_RT(len <= BOOT_COM_USB_TX_MAX_DATA);
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	2b3f      	cmp	r3, #63	; 0x3f
 80066d8:	d903      	bls.n	80066e2 <UsbTransmitPacket+0x1a>
 80066da:	21b9      	movs	r1, #185	; 0xb9
 80066dc:	4818      	ldr	r0, [pc, #96]	; (8006740 <UsbTransmitPacket+0x78>)
 80066de:	f000 fabf 	bl	8006c60 <AssertFailure>

  /* first transmit the length of the packet */
  result = UsbTransmitByte(len);
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 f89d 	bl	8006824 <UsbTransmitByte>
 80066ea:	4603      	mov	r3, r0
 80066ec:	737b      	strb	r3, [r7, #13]
  ASSERT_RT(result == BLT_TRUE);
 80066ee:	7b7b      	ldrb	r3, [r7, #13]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d003      	beq.n	80066fc <UsbTransmitPacket+0x34>
 80066f4:	21bd      	movs	r1, #189	; 0xbd
 80066f6:	4812      	ldr	r0, [pc, #72]	; (8006740 <UsbTransmitPacket+0x78>)
 80066f8:	f000 fab2 	bl	8006c60 <AssertFailure>

  /* transmit all the packet bytes one-by-one */
  for (data_index = 0; data_index < len; data_index++)
 80066fc:	2300      	movs	r3, #0
 80066fe:	81fb      	strh	r3, [r7, #14]
 8006700:	e014      	b.n	800672c <UsbTransmitPacket+0x64>
  {
    /* keep the watchdog happy */
    CopService();
 8006702:	f000 fbe7 	bl	8006ed4 <CopService>
    /* write byte */
    result = UsbTransmitByte(data[data_index]);
 8006706:	89fb      	ldrh	r3, [r7, #14]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	4413      	add	r3, r2
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 f888 	bl	8006824 <UsbTransmitByte>
 8006714:	4603      	mov	r3, r0
 8006716:	737b      	strb	r3, [r7, #13]
    ASSERT_RT(result == BLT_TRUE);
 8006718:	7b7b      	ldrb	r3, [r7, #13]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d003      	beq.n	8006726 <UsbTransmitPacket+0x5e>
 800671e:	21c6      	movs	r1, #198	; 0xc6
 8006720:	4807      	ldr	r0, [pc, #28]	; (8006740 <UsbTransmitPacket+0x78>)
 8006722:	f000 fa9d 	bl	8006c60 <AssertFailure>
  for (data_index = 0; data_index < len; data_index++)
 8006726:	89fb      	ldrh	r3, [r7, #14]
 8006728:	3301      	adds	r3, #1
 800672a:	81fb      	strh	r3, [r7, #14]
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	b29b      	uxth	r3, r3
 8006730:	89fa      	ldrh	r2, [r7, #14]
 8006732:	429a      	cmp	r2, r3
 8006734:	d3e5      	bcc.n	8006702 <UsbTransmitPacket+0x3a>
  }
} /*** end of UsbTransmitPacket ***/
 8006736:	bf00      	nop
 8006738:	bf00      	nop
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	0800835c 	.word	0x0800835c

08006744 <UsbReceivePacket>:
** \param     len Pointer where the length of the packet is to be stored.
** \return    BLT_TRUE if a packet was received, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool UsbReceivePacket(blt_int8u *data, blt_int8u *len)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  static blt_int8u xcpCtoReqPacket[BOOT_COM_USB_RX_MAX_DATA+1];  /* one extra for length */
  static blt_int8u xcpCtoRxLength;
  static blt_bool  xcpCtoRxInProgress = BLT_FALSE;

  /* poll USB interrupt flags to process USB related events */
  HAL_PCD_IRQHandler((PCD_HandleTypeDef *)hUsbDeviceFS.pData);
 800674e:	4b26      	ldr	r3, [pc, #152]	; (80067e8 <UsbReceivePacket+0xa4>)
 8006750:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006754:	4618      	mov	r0, r3
 8006756:	f7fb f9eb 	bl	8001b30 <HAL_PCD_IRQHandler>

  /* start of cto packet received? */
  if (xcpCtoRxInProgress == BLT_FALSE)
 800675a:	4b24      	ldr	r3, [pc, #144]	; (80067ec <UsbReceivePacket+0xa8>)
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d114      	bne.n	800678c <UsbReceivePacket+0x48>
  {
    /* store the message length when received */
    if (UsbReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 8006762:	4823      	ldr	r0, [pc, #140]	; (80067f0 <UsbReceivePacket+0xac>)
 8006764:	f000 f84a 	bl	80067fc <UsbReceiveByte>
 8006768:	4603      	mov	r3, r0
 800676a:	2b01      	cmp	r3, #1
 800676c:	d136      	bne.n	80067dc <UsbReceivePacket+0x98>
    {
      if ( (xcpCtoReqPacket[0] > 0) &&
 800676e:	4b20      	ldr	r3, [pc, #128]	; (80067f0 <UsbReceivePacket+0xac>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d032      	beq.n	80067dc <UsbReceivePacket+0x98>
           (xcpCtoReqPacket[0] <= BOOT_COM_USB_RX_MAX_DATA) )
 8006776:	4b1e      	ldr	r3, [pc, #120]	; (80067f0 <UsbReceivePacket+0xac>)
 8006778:	781b      	ldrb	r3, [r3, #0]
      if ( (xcpCtoReqPacket[0] > 0) &&
 800677a:	2b3f      	cmp	r3, #63	; 0x3f
 800677c:	d82e      	bhi.n	80067dc <UsbReceivePacket+0x98>
      {
        /* indicate that a cto packet is being received */
        xcpCtoRxInProgress = BLT_TRUE;
 800677e:	4b1b      	ldr	r3, [pc, #108]	; (80067ec <UsbReceivePacket+0xa8>)
 8006780:	2201      	movs	r2, #1
 8006782:	701a      	strb	r2, [r3, #0]
        /* reset packet data count */
        xcpCtoRxLength = 0;
 8006784:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <UsbReceivePacket+0xb0>)
 8006786:	2200      	movs	r2, #0
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	e027      	b.n	80067dc <UsbReceivePacket+0x98>
    }
  }
  else
  {
    /* store the next packet byte */
    if (UsbReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 800678c:	4b19      	ldr	r3, [pc, #100]	; (80067f4 <UsbReceivePacket+0xb0>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	3301      	adds	r3, #1
 8006792:	4a17      	ldr	r2, [pc, #92]	; (80067f0 <UsbReceivePacket+0xac>)
 8006794:	4413      	add	r3, r2
 8006796:	4618      	mov	r0, r3
 8006798:	f000 f830 	bl	80067fc <UsbReceiveByte>
 800679c:	4603      	mov	r3, r0
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d11c      	bne.n	80067dc <UsbReceivePacket+0x98>
    {
      /* increment the packet data count */
      xcpCtoRxLength++;
 80067a2:	4b14      	ldr	r3, [pc, #80]	; (80067f4 <UsbReceivePacket+0xb0>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	3301      	adds	r3, #1
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	4b12      	ldr	r3, [pc, #72]	; (80067f4 <UsbReceivePacket+0xb0>)
 80067ac:	701a      	strb	r2, [r3, #0]

      /* check to see if the entire packet was received */
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 80067ae:	4b10      	ldr	r3, [pc, #64]	; (80067f0 <UsbReceivePacket+0xac>)
 80067b0:	781a      	ldrb	r2, [r3, #0]
 80067b2:	4b10      	ldr	r3, [pc, #64]	; (80067f4 <UsbReceivePacket+0xb0>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d110      	bne.n	80067dc <UsbReceivePacket+0x98>
      {
        /* copy the packet data */
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	490e      	ldr	r1, [pc, #56]	; (80067f8 <UsbReceivePacket+0xb4>)
 80067be:	4a0d      	ldr	r2, [pc, #52]	; (80067f4 <UsbReceivePacket+0xb0>)
 80067c0:	7812      	ldrb	r2, [r2, #0]
 80067c2:	b292      	uxth	r2, r2
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff fb0b 	bl	8005de0 <CpuMemCopy>
        /* done with cto packet reception */
        xcpCtoRxInProgress = BLT_FALSE;
 80067ca:	4b08      	ldr	r3, [pc, #32]	; (80067ec <UsbReceivePacket+0xa8>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	701a      	strb	r2, [r3, #0]
        /* set the packet length */
        *len = xcpCtoRxLength;
 80067d0:	4b08      	ldr	r3, [pc, #32]	; (80067f4 <UsbReceivePacket+0xb0>)
 80067d2:	781a      	ldrb	r2, [r3, #0]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	701a      	strb	r2, [r3, #0]
        /* packet reception complete */
        return BLT_TRUE;
 80067d8:	2301      	movs	r3, #1
 80067da:	e000      	b.n	80067de <UsbReceivePacket+0x9a>
      }
    }
  }
  /* packet reception not yet complete */
  return BLT_FALSE;
 80067dc:	2300      	movs	r3, #0
} /*** end of UsbReceivePacket ***/
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000ba4 	.word	0x20000ba4
 80067ec:	20000e74 	.word	0x20000e74
 80067f0:	20000e78 	.word	0x20000e78
 80067f4:	20000eb8 	.word	0x20000eb8
 80067f8:	20000e79 	.word	0x20000e79

080067fc <UsbReceiveByte>:
** \param     data Pointer to byte where the data is to be stored.
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool UsbReceiveByte(blt_int8u *data)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  blt_bool result;

  /* obtain data from the fifo */
  result = UsbFifoMgrRead(fifoPipeBulkOUT.handle, data);
 8006804:	4b06      	ldr	r3, [pc, #24]	; (8006820 <UsbReceiveByte+0x24>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	6879      	ldr	r1, [r7, #4]
 800680a:	4618      	mov	r0, r3
 800680c:	f000 f98e 	bl	8006b2c <UsbFifoMgrRead>
 8006810:	4603      	mov	r3, r0
 8006812:	73fb      	strb	r3, [r7, #15]
  return result;
 8006814:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of UsbReceiveByte ***/
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20000b60 	.word	0x20000b60

08006824 <UsbTransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    BLT_TRUE if the byte was transmitted, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool UsbTransmitByte(blt_int8u data)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	4603      	mov	r3, r0
 800682c:	71fb      	strb	r3, [r7, #7]
  blt_bool result;

  /* write data from to fifo */
  result = UsbFifoMgrWrite(fifoPipeBulkIN.handle, data);
 800682e:	4b07      	ldr	r3, [pc, #28]	; (800684c <UsbTransmitByte+0x28>)
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	79fa      	ldrb	r2, [r7, #7]
 8006834:	4611      	mov	r1, r2
 8006836:	4618      	mov	r0, r3
 8006838:	f000 f8f2 	bl	8006a20 <UsbFifoMgrWrite>
 800683c:	4603      	mov	r3, r0
 800683e:	73fb      	strb	r3, [r7, #15]
  return result;
 8006840:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of UsbTransmitByte ***/
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20000b1c 	.word	0x20000b1c

08006850 <UsbTransmitPipeBulkIN>:
**            for transmission with the USB endpoint.
** \return    none.
**
****************************************************************************************/
void UsbTransmitPipeBulkIN(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
  blt_int8u byte_counter;
  blt_int8u byte_value;
  blt_bool  result;

  /* read how many bytes should be transmitted */
  nr_of_bytes_for_tx_endpoint = UsbFifoMgrScan(fifoPipeBulkIN.handle);
 8006856:	4b1c      	ldr	r3, [pc, #112]	; (80068c8 <UsbTransmitPipeBulkIN+0x78>)
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f000 f9e2 	bl	8006c24 <UsbFifoMgrScan>
 8006860:	4603      	mov	r3, r0
 8006862:	71fb      	strb	r3, [r7, #7]
  /* only continue if there is actually data left to transmit */
  if (nr_of_bytes_for_tx_endpoint == 0)
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d02a      	beq.n	80068c0 <UsbTransmitPipeBulkIN+0x70>
  {
    return;
  }
  /* make sure to not transmit more than the USB endpoint can handle */
  if (nr_of_bytes_for_tx_endpoint > BULK_DATA_MAX_PACKET_SIZE)
 800686a:	79fb      	ldrb	r3, [r7, #7]
 800686c:	2b40      	cmp	r3, #64	; 0x40
 800686e:	d901      	bls.n	8006874 <UsbTransmitPipeBulkIN+0x24>
  {
    nr_of_bytes_for_tx_endpoint = BULK_DATA_MAX_PACKET_SIZE;
 8006870:	2340      	movs	r3, #64	; 0x40
 8006872:	71fb      	strb	r3, [r7, #7]
  }
  /* copy the transmit data to the transmit buffer */
  for (byte_counter=0; byte_counter < nr_of_bytes_for_tx_endpoint; byte_counter++)
 8006874:	2300      	movs	r3, #0
 8006876:	71bb      	strb	r3, [r7, #6]
 8006878:	e017      	b.n	80068aa <UsbTransmitPipeBulkIN+0x5a>
  {
    /* obtain data from the fifo */
    result = UsbFifoMgrRead(fifoPipeBulkIN.handle, &byte_value);
 800687a:	4b13      	ldr	r3, [pc, #76]	; (80068c8 <UsbTransmitPipeBulkIN+0x78>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	1d3a      	adds	r2, r7, #4
 8006880:	4611      	mov	r1, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f000 f952 	bl	8006b2c <UsbFifoMgrRead>
 8006888:	4603      	mov	r3, r0
 800688a:	717b      	strb	r3, [r7, #5]
    ASSERT_RT(result == BLT_TRUE);
 800688c:	797b      	ldrb	r3, [r7, #5]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d004      	beq.n	800689c <UsbTransmitPipeBulkIN+0x4c>
 8006892:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006896:	480d      	ldr	r0, [pc, #52]	; (80068cc <UsbTransmitPipeBulkIN+0x7c>)
 8006898:	f000 f9e2 	bl	8006c60 <AssertFailure>
    /* store it in the endpoint's RAM */
    USB_Tx_Buffer[byte_counter] = byte_value;
 800689c:	79bb      	ldrb	r3, [r7, #6]
 800689e:	7939      	ldrb	r1, [r7, #4]
 80068a0:	4a0b      	ldr	r2, [pc, #44]	; (80068d0 <UsbTransmitPipeBulkIN+0x80>)
 80068a2:	54d1      	strb	r1, [r2, r3]
  for (byte_counter=0; byte_counter < nr_of_bytes_for_tx_endpoint; byte_counter++)
 80068a4:	79bb      	ldrb	r3, [r7, #6]
 80068a6:	3301      	adds	r3, #1
 80068a8:	71bb      	strb	r3, [r7, #6]
 80068aa:	79ba      	ldrb	r2, [r7, #6]
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d3e3      	bcc.n	800687a <UsbTransmitPipeBulkIN+0x2a>
  }
  /* copy data to endpoint's RAM and start the transmission */
  USBD_LL_Transmit(&hUsbDeviceFS, BULK_IN_EP, &USB_Tx_Buffer[0],
 80068b2:	79fb      	ldrb	r3, [r7, #7]
 80068b4:	4a06      	ldr	r2, [pc, #24]	; (80068d0 <UsbTransmitPipeBulkIN+0x80>)
 80068b6:	2181      	movs	r1, #129	; 0x81
 80068b8:	4806      	ldr	r0, [pc, #24]	; (80068d4 <UsbTransmitPipeBulkIN+0x84>)
 80068ba:	f001 fc89 	bl	80081d0 <USBD_LL_Transmit>
 80068be:	e000      	b.n	80068c2 <UsbTransmitPipeBulkIN+0x72>
    return;
 80068c0:	bf00      	nop
                   nr_of_bytes_for_tx_endpoint);
} /*** end of UsbTransmitPipeBulkIN ***/
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20000b1c 	.word	0x20000b1c
 80068cc:	0800835c 	.word	0x0800835c
 80068d0:	20000ebc 	.word	0x20000ebc
 80068d4:	20000ba4 	.word	0x20000ba4

080068d8 <UsbReceivePipeBulkOUT>:
** \brief     Stores data that was received on the Bulk OUT pipe in the fifo.
** \return    none.
**
****************************************************************************************/
void UsbReceivePipeBulkOUT(blt_int8u epnum)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	4603      	mov	r3, r0
 80068e0:	71fb      	strb	r3, [r7, #7]
  blt_int16u USB_Rx_Cnt=0;
 80068e2:	2300      	movs	r3, #0
 80068e4:	82bb      	strh	r3, [r7, #20]
  blt_int8u *usbRxBufferPtr;
  blt_int16u byte_counter;
  blt_bool result;

  /* Get the received data buffer and the number of received bytes */
  usbRxBufferPtr = USBD_Bulk_GetRxBufferPtr();
 80068e6:	f001 f823 	bl	8007930 <USBD_Bulk_GetRxBufferPtr>
 80068ea:	6138      	str	r0, [r7, #16]
  USB_Rx_Cnt = USBD_LL_GetRxDataSize(&hUsbDeviceFS, epnum);
 80068ec:	79fb      	ldrb	r3, [r7, #7]
 80068ee:	4619      	mov	r1, r3
 80068f0:	4816      	ldr	r0, [pc, #88]	; (800694c <UsbReceivePipeBulkOUT+0x74>)
 80068f2:	f001 fcdd 	bl	80082b0 <USBD_LL_GetRxDataSize>
 80068f6:	4603      	mov	r3, r0
 80068f8:	82bb      	strh	r3, [r7, #20]

  /* USB data will be immediately processed, this allow next USB traffic being
   * NAKed till the end of the USART Xfer
   */
  for (byte_counter=0; byte_counter<USB_Rx_Cnt; byte_counter++)
 80068fa:	2300      	movs	r3, #0
 80068fc:	82fb      	strh	r3, [r7, #22]
 80068fe:	e015      	b.n	800692c <UsbReceivePipeBulkOUT+0x54>
  {
    /* add the data to the fifo */
    result = UsbFifoMgrWrite(fifoPipeBulkOUT.handle, usbRxBufferPtr[byte_counter]);
 8006900:	4b13      	ldr	r3, [pc, #76]	; (8006950 <UsbReceivePipeBulkOUT+0x78>)
 8006902:	7818      	ldrb	r0, [r3, #0]
 8006904:	8afb      	ldrh	r3, [r7, #22]
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4413      	add	r3, r2
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	4619      	mov	r1, r3
 800690e:	f000 f887 	bl	8006a20 <UsbFifoMgrWrite>
 8006912:	4603      	mov	r3, r0
 8006914:	73fb      	strb	r3, [r7, #15]
    /* verify that the fifo wasn't full */
    ASSERT_RT(result == BLT_TRUE);
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d004      	beq.n	8006926 <UsbReceivePipeBulkOUT+0x4e>
 800691c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8006920:	480c      	ldr	r0, [pc, #48]	; (8006954 <UsbReceivePipeBulkOUT+0x7c>)
 8006922:	f000 f99d 	bl	8006c60 <AssertFailure>
  for (byte_counter=0; byte_counter<USB_Rx_Cnt; byte_counter++)
 8006926:	8afb      	ldrh	r3, [r7, #22]
 8006928:	3301      	adds	r3, #1
 800692a:	82fb      	strh	r3, [r7, #22]
 800692c:	8afa      	ldrh	r2, [r7, #22]
 800692e:	8abb      	ldrh	r3, [r7, #20]
 8006930:	429a      	cmp	r2, r3
 8006932:	d3e5      	bcc.n	8006900 <UsbReceivePipeBulkOUT+0x28>
  }
  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(&hUsbDeviceFS,
 8006934:	f000 fffc 	bl	8007930 <USBD_Bulk_GetRxBufferPtr>
 8006938:	4602      	mov	r2, r0
 800693a:	2340      	movs	r3, #64	; 0x40
 800693c:	2101      	movs	r1, #1
 800693e:	4803      	ldr	r0, [pc, #12]	; (800694c <UsbReceivePipeBulkOUT+0x74>)
 8006940:	f001 fc7e 	bl	8008240 <USBD_LL_PrepareReceive>
                         BULK_OUT_EP,
                         USBD_Bulk_GetRxBufferPtr(),
                         BULK_DATA_FS_OUT_PACKET_SIZE);
} /*** end of UsbReceivePipeBulkOUT ***/
 8006944:	bf00      	nop
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	20000ba4 	.word	0x20000ba4
 8006950:	20000b60 	.word	0x20000b60
 8006954:	0800835c 	.word	0x0800835c

08006958 <UsbFifoMgrInit>:
**            before any of the other fifo management functions are called.
** \return    none.
**
****************************************************************************************/
static void UsbFifoMgrInit(void)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
  blt_int8u i;
  tFifoCtrl *pbc1, *pbc2;

  pbc1 = &fifoCtrl[0];
 800695e:	4b14      	ldr	r3, [pc, #80]	; (80069b0 <UsbFifoMgrInit+0x58>)
 8006960:	60bb      	str	r3, [r7, #8]
  pbc2 = &fifoCtrl[1];
 8006962:	4b14      	ldr	r3, [pc, #80]	; (80069b4 <UsbFifoMgrInit+0x5c>)
 8006964:	607b      	str	r3, [r7, #4]
  /* assign fifo handles and pointer to next free fifo */
  for (i = 0; i < (FIFO_MAX_BUFFERS - 1); i++)
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]
 800696a:	e00e      	b.n	800698a <UsbFifoMgrInit+0x32>
  {
    pbc1->handle = i;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	7bfa      	ldrb	r2, [r7, #15]
 8006970:	749a      	strb	r2, [r3, #18]
    pbc1->fifoctrlptr = pbc2;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	615a      	str	r2, [r3, #20]
    pbc1++;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	3318      	adds	r3, #24
 800697c:	60bb      	str	r3, [r7, #8]
    pbc2++;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3318      	adds	r3, #24
 8006982:	607b      	str	r3, [r7, #4]
  for (i = 0; i < (FIFO_MAX_BUFFERS - 1); i++)
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	3301      	adds	r3, #1
 8006988:	73fb      	strb	r3, [r7, #15]
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d0ed      	beq.n	800696c <UsbFifoMgrInit+0x14>
  }
  /* initialize handle for the last one and use null-pointer for the next free fifo  */
  pbc1->handle = i;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	7bfa      	ldrb	r2, [r7, #15]
 8006994:	749a      	strb	r2, [r3, #18]
  pbc1->fifoctrlptr = (tFifoCtrl *)0;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2200      	movs	r2, #0
 800699a:	615a      	str	r2, [r3, #20]
  fifoCtrlFree = &fifoCtrl[0];
 800699c:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <UsbFifoMgrInit+0x60>)
 800699e:	4a04      	ldr	r2, [pc, #16]	; (80069b0 <UsbFifoMgrInit+0x58>)
 80069a0:	601a      	str	r2, [r3, #0]
} /*** end of UsbFifoMgrInit ***/
 80069a2:	bf00      	nop
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	20000ae8 	.word	0x20000ae8
 80069b4:	20000b00 	.word	0x20000b00
 80069b8:	20000b18 	.word	0x20000b18

080069bc <UsbFifoMgrCreate>:
** \param     length Maximum number of data elements that can be stored in the fifo.
** \return    Fifo handle if successfull, or FIFO_ERR_INVALID_HANDLE.
**
****************************************************************************************/
static blt_int8u UsbFifoMgrCreate(blt_int8u *buffer, blt_int8u length)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70fb      	strb	r3, [r7, #3]
  tFifoCtrl *pbc;

  /* first determine if these is still a free fifo control available */
  if (fifoCtrlFree == (tFifoCtrl *)0)
 80069c8:	4b14      	ldr	r3, [pc, #80]	; (8006a1c <UsbFifoMgrCreate+0x60>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <UsbFifoMgrCreate+0x18>
  {
    return FIFO_ERR_INVALID_HANDLE;
 80069d0:	23ff      	movs	r3, #255	; 0xff
 80069d2:	e01d      	b.n	8006a10 <UsbFifoMgrCreate+0x54>
  }
  /* store pointer to free fifo and update pointer to next free one */
  pbc = fifoCtrlFree;
 80069d4:	4b11      	ldr	r3, [pc, #68]	; (8006a1c <UsbFifoMgrCreate+0x60>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	60fb      	str	r3, [r7, #12]
  fifoCtrlFree = pbc->fifoctrlptr;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	4a0f      	ldr	r2, [pc, #60]	; (8006a1c <UsbFifoMgrCreate+0x60>)
 80069e0:	6013      	str	r3, [r2, #0]

  /* initialize the buffer control */
  pbc->length = length;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	78fa      	ldrb	r2, [r7, #3]
 80069e6:	741a      	strb	r2, [r3, #16]
  pbc->readptr = buffer;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	609a      	str	r2, [r3, #8]
  pbc->writeptr = buffer;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	60da      	str	r2, [r3, #12]
  pbc->entries = 0;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	745a      	strb	r2, [r3, #17]
  pbc->startptr = buffer;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	601a      	str	r2, [r3, #0]
  pbc->endptr = (blt_int8u *)(buffer + length - 1);
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	441a      	add	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	605a      	str	r2, [r3, #4]

  /* return the handle to the successfully created fifo control */
  return pbc->handle;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	7c9b      	ldrb	r3, [r3, #18]
} /*** end of UsbFifoMgrCreate ***/
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	20000b18 	.word	0x20000b18

08006a20 <UsbFifoMgrWrite>:
** \return    BLT_TRUE if the data was successfully stored in the fifo, BLT_FALSE
**            otherwise.
**
****************************************************************************************/
static blt_bool UsbFifoMgrWrite(blt_int8u handle, blt_int8u data)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	460a      	mov	r2, r1
 8006a2a:	71fb      	strb	r3, [r7, #7]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	71bb      	strb	r3, [r7, #6]
  /* check the validity of the handle parameter */
  ASSERT_RT(handle < FIFO_MAX_BUFFERS);
 8006a30:	79fb      	ldrb	r3, [r7, #7]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d904      	bls.n	8006a40 <UsbFifoMgrWrite+0x20>
 8006a36:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8006a3a:	483a      	ldr	r0, [pc, #232]	; (8006b24 <UsbFifoMgrWrite+0x104>)
 8006a3c:	f000 f910 	bl	8006c60 <AssertFailure>
  /* check if fifo is full */
  if (fifoCtrl[handle].entries == fifoCtrl[handle].length)
 8006a40:	79fa      	ldrb	r2, [r7, #7]
 8006a42:	4939      	ldr	r1, [pc, #228]	; (8006b28 <UsbFifoMgrWrite+0x108>)
 8006a44:	4613      	mov	r3, r2
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	4413      	add	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	440b      	add	r3, r1
 8006a4e:	3311      	adds	r3, #17
 8006a50:	7819      	ldrb	r1, [r3, #0]
 8006a52:	79fa      	ldrb	r2, [r7, #7]
 8006a54:	4834      	ldr	r0, [pc, #208]	; (8006b28 <UsbFifoMgrWrite+0x108>)
 8006a56:	4613      	mov	r3, r2
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	4413      	add	r3, r2
 8006a5c:	00db      	lsls	r3, r3, #3
 8006a5e:	4403      	add	r3, r0
 8006a60:	3310      	adds	r3, #16
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	4299      	cmp	r1, r3
 8006a66:	d101      	bne.n	8006a6c <UsbFifoMgrWrite+0x4c>
  {
    return BLT_FALSE;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	e056      	b.n	8006b1a <UsbFifoMgrWrite+0xfa>
  }
  /* copy data to fifo */
  *fifoCtrl[handle].writeptr = data;
 8006a6c:	79fa      	ldrb	r2, [r7, #7]
 8006a6e:	492e      	ldr	r1, [pc, #184]	; (8006b28 <UsbFifoMgrWrite+0x108>)
 8006a70:	4613      	mov	r3, r2
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	4413      	add	r3, r2
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	440b      	add	r3, r1
 8006a7a:	330c      	adds	r3, #12
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	79ba      	ldrb	r2, [r7, #6]
 8006a80:	701a      	strb	r2, [r3, #0]
  /* data written so update number of entries */
  fifoCtrl[handle].entries++;
 8006a82:	79fa      	ldrb	r2, [r7, #7]
 8006a84:	4928      	ldr	r1, [pc, #160]	; (8006b28 <UsbFifoMgrWrite+0x108>)
 8006a86:	4613      	mov	r3, r2
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	4413      	add	r3, r2
 8006a8c:	00db      	lsls	r3, r3, #3
 8006a8e:	440b      	add	r3, r1
 8006a90:	3311      	adds	r3, #17
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	3301      	adds	r3, #1
 8006a96:	b2d8      	uxtb	r0, r3
 8006a98:	4923      	ldr	r1, [pc, #140]	; (8006b28 <UsbFifoMgrWrite+0x108>)
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	4413      	add	r3, r2
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	440b      	add	r3, r1
 8006aa4:	3311      	adds	r3, #17
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	701a      	strb	r2, [r3, #0]
  /* update write pointer */
  fifoCtrl[handle].writeptr++;
 8006aaa:	79fa      	ldrb	r2, [r7, #7]
 8006aac:	491e      	ldr	r1, [pc, #120]	; (8006b28 <UsbFifoMgrWrite+0x108>)
 8006aae:	4613      	mov	r3, r2
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	4413      	add	r3, r2
 8006ab4:	00db      	lsls	r3, r3, #3
 8006ab6:	440b      	add	r3, r1
 8006ab8:	330c      	adds	r3, #12
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	1c59      	adds	r1, r3, #1
 8006abe:	481a      	ldr	r0, [pc, #104]	; (8006b28 <UsbFifoMgrWrite+0x108>)
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	4413      	add	r3, r2
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	4403      	add	r3, r0
 8006aca:	330c      	adds	r3, #12
 8006acc:	6019      	str	r1, [r3, #0]
  /* check end of fifo */
  if (fifoCtrl[handle].writeptr > fifoCtrl[handle].endptr)
 8006ace:	79fa      	ldrb	r2, [r7, #7]
 8006ad0:	4915      	ldr	r1, [pc, #84]	; (8006b28 <UsbFifoMgrWrite+0x108>)
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	4413      	add	r3, r2
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	440b      	add	r3, r1
 8006adc:	330c      	adds	r3, #12
 8006ade:	6819      	ldr	r1, [r3, #0]
 8006ae0:	79fa      	ldrb	r2, [r7, #7]
 8006ae2:	4811      	ldr	r0, [pc, #68]	; (8006b28 <UsbFifoMgrWrite+0x108>)
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	4413      	add	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	4403      	add	r3, r0
 8006aee:	3304      	adds	r3, #4
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4299      	cmp	r1, r3
 8006af4:	d910      	bls.n	8006b18 <UsbFifoMgrWrite+0xf8>
  {
    /* set write pointer to start of the cyclic fifo */
    fifoCtrl[handle].writeptr = fifoCtrl[handle].startptr;
 8006af6:	79f9      	ldrb	r1, [r7, #7]
 8006af8:	79fa      	ldrb	r2, [r7, #7]
 8006afa:	480b      	ldr	r0, [pc, #44]	; (8006b28 <UsbFifoMgrWrite+0x108>)
 8006afc:	460b      	mov	r3, r1
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	440b      	add	r3, r1
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	4403      	add	r3, r0
 8006b06:	6819      	ldr	r1, [r3, #0]
 8006b08:	4807      	ldr	r0, [pc, #28]	; (8006b28 <UsbFifoMgrWrite+0x108>)
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	4413      	add	r3, r2
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	4403      	add	r3, r0
 8006b14:	330c      	adds	r3, #12
 8006b16:	6019      	str	r1, [r3, #0]
  }
  /* still here so all is okay */
  return BLT_TRUE;
 8006b18:	2301      	movs	r3, #1
} /*** end of UsbFifoMgrWrite ***/
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	0800835c 	.word	0x0800835c
 8006b28:	20000ae8 	.word	0x20000ae8

08006b2c <UsbFifoMgrRead>:
** \return    BLT_TRUE if the data was successfully read from the fifo, BLT_FALSE
**            otherwise.
**
****************************************************************************************/
static blt_bool UsbFifoMgrRead(blt_int8u handle, blt_int8u *data)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	6039      	str	r1, [r7, #0]
 8006b36:	71fb      	strb	r3, [r7, #7]
  /* check the validity of the handle parameter */
  ASSERT_RT(handle < FIFO_MAX_BUFFERS);
 8006b38:	79fb      	ldrb	r3, [r7, #7]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d904      	bls.n	8006b48 <UsbFifoMgrRead+0x1c>
 8006b3e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8006b42:	4836      	ldr	r0, [pc, #216]	; (8006c1c <UsbFifoMgrRead+0xf0>)
 8006b44:	f000 f88c 	bl	8006c60 <AssertFailure>
  /* check if fifo is empty */
  if (fifoCtrl[handle].entries == 0)
 8006b48:	79fa      	ldrb	r2, [r7, #7]
 8006b4a:	4935      	ldr	r1, [pc, #212]	; (8006c20 <UsbFifoMgrRead+0xf4>)
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	4413      	add	r3, r2
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	440b      	add	r3, r1
 8006b56:	3311      	adds	r3, #17
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <UsbFifoMgrRead+0x36>
  {
    return BLT_FALSE;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	e057      	b.n	8006c12 <UsbFifoMgrRead+0xe6>
  }
  /* read the data */
  *data = *fifoCtrl[handle].readptr;
 8006b62:	79fa      	ldrb	r2, [r7, #7]
 8006b64:	492e      	ldr	r1, [pc, #184]	; (8006c20 <UsbFifoMgrRead+0xf4>)
 8006b66:	4613      	mov	r3, r2
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	4413      	add	r3, r2
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	440b      	add	r3, r1
 8006b70:	3308      	adds	r3, #8
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	781a      	ldrb	r2, [r3, #0]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	701a      	strb	r2, [r3, #0]
  /* data read so update number of entries */
  fifoCtrl[handle].entries--;
 8006b7a:	79fa      	ldrb	r2, [r7, #7]
 8006b7c:	4928      	ldr	r1, [pc, #160]	; (8006c20 <UsbFifoMgrRead+0xf4>)
 8006b7e:	4613      	mov	r3, r2
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	4413      	add	r3, r2
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	440b      	add	r3, r1
 8006b88:	3311      	adds	r3, #17
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b2d8      	uxtb	r0, r3
 8006b90:	4923      	ldr	r1, [pc, #140]	; (8006c20 <UsbFifoMgrRead+0xf4>)
 8006b92:	4613      	mov	r3, r2
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	4413      	add	r3, r2
 8006b98:	00db      	lsls	r3, r3, #3
 8006b9a:	440b      	add	r3, r1
 8006b9c:	3311      	adds	r3, #17
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	701a      	strb	r2, [r3, #0]
  /* update read pointer */
  fifoCtrl[handle].readptr++;
 8006ba2:	79fa      	ldrb	r2, [r7, #7]
 8006ba4:	491e      	ldr	r1, [pc, #120]	; (8006c20 <UsbFifoMgrRead+0xf4>)
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	4413      	add	r3, r2
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	440b      	add	r3, r1
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	1c59      	adds	r1, r3, #1
 8006bb6:	481a      	ldr	r0, [pc, #104]	; (8006c20 <UsbFifoMgrRead+0xf4>)
 8006bb8:	4613      	mov	r3, r2
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	4413      	add	r3, r2
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	4403      	add	r3, r0
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	6019      	str	r1, [r3, #0]
  /* check end of fifo */
  if (fifoCtrl[handle].readptr > fifoCtrl[handle].endptr)
 8006bc6:	79fa      	ldrb	r2, [r7, #7]
 8006bc8:	4915      	ldr	r1, [pc, #84]	; (8006c20 <UsbFifoMgrRead+0xf4>)
 8006bca:	4613      	mov	r3, r2
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	4413      	add	r3, r2
 8006bd0:	00db      	lsls	r3, r3, #3
 8006bd2:	440b      	add	r3, r1
 8006bd4:	3308      	adds	r3, #8
 8006bd6:	6819      	ldr	r1, [r3, #0]
 8006bd8:	79fa      	ldrb	r2, [r7, #7]
 8006bda:	4811      	ldr	r0, [pc, #68]	; (8006c20 <UsbFifoMgrRead+0xf4>)
 8006bdc:	4613      	mov	r3, r2
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	4413      	add	r3, r2
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	4403      	add	r3, r0
 8006be6:	3304      	adds	r3, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4299      	cmp	r1, r3
 8006bec:	d910      	bls.n	8006c10 <UsbFifoMgrRead+0xe4>
  {
    /* set read pointer to start of the cyclic fifo */
    fifoCtrl[handle].readptr = fifoCtrl[handle].startptr;
 8006bee:	79f9      	ldrb	r1, [r7, #7]
 8006bf0:	79fa      	ldrb	r2, [r7, #7]
 8006bf2:	480b      	ldr	r0, [pc, #44]	; (8006c20 <UsbFifoMgrRead+0xf4>)
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	440b      	add	r3, r1
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	4403      	add	r3, r0
 8006bfe:	6819      	ldr	r1, [r3, #0]
 8006c00:	4807      	ldr	r0, [pc, #28]	; (8006c20 <UsbFifoMgrRead+0xf4>)
 8006c02:	4613      	mov	r3, r2
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	4413      	add	r3, r2
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	4403      	add	r3, r0
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	6019      	str	r1, [r3, #0]
  }
  /* still here so all is good */
  return BLT_TRUE;
 8006c10:	2301      	movs	r3, #1
} /*** end of UsbFifoMgrRead ***/
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	0800835c 	.word	0x0800835c
 8006c20:	20000ae8 	.word	0x20000ae8

08006c24 <UsbFifoMgrScan>:
** \param     handle Identifies the fifo that is to be scanned.
** \return    Number of data entries in the fifo if successful, otherwise 0.
**
****************************************************************************************/
static blt_int8u UsbFifoMgrScan(blt_int8u handle)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	71fb      	strb	r3, [r7, #7]
  /* check the validity of the handle parameter */
  ASSERT_RT(handle < FIFO_MAX_BUFFERS);
 8006c2e:	79fb      	ldrb	r3, [r7, #7]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d904      	bls.n	8006c3e <UsbFifoMgrScan+0x1a>
 8006c34:	f240 2102 	movw	r1, #514	; 0x202
 8006c38:	4807      	ldr	r0, [pc, #28]	; (8006c58 <UsbFifoMgrScan+0x34>)
 8006c3a:	f000 f811 	bl	8006c60 <AssertFailure>
  /* read and return the number of data entries */
  return fifoCtrl[handle].entries;
 8006c3e:	79fa      	ldrb	r2, [r7, #7]
 8006c40:	4906      	ldr	r1, [pc, #24]	; (8006c5c <UsbFifoMgrScan+0x38>)
 8006c42:	4613      	mov	r3, r2
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	4413      	add	r3, r2
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	440b      	add	r3, r1
 8006c4c:	3311      	adds	r3, #17
 8006c4e:	781b      	ldrb	r3, [r3, #0]
} /*** end of UsbFifoMgrScan ***/
 8006c50:	4618      	mov	r0, r3
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	0800835c 	.word	0x0800835c
 8006c5c:	20000ae8 	.word	0x20000ae8

08006c60 <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 8006c6a:	f000 f933 	bl	8006ed4 <CopService>
 8006c6e:	e7fc      	b.n	8006c6a <AssertFailure+0xa>

08006c70 <BackDoorInit>:
** \brief     Initializes the backdoor entry option.
** \return    none
**
****************************************************************************************/
void BackDoorInit(void)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
    FileHandleFirmwareUpdateRequest();
  }
#endif
#else
  /* open the backdoor after a reset */
  backdoorOpen = BLT_TRUE;
 8006c74:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <BackDoorInit+0x18>)
 8006c76:	2201      	movs	r2, #1
 8006c78:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 8006c7a:	f000 f849 	bl	8006d10 <BackDoorRestartTimer>
#endif
  /* perform the first check that open/closes the backdoor */
  BackDoorCheck();
 8006c7e:	f000 f805 	bl	8006c8c <BackDoorCheck>
} /*** end of BackDoorInit ***/
 8006c82:	bf00      	nop
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000efc 	.word	0x20000efc

08006c8c <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 8006c90:	f000 f908 	bl	8006ea4 <ComIsConnected>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d015      	beq.n	8006cc6 <BackDoorCheck+0x3a>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 8006c9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <BackDoorCheck+0x40>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d112      	bne.n	8006cc8 <BackDoorCheck+0x3c>
  {
    /* check if the backdoor entry time window elapsed */
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 8006ca2:	f7ff fc9b 	bl	80065dc <TimerGet>
 8006ca6:	4601      	mov	r1, r0
 8006ca8:	4b09      	ldr	r3, [pc, #36]	; (8006cd0 <BackDoorCheck+0x44>)
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <BackDoorCheck+0x48>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006cb6:	4299      	cmp	r1, r3
 8006cb8:	d306      	bcc.n	8006cc8 <BackDoorCheck+0x3c>
    {
      /* close the backdoor */
      backdoorOpen = BLT_FALSE;
 8006cba:	4b04      	ldr	r3, [pc, #16]	; (8006ccc <BackDoorCheck+0x40>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	701a      	strb	r2, [r3, #0]
#endif
      {
        /* no firmware update requests detected, so attempt to start the user program.
         * this function does not return if a valid user program is present.
         */
        CpuStartUserProgram();
 8006cc0:	f7ff f85e 	bl	8005d80 <CpuStartUserProgram>
 8006cc4:	e000      	b.n	8006cc8 <BackDoorCheck+0x3c>
    return;
 8006cc6:	bf00      	nop
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000efc 	.word	0x20000efc
 8006cd0:	20000f04 	.word	0x20000f04
 8006cd4:	20000f00 	.word	0x20000f00

08006cd8 <BackDoorSetExtension>:
** \param     extension_ms Extension time in milliseconds.
** \return    none
**
****************************************************************************************/
void BackDoorSetExtension(blt_int32u extension_ms)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* update the extension time */
  backdoorExtensionTime = extension_ms;
 8006ce0:	4a04      	ldr	r2, [pc, #16]	; (8006cf4 <BackDoorSetExtension+0x1c>)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6013      	str	r3, [r2, #0]
} /*** end of BackDoorSetExtension ***/
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	20000f04 	.word	0x20000f04

08006cf8 <BackDoorGetExtension>:
**            (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS) is extended.
** \return    Extension time in milliseconds.
**
****************************************************************************************/
blt_int32u BackDoorGetExtension(void)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
  /* read out and reutrn the currently configured extension time */
  return backdoorExtensionTime;
 8006cfc:	4b03      	ldr	r3, [pc, #12]	; (8006d0c <BackDoorGetExtension+0x14>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
} /*** end of BackDoorGetExtension ***/
 8006d00:	4618      	mov	r0, r3
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	20000f04 	.word	0x20000f04

08006d10 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <BackDoorRestartTimer+0x1c>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d104      	bne.n	8006d26 <BackDoorRestartTimer+0x16>
  {
    backdoorOpenTime = TimerGet();
 8006d1c:	f7ff fc5e 	bl	80065dc <TimerGet>
 8006d20:	4603      	mov	r3, r0
 8006d22:	4a03      	ldr	r2, [pc, #12]	; (8006d30 <BackDoorRestartTimer+0x20>)
 8006d24:	6013      	str	r3, [r2, #0]
  }
} /*** end of BackDoorRestartTimer ***/
 8006d26:	bf00      	nop
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000efc 	.word	0x20000efc
 8006d30:	20000f00 	.word	0x20000f00

08006d34 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
  /* initialize the CPU */
  CpuInit();
 8006d38:	f7ff f81b 	bl	8005d72 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 8006d3c:	f000 f8c3 	bl	8006ec6 <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 8006d40:	f7ff fc0c 	bl	800655c <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 8006d44:	f7ff fbca 	bl	80064dc <NvmInit>
  /* initialize the file system module */
  FileInit();
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 8006d48:	f000 f810 	bl	8006d6c <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 8006d4c:	f7ff ff90 	bl	8006c70 <BackDoorInit>
} /*** end of BootInit ***/
 8006d50:	bf00      	nop
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	af00      	add	r7, sp, #0
  /* service the watchdog */
  CopService();
 8006d58:	f000 f8bc 	bl	8006ed4 <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8006d5c:	f7ff fc28 	bl	80065b0 <TimerUpdate>
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 8006d60:	f000 f812 	bl	8006d88 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 8006d64:	f7ff ff92 	bl	8006c8c <BackDoorCheck>
} /*** end of BootTask ***/
 8006d68:	bf00      	nop
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  /* initialize the XCP communication protocol */
  XcpInit();
 8006d70:	f000 f8b8 	bl	8006ee4 <XcpInit>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
#endif
#if (BOOT_COM_USB_ENABLE > 0)
  /* initialize the USB interface */
  UsbInit();
 8006d74:	f7ff fc44 	bl	8006600 <UsbInit>
  /* set it as active */
  comActiveInterface = COM_IF_USB;
 8006d78:	4b02      	ldr	r3, [pc, #8]	; (8006d84 <ComInit+0x18>)
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 8006d7e:	bf00      	nop
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000009 	.word	0x20000009

08006d88 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_USB_ENABLE > 0)
  if (UsbReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 8006d8e:	1dfb      	adds	r3, r7, #7
 8006d90:	4619      	mov	r1, r3
 8006d92:	4809      	ldr	r0, [pc, #36]	; (8006db8 <ComTask+0x30>)
 8006d94:	f7ff fcd6 	bl	8006744 <UsbReceivePacket>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d107      	bne.n	8006dae <ComTask+0x26>
  {
    /* make this the active interface */
    comActiveInterface = COM_IF_USB;
 8006d9e:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <ComTask+0x34>)
 8006da0:	2202      	movs	r2, #2
 8006da2:	701a      	strb	r2, [r3, #0]
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	4619      	mov	r1, r3
 8006da8:	4803      	ldr	r0, [pc, #12]	; (8006db8 <ComTask+0x30>)
 8006daa:	f000 f8dd 	bl	8006f68 <XcpPacketReceived>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 8006dae:	bf00      	nop
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20000f08 	.word	0x20000f08
 8006dbc:	20000009 	.word	0x20000009

08006dc0 <ComFree>:
** \brief     Releases the communication module.
** \return    none
**
****************************************************************************************/
void ComFree(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
 8006dc4:	f7ff fc6e 	bl	80066a4 <UsbFree>
#endif
} /*** end of ComFree ***/
 8006dc8:	bf00      	nop
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	807b      	strh	r3, [r7, #2]
    Rs232TransmitPacket(data, (blt_int8u)len);
  }
#endif
#if (BOOT_COM_USB_ENABLE > 0)
  /* transmit the packet */
  if (comActiveInterface == COM_IF_USB)
 8006dd8:	4b07      	ldr	r3, [pc, #28]	; (8006df8 <ComTransmitPacket+0x2c>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d105      	bne.n	8006dec <ComTransmitPacket+0x20>
  {
    UsbTransmitPacket(data, len);
 8006de0:	887b      	ldrh	r3, [r7, #2]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7ff fc6e 	bl	80066c8 <UsbTransmitPacket>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 8006dec:	f000 f8ae 	bl	8006f4c <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	20000009 	.word	0x20000009

08006dfc <ComGetActiveInterfaceMaxRxLen>:
**            communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8006e02:	4b12      	ldr	r3, [pc, #72]	; (8006e4c <ComGetActiveInterfaceMaxRxLen+0x50>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	d816      	bhi.n	8006e38 <ComGetActiveInterfaceMaxRxLen+0x3c>
 8006e0a:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <ComGetActiveInterfaceMaxRxLen+0x14>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e21 	.word	0x08006e21
 8006e14:	08006e27 	.word	0x08006e27
 8006e18:	08006e2d 	.word	0x08006e2d
 8006e1c:	08006e33 	.word	0x08006e33
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 8006e20:	2381      	movs	r3, #129	; 0x81
 8006e22:	80fb      	strh	r3, [r7, #6]
      break;
 8006e24:	e00b      	b.n	8006e3e <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
 8006e26:	2308      	movs	r3, #8
 8006e28:	80fb      	strh	r3, [r7, #6]
      break;
 8006e2a:	e008      	b.n	8006e3e <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 8006e2c:	233f      	movs	r3, #63	; 0x3f
 8006e2e:	80fb      	strh	r3, [r7, #6]
      break;
 8006e30:	e005      	b.n	8006e3e <ComGetActiveInterfaceMaxRxLen+0x42>

    case COM_IF_NET:
      result = BOOT_COM_NET_RX_MAX_DATA;
 8006e32:	2300      	movs	r3, #0
 8006e34:	80fb      	strh	r3, [r7, #6]
      break;
 8006e36:	e002      	b.n	8006e3e <ComGetActiveInterfaceMaxRxLen+0x42>

    default:
      result = BOOT_COM_RX_MAX_DATA;
 8006e38:	2381      	movs	r3, #129	; 0x81
 8006e3a:	80fb      	strh	r3, [r7, #6]
      break;
 8006e3c:	bf00      	nop
  }

  return result;
 8006e3e:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	20000009 	.word	0x20000009

08006e50 <ComGetActiveInterfaceMaxTxLen>:
**            specified communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8006e56:	4b12      	ldr	r3, [pc, #72]	; (8006ea0 <ComGetActiveInterfaceMaxTxLen+0x50>)
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d816      	bhi.n	8006e8c <ComGetActiveInterfaceMaxTxLen+0x3c>
 8006e5e:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <ComGetActiveInterfaceMaxTxLen+0x14>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006e75 	.word	0x08006e75
 8006e68:	08006e7b 	.word	0x08006e7b
 8006e6c:	08006e81 	.word	0x08006e81
 8006e70:	08006e87 	.word	0x08006e87
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 8006e74:	2381      	movs	r3, #129	; 0x81
 8006e76:	80fb      	strh	r3, [r7, #6]
      break;
 8006e78:	e00b      	b.n	8006e92 <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
 8006e7a:	2308      	movs	r3, #8
 8006e7c:	80fb      	strh	r3, [r7, #6]
      break;
 8006e7e:	e008      	b.n	8006e92 <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 8006e80:	233f      	movs	r3, #63	; 0x3f
 8006e82:	80fb      	strh	r3, [r7, #6]
      break;
 8006e84:	e005      	b.n	8006e92 <ComGetActiveInterfaceMaxTxLen+0x42>

    case COM_IF_NET:
      result = BOOT_COM_NET_TX_MAX_DATA;
 8006e86:	2300      	movs	r3, #0
 8006e88:	80fb      	strh	r3, [r7, #6]
      break;
 8006e8a:	e002      	b.n	8006e92 <ComGetActiveInterfaceMaxTxLen+0x42>

    default:
      result = BOOT_COM_TX_MAX_DATA;
 8006e8c:	2381      	movs	r3, #129	; 0x81
 8006e8e:	80fb      	strh	r3, [r7, #6]
      break;
 8006e90:	bf00      	nop
  }

  return result;
 8006e92:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 8006e94:	4618      	mov	r0, r3
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	20000009 	.word	0x20000009

08006ea4 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
  blt_bool result = BLT_FALSE;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	71fb      	strb	r3, [r7, #7]

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 8006eae:	f000 f83b 	bl	8006f28 <XcpIsConnected>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <ComIsConnected+0x18>
  {
    result = BLT_TRUE;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	71fb      	strb	r3, [r7, #7]
  {
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
} /*** end of ComIsConnected ***/
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
#endif
} /*** end of CopInit ***/
 8006eca:	bf00      	nop
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
#endif
} /*** end of CopService ***/
 8006ed8:	bf00      	nop
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
	...

08006ee4 <XcpInit>:
** \brief     Initializes the XCP driver. Should be called once upon system startup.
** \return    none
**
****************************************************************************************/
void XcpInit(void)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	af00      	add	r7, sp, #0
  /* reset xcp module info */
  xcpInfo.connected = 0;
 8006ee8:	4b0e      	ldr	r3, [pc, #56]	; (8006f24 <XcpInit+0x40>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  xcpInfo.mta = 0;
 8006ef0:	4b0c      	ldr	r3, [pc, #48]	; (8006f24 <XcpInit+0x40>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  xcpInfo.ctoPending = 0;
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <XcpInit+0x40>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  xcpInfo.ctoLen = 0;
 8006f00:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <XcpInit+0x40>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  xcpInfo.s_n_k_resource = 0;
 8006f08:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <XcpInit+0x40>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  xcpInfo.protection = 0;
 8006f10:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <XcpInit+0x40>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
} /*** end of XcpInit ***/
 8006f18:	bf00      	nop
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	20000f8c 	.word	0x20000f8c

08006f28 <XcpIsConnected>:
** \brief     Obtains information about the XCP connection state.
** \return    BLT_TRUE is an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool XcpIsConnected(void)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
  if (xcpInfo.connected == 0)
 8006f2c:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <XcpIsConnected+0x20>)
 8006f2e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <XcpIsConnected+0x12>
  {
    return BLT_FALSE;
 8006f36:	2300      	movs	r3, #0
 8006f38:	e000      	b.n	8006f3c <XcpIsConnected+0x14>
  }
  return BLT_TRUE;
 8006f3a:	2301      	movs	r3, #1
} /*** end of XcpIsConnected ***/
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	20000f8c 	.word	0x20000f8c

08006f4c <XcpPacketTransmitted>:
**            the transport layer.
** \return    none
**
****************************************************************************************/
void XcpPacketTransmitted(void)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
  /* reset packet transmission pending flag */
  xcpInfo.ctoPending = 0;
 8006f50:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <XcpPacketTransmitted+0x18>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
} /*** end of XcpPacketTransmitted ***/
 8006f58:	bf00      	nop
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20000f8c 	.word	0x20000f8c

08006f68 <XcpPacketReceived>:
** \param     len Number of bytes in the packet.
** \return    none
**
****************************************************************************************/
void XcpPacketReceived(blt_int8u *data, blt_int8u len)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	70fb      	strb	r3, [r7, #3]
    /* packet processed by hook function so no need to continue. */
    return;
  }
#endif
  /* was this a connect command? */
  if (data[0] == XCP_CMD_CONNECT)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2bff      	cmp	r3, #255	; 0xff
 8006f7a:	d103      	bne.n	8006f84 <XcpPacketReceived+0x1c>
  {
    /* process the connect command */
    XcpCmdConnect(data);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f979 	bl	8007274 <XcpCmdConnect>
 8006f82:	e0b7      	b.n	80070f4 <XcpPacketReceived+0x18c>
  }
  /* only continue if connected */
  else if (xcpInfo.connected == 1)
 8006f84:	4b6a      	ldr	r3, [pc, #424]	; (8007130 <XcpPacketReceived+0x1c8>)
 8006f86:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	f040 80cb 	bne.w	8007126 <XcpPacketReceived+0x1be>
  {
    switch (data[0])
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	3bc9      	subs	r3, #201	; 0xc9
 8006f96:	2b35      	cmp	r3, #53	; 0x35
 8006f98:	f200 80a8 	bhi.w	80070ec <XcpPacketReceived+0x184>
 8006f9c:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <XcpPacketReceived+0x3c>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	080070bd 	.word	0x080070bd
 8006fa8:	080070ed 	.word	0x080070ed
 8006fac:	080070ed 	.word	0x080070ed
 8006fb0:	080070e5 	.word	0x080070e5
 8006fb4:	080070ed 	.word	0x080070ed
 8006fb8:	080070ed 	.word	0x080070ed
 8006fbc:	080070dd 	.word	0x080070dd
 8006fc0:	080070c5 	.word	0x080070c5
 8006fc4:	080070d5 	.word	0x080070d5
 8006fc8:	080070cd 	.word	0x080070cd
 8006fcc:	080070ed 	.word	0x080070ed
 8006fd0:	080070ed 	.word	0x080070ed
 8006fd4:	080070ed 	.word	0x080070ed
 8006fd8:	080070ed 	.word	0x080070ed
 8006fdc:	080070ed 	.word	0x080070ed
 8006fe0:	080070ed 	.word	0x080070ed
 8006fe4:	080070ed 	.word	0x080070ed
 8006fe8:	080070ed 	.word	0x080070ed
 8006fec:	080070ed 	.word	0x080070ed
 8006ff0:	080070ed 	.word	0x080070ed
 8006ff4:	080070ed 	.word	0x080070ed
 8006ff8:	080070ed 	.word	0x080070ed
 8006ffc:	080070ed 	.word	0x080070ed
 8007000:	080070ed 	.word	0x080070ed
 8007004:	080070ed 	.word	0x080070ed
 8007008:	080070ed 	.word	0x080070ed
 800700c:	080070ed 	.word	0x080070ed
 8007010:	080070ed 	.word	0x080070ed
 8007014:	080070ed 	.word	0x080070ed
 8007018:	080070ed 	.word	0x080070ed
 800701c:	080070ed 	.word	0x080070ed
 8007020:	080070ed 	.word	0x080070ed
 8007024:	080070ed 	.word	0x080070ed
 8007028:	080070ed 	.word	0x080070ed
 800702c:	080070ed 	.word	0x080070ed
 8007030:	080070ed 	.word	0x080070ed
 8007034:	080070ed 	.word	0x080070ed
 8007038:	080070ed 	.word	0x080070ed
 800703c:	080070ed 	.word	0x080070ed
 8007040:	080070ed 	.word	0x080070ed
 8007044:	080070ed 	.word	0x080070ed
 8007048:	080070ed 	.word	0x080070ed
 800704c:	08007095 	.word	0x08007095
 8007050:	08007085 	.word	0x08007085
 8007054:	0800707d 	.word	0x0800707d
 8007058:	0800708d 	.word	0x0800708d
 800705c:	080070ed 	.word	0x080070ed
 8007060:	080070ed 	.word	0x080070ed
 8007064:	080070ed 	.word	0x080070ed
 8007068:	0800709d 	.word	0x0800709d
 800706c:	080070ed 	.word	0x080070ed
 8007070:	080070a5 	.word	0x080070a5
 8007074:	080070ad 	.word	0x080070ad
 8007078:	080070b5 	.word	0x080070b5
    {
      case XCP_CMD_UPLOAD:
        XcpCmdUpload(data);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f9c7 	bl	8007410 <XcpCmdUpload>
        break;
 8007082:	e037      	b.n	80070f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_SHORT_UPLOAD:
        XcpCmdShortUpload(data);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fa01 	bl	800748c <XcpCmdShortUpload>
        break;
 800708a:	e033      	b.n	80070f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_SET_MTA:
        XcpCmdSetMta(data);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f9a5 	bl	80073dc <XcpCmdSetMta>
        break;
 8007092:	e02f      	b.n	80070f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_BUILD_CHECKSUM:
        XcpCmdBuildCheckSum(data);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fa41 	bl	800751c <XcpCmdBuildCheckSum>
        break;
 800709a:	e02b      	b.n	80070f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_ID:
        XcpCmdGetId(data);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f975 	bl	800738c <XcpCmdGetId>
        break;
 80070a2:	e027      	b.n	80070f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_SYNCH:
        XcpCmdSynch(data);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f965 	bl	8007374 <XcpCmdSynch>
        break;
 80070aa:	e023      	b.n	80070f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_STATUS:
        XcpCmdGetStatus(data);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f93d 	bl	800732c <XcpCmdGetStatus>
        break;
 80070b2:	e01f      	b.n	80070f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_DISCONNECT:
        XcpCmdDisconnect(data);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f921 	bl	80072fc <XcpCmdDisconnect>
        break;
 80070ba:	e01b      	b.n	80070f4 <XcpPacketReceived+0x18c>
        XcpCmdDownloadMax(data);
        break;
#endif
#if (XCP_RES_PROGRAMMING_EN == 1)
      case XCP_CMD_PROGRAM_MAX:
        XcpCmdProgramMax(data);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fa87 	bl	80075d0 <XcpCmdProgramMax>
        break;
 80070c2:	e017      	b.n	80070f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM:
        XcpCmdProgram(data);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fab3 	bl	8007630 <XcpCmdProgram>
        break;
 80070ca:	e013      	b.n	80070f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_START:
        XcpCmdProgramStart(data);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fa59 	bl	8007584 <XcpCmdProgramStart>
        break;
 80070d2:	e00f      	b.n	80070f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_CLEAR:
        XcpCmdProgramClear(data);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 faf5 	bl	80076c4 <XcpCmdProgramClear>
        break;
 80070da:	e00b      	b.n	80070f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_RESET:
        XcpCmdProgramReset(data);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fb17 	bl	8007710 <XcpCmdProgramReset>
        break;
 80070e2:	e007      	b.n	80070f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_PREPARE:
        XcpCmdProgramPrepare(data);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fb27 	bl	8007738 <XcpCmdProgramPrepare>
        break;
 80070ea:	e003      	b.n	80070f4 <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_CAL_PAGE:
        XcpCmdGetCalPage(data);
        break;
#endif
      default:
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 80070ec:	2020      	movs	r0, #32
 80070ee:	f000 f85f 	bl	80071b0 <XcpSetCtoError>
        break;
 80070f2:	bf00      	nop
    /* return to make sure response packet is not send because we are not connected */
    return;
  }

  /* make sure the previous command was completed */
  if (xcpInfo.ctoPending == 1)
 80070f4:	4b0e      	ldr	r3, [pc, #56]	; (8007130 <XcpPacketReceived+0x1c8>)
 80070f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d102      	bne.n	8007104 <XcpPacketReceived+0x19c>
  {
    /* command overrun occurred */
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 80070fe:	2010      	movs	r0, #16
 8007100:	f000 f856 	bl	80071b0 <XcpSetCtoError>
  }

  /* send the response if it contains something */
  if (xcpInfo.ctoLen > 0)
 8007104:	4b0a      	ldr	r3, [pc, #40]	; (8007130 <XcpPacketReceived+0x1c8>)
 8007106:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 800710a:	2b00      	cmp	r3, #0
 800710c:	dd0c      	ble.n	8007128 <XcpPacketReceived+0x1c0>
  {
    /* set cto packet transmission pending flag */
    xcpInfo.ctoPending = 1;
 800710e:	4b08      	ldr	r3, [pc, #32]	; (8007130 <XcpPacketReceived+0x1c8>)
 8007110:	2201      	movs	r2, #1
 8007112:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* transmit the cto response packet */
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 8007116:	4b06      	ldr	r3, [pc, #24]	; (8007130 <XcpPacketReceived+0x1c8>)
 8007118:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 800711c:	4619      	mov	r1, r3
 800711e:	4804      	ldr	r0, [pc, #16]	; (8007130 <XcpPacketReceived+0x1c8>)
 8007120:	f000 f808 	bl	8007134 <XcpTransmitPacket>
 8007124:	e000      	b.n	8007128 <XcpPacketReceived+0x1c0>
    return;
 8007126:	bf00      	nop
  }
} /*** end of XcpPacketReceived ***/
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	20000f8c 	.word	0x20000f8c

08007134 <XcpTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
static void XcpTransmitPacket(blt_int8u *data, blt_int16s len)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	807b      	strh	r3, [r7, #2]
  /* submit packet to the communication interface for transmission */
#if (BOOT_COM_ENABLE == 0)
  XcpTransmitPacketHook(data, len);
#else
  ComTransmitPacket(data, len);
 8007140:	887b      	ldrh	r3, [r7, #2]
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7ff fe41 	bl	8006dcc <ComTransmitPacket>
#endif

} /*** end of XcpTransmitPacket ***/
 800714a:	bf00      	nop
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <XcpComputeChecksum>:
** \return    Checksum type that was used during the checksum calculation.
**
****************************************************************************************/
static blt_int8u XcpComputeChecksum(blt_int32u address, blt_int32u length,
                                    blt_int32u *checksum)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b086      	sub	sp, #24
 8007156:	af00      	add	r7, sp, #0
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	607a      	str	r2, [r7, #4]
  blt_int8u cs = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	75fb      	strb	r3, [r7, #23]

  /* this example computes the checksum using the add byte to byte algorithm */
  while (length-- > 0)
 8007162:	e009      	b.n	8007178 <XcpComputeChecksum+0x26>
  {
    /* add the next byte value */
    cs += *((blt_int8u *)(blt_addr)address);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	781a      	ldrb	r2, [r3, #0]
 8007168:	7dfb      	ldrb	r3, [r7, #23]
 800716a:	4413      	add	r3, r2
 800716c:	75fb      	strb	r3, [r7, #23]
    /* increment address */
    address++;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3301      	adds	r3, #1
 8007172:	60fb      	str	r3, [r7, #12]
    /* service the watchdog */
    CopService();
 8007174:	f7ff feae 	bl	8006ed4 <CopService>
  while (length-- > 0)
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	1e5a      	subs	r2, r3, #1
 800717c:	60ba      	str	r2, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1f0      	bne.n	8007164 <XcpComputeChecksum+0x12>
  }
  /* store the computed checksum value */
  *checksum = cs;
 8007182:	7dfa      	ldrb	r2, [r7, #23]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	601a      	str	r2, [r3, #0]
  /* inform the caller of the uses checksum computation algorithm */
  return XCP_CS_ADD11;
 8007188:	2301      	movs	r3, #1
} /*** end of XcpComputeChecksum ***/
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <XcpProtectResources>:
** \brief     Utility function to protects all the available resources.
** \return    none
**
****************************************************************************************/
static void XcpProtectResources(void)
{
 8007194:	b480      	push	{r7}
 8007196:	af00      	add	r7, sp, #0
  xcpInfo.protection = 0;
 8007198:	4b04      	ldr	r3, [pc, #16]	; (80071ac <XcpProtectResources+0x18>)
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 80071a0:	bf00      	nop
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	20000f8c 	.word	0x20000f8c

080071b0 <XcpSetCtoError>:
** \param     error XCP error code (XCP_ERR_XXX).
** \return    none
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	71fb      	strb	r3, [r7, #7]
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 80071ba:	4b08      	ldr	r3, [pc, #32]	; (80071dc <XcpSetCtoError+0x2c>)
 80071bc:	22fe      	movs	r2, #254	; 0xfe
 80071be:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoData[1] = error;
 80071c0:	4a06      	ldr	r2, [pc, #24]	; (80071dc <XcpSetCtoError+0x2c>)
 80071c2:	79fb      	ldrb	r3, [r7, #7]
 80071c4:	7053      	strb	r3, [r2, #1]
  xcpInfo.ctoLen = 2;
 80071c6:	4b05      	ldr	r3, [pc, #20]	; (80071dc <XcpSetCtoError+0x2c>)
 80071c8:	2202      	movs	r2, #2
 80071ca:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpSetCtoError ***/
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	20000f8c 	.word	0x20000f8c

080071e0 <XcpGetOrderedLong>:
** \param     data Array to the buffer with the 32-bit value stored as bytes.
** \return    The 32-bit value.
**
****************************************************************************************/
static blt_int32u XcpGetOrderedLong(blt_int8u const * data)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  blt_int32u result = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	60fb      	str	r3, [r7, #12]

#if (BOOT_CPU_BYTE_ORDER_MOTOROLA	== 0)
  result |= (blt_int32u)data[0];
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[1] << 8);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3301      	adds	r3, #1
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	021b      	lsls	r3, r3, #8
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	4313      	orrs	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[2] << 16);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3302      	adds	r3, #2
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	041b      	lsls	r3, r3, #16
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[3] << 24);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3303      	adds	r3, #3
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	061b      	lsls	r3, r3, #24
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[2] << 8);
  result |= (blt_int32u)((blt_int32u)data[1] << 16);
  result |= (blt_int32u)((blt_int32u)data[0] << 24);
#endif
  /* Give the result back to the caller. */
  return result;
 8007222:	68fb      	ldr	r3, [r7, #12]
} /*** end of XcpGetOrderedLong ***/
 8007224:	4618      	mov	r0, r3
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <XcpSetOrderedLong>:
** \param     value The 32-bit value to store in the buffer.
** \param     data Array to the buffer for storage.
**
****************************************************************************************/
static void XcpSetOrderedLong(blt_int32u value, blt_int8u *data)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
#if (BOOT_CPU_BYTE_ORDER_MOTOROLA	== 0)
  data[0] = (blt_int8u) value;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	b2da      	uxtb	r2, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	701a      	strb	r2, [r3, #0]
  data[1] = (blt_int8u)(value >>  8);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	0a1a      	lsrs	r2, r3, #8
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	3301      	adds	r3, #1
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	701a      	strb	r2, [r3, #0]
  data[2] = (blt_int8u)(value >> 16);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	0c1a      	lsrs	r2, r3, #16
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	3302      	adds	r3, #2
 8007256:	b2d2      	uxtb	r2, r2
 8007258:	701a      	strb	r2, [r3, #0]
  data[3] = (blt_int8u)(value >> 24);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	0e1a      	lsrs	r2, r3, #24
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	3303      	adds	r3, #3
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	701a      	strb	r2, [r3, #0]
  data[3] = (blt_int8u) value;
  data[2] = (blt_int8u)(value >>  8);
  data[1] = (blt_int8u)(value >> 16);
  data[0] = (blt_int8u)(value >> 24);
#endif
} /*** end of XcpSetOrderedLong ***/
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
	...

08007274 <XcpCmdConnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdConnect(blt_int8u *data)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* enable resource protection */
  XcpProtectResources();
 800727c:	f7ff ff8a 	bl	8007194 <XcpProtectResources>

  /* indicate that the connection is established */
  xcpInfo.connected = 1;
 8007280:	4b1d      	ldr	r3, [pc, #116]	; (80072f8 <XcpCmdConnect+0x84>)
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8007288:	4b1b      	ldr	r3, [pc, #108]	; (80072f8 <XcpCmdConnect+0x84>)
 800728a:	22ff      	movs	r2, #255	; 0xff
 800728c:	701a      	strb	r2, [r3, #0]

  /* report available resources */
  xcpInfo.ctoData[1] = 0;
 800728e:	4b1a      	ldr	r3, [pc, #104]	; (80072f8 <XcpCmdConnect+0x84>)
 8007290:	2200      	movs	r2, #0
 8007292:	705a      	strb	r2, [r3, #1]
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 8007294:	4b18      	ldr	r3, [pc, #96]	; (80072f8 <XcpCmdConnect+0x84>)
 8007296:	785b      	ldrb	r3, [r3, #1]
 8007298:	f043 0310 	orr.w	r3, r3, #16
 800729c:	b2da      	uxtb	r2, r3
 800729e:	4b16      	ldr	r3, [pc, #88]	; (80072f8 <XcpCmdConnect+0x84>)
 80072a0:	705a      	strb	r2, [r3, #1]
#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_STIM;
#endif

  /* report communication mode info. only byte granularity is supported */
  xcpInfo.ctoData[2] = 0;
 80072a2:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <XcpCmdConnect+0x84>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	709a      	strb	r2, [r3, #2]
  /* configure for motorola or intel byte ordering */
  xcpInfo.ctoData[2] |= XCP_MOTOROLA_FORMAT;
 80072a8:	4b13      	ldr	r3, [pc, #76]	; (80072f8 <XcpCmdConnect+0x84>)
 80072aa:	789a      	ldrb	r2, [r3, #2]
 80072ac:	4b12      	ldr	r3, [pc, #72]	; (80072f8 <XcpCmdConnect+0x84>)
 80072ae:	709a      	strb	r2, [r3, #2]

  /* report max cto data length */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 80072b0:	f7ff fda4 	bl	8006dfc <ComGetActiveInterfaceMaxRxLen>
 80072b4:	4603      	mov	r3, r0
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	4b0f      	ldr	r3, [pc, #60]	; (80072f8 <XcpCmdConnect+0x84>)
 80072ba:	70da      	strb	r2, [r3, #3]

  /* report max dto data length */
#if (XCP_MOTOROLA_FORMAT == 0)
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 80072bc:	f7ff fdc8 	bl	8006e50 <ComGetActiveInterfaceMaxTxLen>
 80072c0:	4603      	mov	r3, r0
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <XcpCmdConnect+0x84>)
 80072c6:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 80072c8:	f7ff fdc2 	bl	8006e50 <ComGetActiveInterfaceMaxTxLen>
 80072cc:	4603      	mov	r3, r0
 80072ce:	0a1b      	lsrs	r3, r3, #8
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	4b08      	ldr	r3, [pc, #32]	; (80072f8 <XcpCmdConnect+0x84>)
 80072d6:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[4] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
  xcpInfo.ctoData[5] = (blt_int8u)XCP_DTO_PACKET_LEN;
#endif

  /* report msb of protocol layer version number */
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 80072d8:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <XcpCmdConnect+0x84>)
 80072da:	2201      	movs	r2, #1
 80072dc:	719a      	strb	r2, [r3, #6]

  /* report msb of transport layer version number */
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 80072de:	4b06      	ldr	r3, [pc, #24]	; (80072f8 <XcpCmdConnect+0x84>)
 80072e0:	2201      	movs	r2, #1
 80072e2:	71da      	strb	r2, [r3, #7]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 80072e4:	4b04      	ldr	r3, [pc, #16]	; (80072f8 <XcpCmdConnect+0x84>)
 80072e6:	2208      	movs	r2, #8
 80072e8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

  /* reinit the NVM driver because a new firmware update is about the start */
  NvmInit();
 80072ec:	f7ff f8f6 	bl	80064dc <NvmInit>
} /*** end of XcpCmdConnect ***/
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	20000f8c 	.word	0x20000f8c

080072fc <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 8007304:	4b08      	ldr	r3, [pc, #32]	; (8007328 <XcpCmdDisconnect+0x2c>)
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* enable resource protection */
  XcpProtectResources();
 800730c:	f7ff ff42 	bl	8007194 <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8007310:	4b05      	ldr	r3, [pc, #20]	; (8007328 <XcpCmdDisconnect+0x2c>)
 8007312:	22ff      	movs	r2, #255	; 0xff
 8007314:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8007316:	4b04      	ldr	r3, [pc, #16]	; (8007328 <XcpCmdDisconnect+0x2c>)
 8007318:	2201      	movs	r2, #1
 800731a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdDisconnect ***/
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000f8c 	.word	0x20000f8c

0800732c <XcpCmdGetStatus>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetStatus(blt_int8u *data)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8007334:	4b0e      	ldr	r3, [pc, #56]	; (8007370 <XcpCmdGetStatus+0x44>)
 8007336:	22ff      	movs	r2, #255	; 0xff
 8007338:	701a      	strb	r2, [r3, #0]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 800733a:	4b0d      	ldr	r3, [pc, #52]	; (8007370 <XcpCmdGetStatus+0x44>)
 800733c:	2200      	movs	r2, #0
 800733e:	705a      	strb	r2, [r3, #1]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 8007340:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <XcpCmdGetStatus+0x44>)
 8007342:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8007346:	4b0a      	ldr	r3, [pc, #40]	; (8007370 <XcpCmdGetStatus+0x44>)
 8007348:	709a      	strb	r2, [r3, #2]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 800734a:	4b09      	ldr	r3, [pc, #36]	; (8007370 <XcpCmdGetStatus+0x44>)
 800734c:	2200      	movs	r2, #0
 800734e:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[4] = 0;
 8007350:	4b07      	ldr	r3, [pc, #28]	; (8007370 <XcpCmdGetStatus+0x44>)
 8007352:	2200      	movs	r2, #0
 8007354:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 8007356:	4b06      	ldr	r3, [pc, #24]	; (8007370 <XcpCmdGetStatus+0x44>)
 8007358:	2200      	movs	r2, #0
 800735a:	715a      	strb	r2, [r3, #5]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 800735c:	4b04      	ldr	r3, [pc, #16]	; (8007370 <XcpCmdGetStatus+0x44>)
 800735e:	2206      	movs	r2, #6
 8007360:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdGetStatus ***/
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	20000f8c 	.word	0x20000f8c

08007374 <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 800737c:	2000      	movs	r0, #0
 800737e:	f7ff ff17 	bl	80071b0 <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
	...

0800738c <XcpCmdGetId>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetId(blt_int8u *data)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8007394:	4b0e      	ldr	r3, [pc, #56]	; (80073d0 <XcpCmdGetId+0x44>)
 8007396:	22ff      	movs	r2, #255	; 0xff
 8007398:	701a      	strb	r2, [r3, #0]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 800739a:	4a0e      	ldr	r2, [pc, #56]	; (80073d4 <XcpCmdGetId+0x48>)
 800739c:	4b0c      	ldr	r3, [pc, #48]	; (80073d0 <XcpCmdGetId+0x44>)
 800739e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 80073a2:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <XcpCmdGetId+0x44>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	705a      	strb	r2, [r3, #1]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 80073a8:	4b09      	ldr	r3, [pc, #36]	; (80073d0 <XcpCmdGetId+0x44>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	709a      	strb	r2, [r3, #2]
  xcpInfo.ctoData[3] = 0;
 80073ae:	4b08      	ldr	r3, [pc, #32]	; (80073d0 <XcpCmdGetId+0x44>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	70da      	strb	r2, [r3, #3]

  /* store station id length (excl. null termination) for response packet */
  stationIdLen = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 80073b4:	2307      	movs	r3, #7
 80073b6:	60fb      	str	r3, [r7, #12]
  XcpSetOrderedLong(stationIdLen, &xcpInfo.ctoData[4]);
 80073b8:	4907      	ldr	r1, [pc, #28]	; (80073d8 <XcpCmdGetId+0x4c>)
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f7ff ff38 	bl	8007230 <XcpSetOrderedLong>

  /* set packet length */
  xcpInfo.ctoLen = 8;
 80073c0:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <XcpCmdGetId+0x44>)
 80073c2:	2208      	movs	r2, #8
 80073c4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdGetId ***/
 80073c8:	bf00      	nop
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	20000f8c 	.word	0x20000f8c
 80073d4:	08008420 	.word	0x08008420
 80073d8:	20000f90 	.word	0x20000f90

080073dc <XcpCmdSetMta>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80073e4:	4b09      	ldr	r3, [pc, #36]	; (800740c <XcpCmdSetMta+0x30>)
 80073e6:	22ff      	movs	r2, #255	; 0xff
 80073e8:	701a      	strb	r2, [r3, #0]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7ff fef6 	bl	80071e0 <XcpGetOrderedLong>
 80073f4:	4603      	mov	r3, r0
 80073f6:	4a05      	ldr	r2, [pc, #20]	; (800740c <XcpCmdSetMta+0x30>)
 80073f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80073fc:	4b03      	ldr	r3, [pc, #12]	; (800740c <XcpCmdSetMta+0x30>)
 80073fe:	2201      	movs	r2, #1
 8007400:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdSetMta ***/
 8007404:	bf00      	nop
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	20000f8c 	.word	0x20000f8c

08007410 <XcpCmdUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUpload(blt_int8u *data)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8007418:	f7ff fcf0 	bl	8006dfc <ComGetActiveInterfaceMaxRxLen>
 800741c:	4603      	mov	r3, r0
 800741e:	461a      	mov	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3301      	adds	r3, #1
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	429a      	cmp	r2, r3
 800742a:	d803      	bhi.n	8007434 <XcpCmdUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800742c:	2022      	movs	r0, #34	; 0x22
 800742e:	f7ff febf 	bl	80071b0 <XcpSetCtoError>
    return;
 8007432:	e024      	b.n	800747e <XcpCmdUpload+0x6e>
  }

  /* read out the length of the requested upload operation */
  len = data[1];
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3301      	adds	r3, #1
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 800743c:	4b11      	ldr	r3, [pc, #68]	; (8007484 <XcpCmdUpload+0x74>)
 800743e:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	4a11      	ldr	r2, [pc, #68]	; (8007488 <XcpCmdUpload+0x78>)
 8007444:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8007448:	89fa      	ldrh	r2, [r7, #14]
 800744a:	4618      	mov	r0, r3
 800744c:	f7fe fcc8 	bl	8005de0 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8007450:	4b0d      	ldr	r3, [pc, #52]	; (8007488 <XcpCmdUpload+0x78>)
 8007452:	22ff      	movs	r2, #255	; 0xff
 8007454:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8007456:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <XcpCmdUpload+0x78>)
 8007458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	3201      	adds	r2, #1
 8007460:	7812      	ldrb	r2, [r2, #0]
 8007462:	4413      	add	r3, r2
 8007464:	4a08      	ldr	r2, [pc, #32]	; (8007488 <XcpCmdUpload+0x78>)
 8007466:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	3301      	adds	r3, #1
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	b29b      	uxth	r3, r3
 8007472:	3301      	adds	r3, #1
 8007474:	b29b      	uxth	r3, r3
 8007476:	b21a      	sxth	r2, r3
 8007478:	4b03      	ldr	r3, [pc, #12]	; (8007488 <XcpCmdUpload+0x78>)
 800747a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdUpload ***/
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	20000f8d 	.word	0x20000f8d
 8007488:	20000f8c 	.word	0x20000f8c

0800748c <XcpCmdShortUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdShortUpload(blt_int8u *data)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8007494:	f7ff fcb2 	bl	8006dfc <ComGetActiveInterfaceMaxRxLen>
 8007498:	4603      	mov	r3, r0
 800749a:	461a      	mov	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3301      	adds	r3, #1
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d803      	bhi.n	80074b0 <XcpCmdShortUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80074a8:	2022      	movs	r0, #34	; 0x22
 80074aa:	f7ff fe81 	bl	80071b0 <XcpSetCtoError>
    return;
 80074ae:	e02d      	b.n	800750c <XcpCmdShortUpload+0x80>
  }

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	3304      	adds	r3, #4
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff fe93 	bl	80071e0 <XcpGetOrderedLong>
 80074ba:	4603      	mov	r3, r0
 80074bc:	4a15      	ldr	r2, [pc, #84]	; (8007514 <XcpCmdShortUpload+0x88>)
 80074be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* read out the length of the requested upload operation */
  len = data[1];
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3301      	adds	r3, #1
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 80074ca:	4b13      	ldr	r3, [pc, #76]	; (8007518 <XcpCmdShortUpload+0x8c>)
 80074cc:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	4a10      	ldr	r2, [pc, #64]	; (8007514 <XcpCmdShortUpload+0x88>)
 80074d2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80074d6:	89fa      	ldrh	r2, [r7, #14]
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fe fc81 	bl	8005de0 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80074de:	4b0d      	ldr	r3, [pc, #52]	; (8007514 <XcpCmdShortUpload+0x88>)
 80074e0:	22ff      	movs	r2, #255	; 0xff
 80074e2:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 80074e4:	4b0b      	ldr	r3, [pc, #44]	; (8007514 <XcpCmdShortUpload+0x88>)
 80074e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	3201      	adds	r2, #1
 80074ee:	7812      	ldrb	r2, [r2, #0]
 80074f0:	4413      	add	r3, r2
 80074f2:	4a08      	ldr	r2, [pc, #32]	; (8007514 <XcpCmdShortUpload+0x88>)
 80074f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3301      	adds	r3, #1
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	3301      	adds	r3, #1
 8007502:	b29b      	uxth	r3, r3
 8007504:	b21a      	sxth	r2, r3
 8007506:	4b03      	ldr	r3, [pc, #12]	; (8007514 <XcpCmdShortUpload+0x88>)
 8007508:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdShortUpload ***/
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20000f8c 	.word	0x20000f8c
 8007518:	20000f8d 	.word	0x20000f8d

0800751c <XcpCmdBuildCheckSum>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdBuildCheckSum(blt_int8u *data)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  blt_int32u checksumLen;
  blt_int32u checksumVal = 0;
 8007524:	2300      	movs	r3, #0
 8007526:	60fb      	str	r3, [r7, #12]
  blt_int8u  checksumType;
  
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8007528:	4b14      	ldr	r3, [pc, #80]	; (800757c <XcpCmdBuildCheckSum+0x60>)
 800752a:	22ff      	movs	r2, #255	; 0xff
 800752c:	701a      	strb	r2, [r3, #0]

  /* obtain checksum and checksum type */
  checksumLen = XcpGetOrderedLong(&data[4]);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3304      	adds	r3, #4
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff fe54 	bl	80071e0 <XcpGetOrderedLong>
 8007538:	6178      	str	r0, [r7, #20]
  checksumType = XcpComputeChecksum(xcpInfo.mta, checksumLen, &checksumVal);
 800753a:	4b10      	ldr	r3, [pc, #64]	; (800757c <XcpCmdBuildCheckSum+0x60>)
 800753c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007540:	f107 020c 	add.w	r2, r7, #12
 8007544:	6979      	ldr	r1, [r7, #20]
 8007546:	4618      	mov	r0, r3
 8007548:	f7ff fe03 	bl	8007152 <XcpComputeChecksum>
 800754c:	4603      	mov	r3, r0
 800754e:	74fb      	strb	r3, [r7, #19]
  xcpInfo.ctoData[1] = checksumType;
 8007550:	4a0a      	ldr	r2, [pc, #40]	; (800757c <XcpCmdBuildCheckSum+0x60>)
 8007552:	7cfb      	ldrb	r3, [r7, #19]
 8007554:	7053      	strb	r3, [r2, #1]
  XcpSetOrderedLong(checksumVal, &xcpInfo.ctoData[4]);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4909      	ldr	r1, [pc, #36]	; (8007580 <XcpCmdBuildCheckSum+0x64>)
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff fe68 	bl	8007230 <XcpSetOrderedLong>

  /* initialize reserved parameters */
  xcpInfo.ctoData[2] = 0;
 8007560:	4b06      	ldr	r3, [pc, #24]	; (800757c <XcpCmdBuildCheckSum+0x60>)
 8007562:	2200      	movs	r2, #0
 8007564:	709a      	strb	r2, [r3, #2]
  xcpInfo.ctoData[3] = 0;
 8007566:	4b05      	ldr	r3, [pc, #20]	; (800757c <XcpCmdBuildCheckSum+0x60>)
 8007568:	2200      	movs	r2, #0
 800756a:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 800756c:	4b03      	ldr	r3, [pc, #12]	; (800757c <XcpCmdBuildCheckSum+0x60>)
 800756e:	2208      	movs	r2, #8
 8007570:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdBuildCheckSum ***/
 8007574:	bf00      	nop
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	20000f8c 	.word	0x20000f8c
 8007580:	20000f90 	.word	0x20000f90

08007584 <XcpCmdProgramStart>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramStart(blt_int8u *data)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800758c:	4b0f      	ldr	r3, [pc, #60]	; (80075cc <XcpCmdProgramStart+0x48>)
 800758e:	22ff      	movs	r2, #255	; 0xff
 8007590:	701a      	strb	r2, [r3, #0]

  /* initialize reserved parameter */
  xcpInfo.ctoData[1] = 0;
 8007592:	4b0e      	ldr	r3, [pc, #56]	; (80075cc <XcpCmdProgramStart+0x48>)
 8007594:	2200      	movs	r2, #0
 8007596:	705a      	strb	r2, [r3, #1]

  /* no special communication mode supported during programming */
  xcpInfo.ctoData[2] = 0;
 8007598:	4b0c      	ldr	r3, [pc, #48]	; (80075cc <XcpCmdProgramStart+0x48>)
 800759a:	2200      	movs	r2, #0
 800759c:	709a      	strb	r2, [r3, #2]

  /* cto packet length stays the same during programming */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 800759e:	f7ff fc2d 	bl	8006dfc <ComGetActiveInterfaceMaxRxLen>
 80075a2:	4603      	mov	r3, r0
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	4b09      	ldr	r3, [pc, #36]	; (80075cc <XcpCmdProgramStart+0x48>)
 80075a8:	70da      	strb	r2, [r3, #3]

  /* no block size, st-min time, or queue size supported */
  xcpInfo.ctoData[4] = 0;
 80075aa:	4b08      	ldr	r3, [pc, #32]	; (80075cc <XcpCmdProgramStart+0x48>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 80075b0:	4b06      	ldr	r3, [pc, #24]	; (80075cc <XcpCmdProgramStart+0x48>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[6] = 0;
 80075b6:	4b05      	ldr	r3, [pc, #20]	; (80075cc <XcpCmdProgramStart+0x48>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	719a      	strb	r2, [r3, #6]

  /* set packet length */
  xcpInfo.ctoLen = 7;
 80075bc:	4b03      	ldr	r3, [pc, #12]	; (80075cc <XcpCmdProgramStart+0x48>)
 80075be:	2207      	movs	r2, #7
 80075c0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramStart ***/
 80075c4:	bf00      	nop
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20000f8c 	.word	0x20000f8c

080075d0 <XcpCmdProgramMax>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramMax(blt_int8u *data)
{
 80075d0:	b590      	push	{r4, r7, lr}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 80075d8:	4b14      	ldr	r3, [pc, #80]	; (800762c <XcpCmdProgramMax+0x5c>)
 80075da:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 80075de:	f7ff fc0d 	bl	8006dfc <ComGetActiveInterfaceMaxRxLen>
 80075e2:	4603      	mov	r3, r0
 80075e4:	3b01      	subs	r3, #1
 80075e6:	4619      	mov	r1, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3301      	adds	r3, #1
 80075ec:	461a      	mov	r2, r3
 80075ee:	4620      	mov	r0, r4
 80075f0:	f7fe ff7a 	bl	80064e8 <NvmWrite>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d103      	bne.n	8007602 <XcpCmdProgramMax+0x32>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 80075fa:	2031      	movs	r0, #49	; 0x31
 80075fc:	f7ff fdd8 	bl	80071b0 <XcpSetCtoError>
    return;
 8007600:	e011      	b.n	8007626 <XcpCmdProgramMax+0x56>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8007602:	4b0a      	ldr	r3, [pc, #40]	; (800762c <XcpCmdProgramMax+0x5c>)
 8007604:	22ff      	movs	r2, #255	; 0xff
 8007606:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8007608:	f7ff fbf8 	bl	8006dfc <ComGetActiveInterfaceMaxRxLen>
 800760c:	4603      	mov	r3, r0
 800760e:	1e5a      	subs	r2, r3, #1
 8007610:	4b06      	ldr	r3, [pc, #24]	; (800762c <XcpCmdProgramMax+0x5c>)
 8007612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007616:	4413      	add	r3, r2
 8007618:	4a04      	ldr	r2, [pc, #16]	; (800762c <XcpCmdProgramMax+0x5c>)
 800761a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800761e:	4b03      	ldr	r3, [pc, #12]	; (800762c <XcpCmdProgramMax+0x5c>)
 8007620:	2201      	movs	r2, #1
 8007622:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramMax ***/
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	bd90      	pop	{r4, r7, pc}
 800762c:	20000f8c 	.word	0x20000f8c

08007630 <XcpCmdProgram>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgram(blt_int8u *data)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* validate length of download request */
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 8007638:	f7ff fbe0 	bl	8006dfc <ComGetActiveInterfaceMaxRxLen>
 800763c:	4603      	mov	r3, r0
 800763e:	3b01      	subs	r3, #1
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	3201      	adds	r2, #1
 8007644:	7812      	ldrb	r2, [r2, #0]
 8007646:	4293      	cmp	r3, r2
 8007648:	dc03      	bgt.n	8007652 <XcpCmdProgram+0x22>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800764a:	2022      	movs	r0, #34	; 0x22
 800764c:	f7ff fdb0 	bl	80071b0 <XcpSetCtoError>
    return;
 8007650:	e033      	b.n	80076ba <XcpCmdProgram+0x8a>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8007652:	4b1b      	ldr	r3, [pc, #108]	; (80076c0 <XcpCmdProgram+0x90>)
 8007654:	22ff      	movs	r2, #255	; 0xff
 8007656:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8007658:	4b19      	ldr	r3, [pc, #100]	; (80076c0 <XcpCmdProgram+0x90>)
 800765a:	2201      	movs	r2, #1
 800765c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

  /* end of programming sequence (datasize is 0)? */
  if (data[1] == 0)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3301      	adds	r3, #1
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d108      	bne.n	800767c <XcpCmdProgram+0x4c>
  {
    /* call erase/programming cleanup routine */
    if (NvmDone() == BLT_FALSE)
 800766a:	f7fe ff69 	bl	8006540 <NvmDone>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d121      	bne.n	80076b8 <XcpCmdProgram+0x88>
    {
      /* error occurred while finishing up programming */
      XcpSetCtoError(XCP_ERR_GENERIC);
 8007674:	2031      	movs	r0, #49	; 0x31
 8007676:	f7ff fd9b 	bl	80071b0 <XcpSetCtoError>
    }
    return;
 800767a:	e01d      	b.n	80076b8 <XcpCmdProgram+0x88>
  }
  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 800767c:	4b10      	ldr	r3, [pc, #64]	; (80076c0 <XcpCmdProgram+0x90>)
 800767e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3301      	adds	r3, #1
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	4619      	mov	r1, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3302      	adds	r3, #2
 800768e:	461a      	mov	r2, r3
 8007690:	f7fe ff2a 	bl	80064e8 <NvmWrite>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d103      	bne.n	80076a2 <XcpCmdProgram+0x72>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 800769a:	2031      	movs	r0, #49	; 0x31
 800769c:	f7ff fd88 	bl	80071b0 <XcpSetCtoError>
    return;
 80076a0:	e00b      	b.n	80076ba <XcpCmdProgram+0x8a>
  }

  /* post increment the mta */
  xcpInfo.mta += data[1];
 80076a2:	4b07      	ldr	r3, [pc, #28]	; (80076c0 <XcpCmdProgram+0x90>)
 80076a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	3201      	adds	r2, #1
 80076ac:	7812      	ldrb	r2, [r2, #0]
 80076ae:	4413      	add	r3, r2
 80076b0:	4a03      	ldr	r2, [pc, #12]	; (80076c0 <XcpCmdProgram+0x90>)
 80076b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80076b6:	e000      	b.n	80076ba <XcpCmdProgram+0x8a>
    return;
 80076b8:	bf00      	nop
} /*** end of XcpCmdProgram ***/
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	20000f8c 	.word	0x20000f8c

080076c4 <XcpCmdProgramClear>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramClear(blt_int8u *data)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* erase the memory */
  eraseAddr = xcpInfo.mta;
 80076cc:	4b0f      	ldr	r3, [pc, #60]	; (800770c <XcpCmdProgramClear+0x48>)
 80076ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d2:	60fb      	str	r3, [r7, #12]
  eraseLen = XcpGetOrderedLong(&data[4]);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3304      	adds	r3, #4
 80076d8:	4618      	mov	r0, r3
 80076da:	f7ff fd81 	bl	80071e0 <XcpGetOrderedLong>
 80076de:	60b8      	str	r0, [r7, #8]
  if (NvmErase(eraseAddr, eraseLen) == BLT_FALSE)
 80076e0:	68b9      	ldr	r1, [r7, #8]
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f7fe ff10 	bl	8006508 <NvmErase>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d103      	bne.n	80076f6 <XcpCmdProgramClear+0x32>
  {
    /* error occurred during erasure */
    XcpSetCtoError(XCP_ERR_GENERIC);
 80076ee:	2031      	movs	r0, #49	; 0x31
 80076f0:	f7ff fd5e 	bl	80071b0 <XcpSetCtoError>
    return;
 80076f4:	e006      	b.n	8007704 <XcpCmdProgramClear+0x40>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80076f6:	4b05      	ldr	r3, [pc, #20]	; (800770c <XcpCmdProgramClear+0x48>)
 80076f8:	22ff      	movs	r2, #255	; 0xff
 80076fa:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 80076fc:	4b03      	ldr	r3, [pc, #12]	; (800770c <XcpCmdProgramClear+0x48>)
 80076fe:	2201      	movs	r2, #1
 8007700:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramClear ***/
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20000f8c 	.word	0x20000f8c

08007710 <XcpCmdProgramReset>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramReset(blt_int8u *data)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
#endif

  /* reset the ecu after programming is done. so basically, just start the newly programmed
   * firmware. it is okay if the code does not return here. 
   */
  CpuStartUserProgram();
 8007718:	f7fe fb32 	bl	8005d80 <CpuStartUserProgram>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800771c:	4b05      	ldr	r3, [pc, #20]	; (8007734 <XcpCmdProgramReset+0x24>)
 800771e:	22ff      	movs	r2, #255	; 0xff
 8007720:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8007722:	4b04      	ldr	r3, [pc, #16]	; (8007734 <XcpCmdProgramReset+0x24>)
 8007724:	2201      	movs	r2, #1
 8007726:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramReset ***/
 800772a:	bf00      	nop
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	20000f8c 	.word	0x20000f8c

08007738 <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 8007740:	2031      	movs	r0, #49	; 0x31
 8007742:	f7ff fd35 	bl	80071b0 <XcpSetCtoError>
  return;
 8007746:	bf00      	nop
} /*** end of XcpCmdProgramPrepare ***/
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <USBD_Bulk_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Bulk_Init (USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8007760:	2340      	movs	r3, #64	; 0x40
 8007762:	2202      	movs	r2, #2
 8007764:	2181      	movs	r1, #129	; 0x81
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fbf0 	bl	8007f4c <USBD_LL_OpenEP>
                 BULK_IN_EP,
                 USBD_EP_TYPE_BULK,
                 BULK_DATA_FS_IN_PACKET_SIZE);

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
 800776c:	2340      	movs	r3, #64	; 0x40
 800776e:	2202      	movs	r2, #2
 8007770:	2101      	movs	r1, #1
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fbea 	bl	8007f4c <USBD_LL_OpenEP>
                 BULK_OUT_EP,
                 USBD_EP_TYPE_BULK,
                 BULK_DATA_FS_OUT_PACKET_SIZE);

  /* Prepare Out endpoint to receive next packet */
  USBD_LL_PrepareReceive(pdev,
 8007778:	2340      	movs	r3, #64	; 0x40
 800777a:	4a05      	ldr	r2, [pc, #20]	; (8007790 <USBD_Bulk_Init+0x40>)
 800777c:	2101      	movs	r1, #1
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fd5e 	bl	8008240 <USBD_LL_PrepareReceive>
                         BULK_OUT_EP,
                         &USB_Rx_Buffer[0],
                         BULK_DATA_FS_OUT_PACKET_SIZE);
  
  return ret;
 8007784:	7bfb      	ldrb	r3, [r7, #15]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	2000101c 	.word	0x2000101c

08007794 <USBD_Bulk_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_Bulk_DeInit (USBD_HandleTypeDef *pdev,
                                  uint8_t cfgidx)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80077a0:	2300      	movs	r3, #0
 80077a2:	73fb      	strb	r3, [r7, #15]
  
  /* Close EP IN */
  USBD_LL_CloseEP(pdev, BULK_IN_EP);
 80077a4:	2181      	movs	r1, #129	; 0x81
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fc0e 	bl	8007fc8 <USBD_LL_CloseEP>
  
  /* lose EP OUT */
  USBD_LL_CloseEP(pdev, BULK_OUT_EP);
 80077ac:	2101      	movs	r1, #1
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fc0a 	bl	8007fc8 <USBD_LL_CloseEP>
  
  return ret;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <USBD_Bulk_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_Bulk_Setup (USBD_HandleTypeDef *pdev,
                                 USBD_SetupReqTypedef *req)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint16_t len=USB_BULK_DESC_SIZ;
 80077ca:	2317      	movs	r3, #23
 80077cc:	81fb      	strh	r3, [r7, #14]
  uint8_t  *pbuf=USBD_Bulk_CfgFSDesc + 9;
 80077ce:	4b2e      	ldr	r3, [pc, #184]	; (8007888 <USBD_Bulk_Setup+0xc8>)
 80077d0:	60bb      	str	r3, [r7, #8]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d016      	beq.n	800780c <USBD_Bulk_Setup+0x4c>
 80077de:	2b40      	cmp	r3, #64	; 0x40
 80077e0:	d14b      	bne.n	800787a <USBD_Bulk_Setup+0xba>
  {
#if (USBD_WINUSB_ENABLED == 1)
  case USB_REQ_TYPE_VENDOR:
    switch (req->bRequest)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	785b      	ldrb	r3, [r3, #1]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d10e      	bne.n	8007808 <USBD_Bulk_Setup+0x48>
    {
    case USB_BULK_MS_VENDORCODE: /* bMS_VendorCode */
      if (req->wIndex == 7) /*This is defined by the MS spec (Table 6)*/
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	889b      	ldrh	r3, [r3, #4]
 80077ee:	2b07      	cmp	r3, #7
 80077f0:	d10a      	bne.n	8007808 <USBD_Bulk_Setup+0x48>
      {
        pbuf = USBD_Bulk_MSOS20Desc;
 80077f2:	4b26      	ldr	r3, [pc, #152]	; (800788c <USBD_Bulk_Setup+0xcc>)
 80077f4:	60bb      	str	r3, [r7, #8]
        len = USB_LEN_MSOS20_DESC;
 80077f6:	239e      	movs	r3, #158	; 0x9e
 80077f8:	81fb      	strh	r3, [r7, #14]
        USBD_CtlSendData(pdev, pbuf, len);
 80077fa:	89fb      	ldrh	r3, [r7, #14]
 80077fc:	461a      	mov	r2, r3
 80077fe:	68b9      	ldr	r1, [r7, #8]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7fe fa43 	bl	8005c8c <USBD_CtlSendData>
        break;
 8007806:	e000      	b.n	800780a <USBD_Bulk_Setup+0x4a>
      }

    default:
      break;
 8007808:	bf00      	nop
    }
    break;
 800780a:	e037      	b.n	800787c <USBD_Bulk_Setup+0xbc>
#endif /* (USBD_WINUSB_ENABLED == 1) */

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	785b      	ldrb	r3, [r3, #1]
 8007810:	2b0b      	cmp	r3, #11
 8007812:	d021      	beq.n	8007858 <USBD_Bulk_Setup+0x98>
 8007814:	2b0b      	cmp	r3, #11
 8007816:	dc30      	bgt.n	800787a <USBD_Bulk_Setup+0xba>
 8007818:	2b06      	cmp	r3, #6
 800781a:	d002      	beq.n	8007822 <USBD_Bulk_Setup+0x62>
 800781c:	2b0a      	cmp	r3, #10
 800781e:	d015      	beq.n	800784c <USBD_Bulk_Setup+0x8c>
      }
      break;
    }
 
  default: 
    break;
 8007820:	e02b      	b.n	800787a <USBD_Bulk_Setup+0xba>
      if ( (req->wValue >> 8) == BULK_DESCRIPTOR_TYPE)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	885b      	ldrh	r3, [r3, #2]
 8007826:	0a1b      	lsrs	r3, r3, #8
 8007828:	b29b      	uxth	r3, r3
 800782a:	2b21      	cmp	r3, #33	; 0x21
 800782c:	d107      	bne.n	800783e <USBD_Bulk_Setup+0x7e>
        pbuf = USBD_Bulk_CfgFSDesc + 9 + (9 * USBD_MAX_NUM_INTERFACES);
 800782e:	4b18      	ldr	r3, [pc, #96]	; (8007890 <USBD_Bulk_Setup+0xd0>)
 8007830:	60bb      	str	r3, [r7, #8]
        len = MIN(USB_BULK_DESC_SIZ , req->wLength);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	88db      	ldrh	r3, [r3, #6]
 8007836:	2b17      	cmp	r3, #23
 8007838:	bf28      	it	cs
 800783a:	2317      	movcs	r3, #23
 800783c:	81fb      	strh	r3, [r7, #14]
      USBD_CtlSendData (pdev, pbuf, len);
 800783e:	89fb      	ldrh	r3, [r7, #14]
 8007840:	461a      	mov	r2, r3
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7fe fa21 	bl	8005c8c <USBD_CtlSendData>
      break;
 800784a:	e016      	b.n	800787a <USBD_Bulk_Setup+0xba>
      USBD_CtlSendData (pdev,
 800784c:	2201      	movs	r2, #1
 800784e:	4911      	ldr	r1, [pc, #68]	; (8007894 <USBD_Bulk_Setup+0xd4>)
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7fe fa1b 	bl	8005c8c <USBD_CtlSendData>
      break;
 8007856:	e010      	b.n	800787a <USBD_Bulk_Setup+0xba>
      if ((uint8_t)(req->wValue) < USBD_MAX_NUM_INTERFACES)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	885b      	ldrh	r3, [r3, #2]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <USBD_Bulk_Setup+0xb0>
        usbd_bulk_AltSet = (uint8_t)(req->wValue);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	885b      	ldrh	r3, [r3, #2]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	461a      	mov	r2, r3
 800786a:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <USBD_Bulk_Setup+0xd4>)
 800786c:	601a      	str	r2, [r3, #0]
      break;
 800786e:	e003      	b.n	8007878 <USBD_Bulk_Setup+0xb8>
        USBD_CtlError (pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7fe f999 	bl	8005baa <USBD_CtlError>
      break;
 8007878:	bf00      	nop
    break;
 800787a:	bf00      	nop
  }
  return USBD_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	20000059 	.word	0x20000059
 800788c:	20000070 	.word	0x20000070
 8007890:	20000062 	.word	0x20000062
 8007894:	20001018 	.word	0x20001018

08007898 <USBD_Bulk_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_Bulk_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
  /* endpoint finished the previous transmission so see if more data is left */
  UsbTransmitPipeBulkIN();
 80078a4:	f7fe ffd4 	bl	8006850 <UsbTransmitPipeBulkIN>
  return USBD_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <USBD_Bulk_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_Bulk_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	460b      	mov	r3, r1
 80078bc:	70fb      	strb	r3, [r7, #3]
  /* read the data from the bulk OUT pipe */
  UsbReceivePipeBulkOUT(epnum);
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7ff f809 	bl	80068d8 <UsbReceivePipeBulkOUT>
  return USBD_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USBD_Bulk_SOF>:
  *         Start Of Frame event management
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_Bulk_SOF (USBD_HandleTypeDef *pdev)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d101      	bne.n	80078e6 <USBD_Bulk_SOF+0x16>
  {
    /* Check the data to be sent through IN pipe */
    UsbTransmitPipeBulkIN();
 80078e2:	f7fe ffb5 	bl	8006850 <UsbTransmitPipeBulkIN>
  }
  return USBD_OK;
 80078e6:	2300      	movs	r3, #0

}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_Bulk_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_Bulk_GetFSCfgDesc (uint16_t *length)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Bulk_CfgFSDesc);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2220      	movs	r2, #32
 80078fc:	801a      	strh	r2, [r3, #0]
  return USBD_Bulk_CfgFSDesc;
 80078fe:	4b03      	ldr	r3, [pc, #12]	; (800790c <USBD_Bulk_GetFSCfgDesc+0x1c>)
}
 8007900:	4618      	mov	r0, r3
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	20000050 	.word	0x20000050

08007910 <USBD_Bulk_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_Bulk_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_Bulk_DeviceQualifierDesc);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	220a      	movs	r2, #10
 800791c:	801a      	strh	r2, [r3, #0]
  return USBD_Bulk_DeviceQualifierDesc;
 800791e:	4b03      	ldr	r3, [pc, #12]	; (800792c <USBD_Bulk_GetDeviceQualifierDescriptor+0x1c>)
}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	2000000c 	.word	0x2000000c

08007930 <USBD_Bulk_GetRxBufferPtr>:
/**
  * @brief  USBD_Bulk_GetRxBufferPtr
  * @retval Pointer to reception buffer.
  */
uint8_t * USBD_Bulk_GetRxBufferPtr(void)
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
  return &USB_Rx_Buffer[0];
 8007934:	4b02      	ldr	r3, [pc, #8]	; (8007940 <USBD_Bulk_GetRxBufferPtr+0x10>)
}
 8007936:	4618      	mov	r0, r3
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	2000101c 	.word	0x2000101c

08007944 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	6039      	str	r1, [r7, #0]
 800794e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2212      	movs	r2, #18
 8007954:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007956:	4b03      	ldr	r3, [pc, #12]	; (8007964 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	20000130 	.word	0x20000130

08007968 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	4603      	mov	r3, r0
 8007970:	6039      	str	r1, [r7, #0]
 8007972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	2204      	movs	r2, #4
 8007978:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800797a:	4b03      	ldr	r3, [pc, #12]	; (8007988 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	20000168 	.word	0x20000168

0800798c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	6039      	str	r1, [r7, #0]
 8007996:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007998:	79fb      	ldrb	r3, [r7, #7]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d105      	bne.n	80079aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	4907      	ldr	r1, [pc, #28]	; (80079c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80079a2:	4808      	ldr	r0, [pc, #32]	; (80079c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80079a4:	f7fe f912 	bl	8005bcc <USBD_GetString>
 80079a8:	e004      	b.n	80079b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	4904      	ldr	r1, [pc, #16]	; (80079c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80079ae:	4805      	ldr	r0, [pc, #20]	; (80079c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80079b0:	f7fe f90c 	bl	8005bcc <USBD_GetString>
  }
  return USBD_StrDesc;
 80079b4:	4b02      	ldr	r3, [pc, #8]	; (80079c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	2000105c 	.word	0x2000105c
 80079c4:	0800837c 	.word	0x0800837c

080079c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	6039      	str	r1, [r7, #0]
 80079d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	4904      	ldr	r1, [pc, #16]	; (80079e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80079d8:	4804      	ldr	r0, [pc, #16]	; (80079ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80079da:	f7fe f8f7 	bl	8005bcc <USBD_GetString>
  return USBD_StrDesc;
 80079de:	4b02      	ldr	r3, [pc, #8]	; (80079e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	2000105c 	.word	0x2000105c
 80079ec:	08008390 	.word	0x08008390

080079f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	6039      	str	r1, [r7, #0]
 80079fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	221a      	movs	r2, #26
 8007a00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a02:	f000 f855 	bl	8007ab0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a06:	4b02      	ldr	r3, [pc, #8]	; (8007a10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	2000016c 	.word	0x2000016c

08007a14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	6039      	str	r1, [r7, #0]
 8007a1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a20:	79fb      	ldrb	r3, [r7, #7]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d105      	bne.n	8007a32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	4907      	ldr	r1, [pc, #28]	; (8007a48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a2a:	4808      	ldr	r0, [pc, #32]	; (8007a4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a2c:	f7fe f8ce 	bl	8005bcc <USBD_GetString>
 8007a30:	e004      	b.n	8007a3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	4904      	ldr	r1, [pc, #16]	; (8007a48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a36:	4805      	ldr	r0, [pc, #20]	; (8007a4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a38:	f7fe f8c8 	bl	8005bcc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a3c:	4b02      	ldr	r3, [pc, #8]	; (8007a48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	2000105c 	.word	0x2000105c
 8007a4c:	080083a0 	.word	0x080083a0

08007a50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	4603      	mov	r3, r0
 8007a58:	6039      	str	r1, [r7, #0]
 8007a5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a5c:	79fb      	ldrb	r3, [r7, #7]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d105      	bne.n	8007a6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	4907      	ldr	r1, [pc, #28]	; (8007a84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a66:	4808      	ldr	r0, [pc, #32]	; (8007a88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a68:	f7fe f8b0 	bl	8005bcc <USBD_GetString>
 8007a6c:	e004      	b.n	8007a78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	4904      	ldr	r1, [pc, #16]	; (8007a84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a72:	4805      	ldr	r0, [pc, #20]	; (8007a88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a74:	f7fe f8aa 	bl	8005bcc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a78:	4b02      	ldr	r3, [pc, #8]	; (8007a84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	2000105c 	.word	0x2000105c
 8007a88:	080083a8 	.word	0x080083a8

08007a8c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	6039      	str	r1, [r7, #0]
 8007a96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2221      	movs	r2, #33	; 0x21
 8007a9c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007a9e:	4b03      	ldr	r3, [pc, #12]	; (8007aac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	20000144 	.word	0x20000144

08007ab0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007ab6:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <Get_SerialNum+0x44>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007abc:	4b0e      	ldr	r3, [pc, #56]	; (8007af8 <Get_SerialNum+0x48>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007ac2:	4b0e      	ldr	r3, [pc, #56]	; (8007afc <Get_SerialNum+0x4c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4413      	add	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d009      	beq.n	8007aea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ad6:	2208      	movs	r2, #8
 8007ad8:	4909      	ldr	r1, [pc, #36]	; (8007b00 <Get_SerialNum+0x50>)
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f000 f814 	bl	8007b08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ae0:	2204      	movs	r2, #4
 8007ae2:	4908      	ldr	r1, [pc, #32]	; (8007b04 <Get_SerialNum+0x54>)
 8007ae4:	68b8      	ldr	r0, [r7, #8]
 8007ae6:	f000 f80f 	bl	8007b08 <IntToUnicode>
  }
}
 8007aea:	bf00      	nop
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	1fff7a10 	.word	0x1fff7a10
 8007af8:	1fff7a14 	.word	0x1fff7a14
 8007afc:	1fff7a18 	.word	0x1fff7a18
 8007b00:	2000016e 	.word	0x2000016e
 8007b04:	2000017e 	.word	0x2000017e

08007b08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	75fb      	strb	r3, [r7, #23]
 8007b1e:	e027      	b.n	8007b70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	0f1b      	lsrs	r3, r3, #28
 8007b24:	2b09      	cmp	r3, #9
 8007b26:	d80b      	bhi.n	8007b40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	0f1b      	lsrs	r3, r3, #28
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	7dfb      	ldrb	r3, [r7, #23]
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	4619      	mov	r1, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	440b      	add	r3, r1
 8007b38:	3230      	adds	r2, #48	; 0x30
 8007b3a:	b2d2      	uxtb	r2, r2
 8007b3c:	701a      	strb	r2, [r3, #0]
 8007b3e:	e00a      	b.n	8007b56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	0f1b      	lsrs	r3, r3, #28
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	440b      	add	r3, r1
 8007b50:	3237      	adds	r2, #55	; 0x37
 8007b52:	b2d2      	uxtb	r2, r2
 8007b54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	011b      	lsls	r3, r3, #4
 8007b5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	3301      	adds	r3, #1
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	4413      	add	r3, r2
 8007b66:	2200      	movs	r2, #0
 8007b68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	75fb      	strb	r3, [r7, #23]
 8007b70:	7dfa      	ldrb	r2, [r7, #23]
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d3d3      	bcc.n	8007b20 <IntToUnicode+0x18>
  }
}
 8007b78:	bf00      	nop
 8007b7a:	bf00      	nop
 8007b7c:	371c      	adds	r7, #28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b082      	sub	sp, #8
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	f7fd f859 	bl	8004c54 <USBD_LL_SetupStage>
}
 8007ba2:	bf00      	nop
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007bbc:	78fa      	ldrb	r2, [r7, #3]
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	440b      	add	r3, r1
 8007bca:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	f7fd f893 	bl	8004cfe <USBD_LL_DataOutStage>
}
 8007bd8:	bf00      	nop
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007bf2:	78fa      	ldrb	r2, [r7, #3]
 8007bf4:	6879      	ldr	r1, [r7, #4]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	00db      	lsls	r3, r3, #3
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	440b      	add	r3, r1
 8007c00:	334c      	adds	r3, #76	; 0x4c
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	78fb      	ldrb	r3, [r7, #3]
 8007c06:	4619      	mov	r1, r3
 8007c08:	f7fd f8dc 	bl	8004dc4 <USBD_LL_DataInStage>
}
 8007c0c:	bf00      	nop
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fd f9e0 	bl	8004fe8 <USBD_LL_SOF>
}
 8007c28:	bf00      	nop
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <HAL_PCD_ResetCallback+0x1a>
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d003      	beq.n	8007c50 <HAL_PCD_ResetCallback+0x20>
 8007c48:	e005      	b.n	8007c56 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c4e:	e005      	b.n	8007c5c <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8007c50:	2301      	movs	r3, #1
 8007c52:	73fb      	strb	r3, [r7, #15]
    break;
 8007c54:	e002      	b.n	8007c5c <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 8007c56:	2301      	movs	r3, #1
 8007c58:	73fb      	strb	r3, [r7, #15]
    break;    
 8007c5a:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c62:	7bfa      	ldrb	r2, [r7, #15]
 8007c64:	4611      	mov	r1, r2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fd f983 	bl	8004f72 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fd f93c 	bl	8004ef0 <USBD_LL_Reset>
}
 8007c78:	bf00      	nop
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fd f97f 	bl	8004f92 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6812      	ldr	r2, [r2, #0]
 8007ca2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ca6:	f043 0301 	orr.w	r3, r3, #1
 8007caa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d005      	beq.n	8007cc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cb4:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <HAL_PCD_SuspendCallback+0x4c>)
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	4a04      	ldr	r2, [pc, #16]	; (8007ccc <HAL_PCD_SuspendCallback+0x4c>)
 8007cba:	f043 0306 	orr.w	r3, r3, #6
 8007cbe:	6113      	str	r3, [r2, #16]
  }
  /* Inform application that the USB entered low power mode. */
  UsbEnterLowPowerModeHook();
 8007cc0:	f7f8 fb20 	bl	8000304 <UsbEnterLowPowerModeHook>
  /* USER CODE END 2 */
}
 8007cc4:	bf00      	nop
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	e000ed00 	.word	0xe000ed00

08007cd0 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* Inform application that the USB left low power mode. */
  UsbLeaveLowPowerModeHook();
 8007cd8:	f7f8 fb1b 	bl	8000312 <UsbLeaveLowPowerModeHook>
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fd f96a 	bl	8004fbc <USBD_LL_Resume>
}
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d02:	78fa      	ldrb	r2, [r7, #3]
 8007d04:	4611      	mov	r1, r2
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fd f995 	bl	8005036 <USBD_LL_IsoOUTIncomplete>
}
 8007d0c:	bf00      	nop
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d26:	78fa      	ldrb	r2, [r7, #3]
 8007d28:	4611      	mov	r1, r2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fd f976 	bl	800501c <USBD_LL_IsoINIncomplete>
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Configure Low connection state. */
  UsbConnectHook(BLT_TRUE);
 8007d40:	2001      	movs	r0, #1
 8007d42:	f7f8 faa9 	bl	8000298 <UsbConnectHook>
  /* Inform lower layer. */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fd f97f 	bl	8005050 <USBD_LL_DevConnected>
}
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b082      	sub	sp, #8
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  /* Configure High connection state. */
  UsbConnectHook(BLT_FALSE);
 8007d62:	2000      	movs	r0, #0
 8007d64:	f7f8 fa98 	bl	8000298 <UsbConnectHook>
  /* Inform lower layer. */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fd f979 	bl	8005066 <USBD_LL_DevDisconnected>
}
 8007d74:	bf00      	nop
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d13f      	bne.n	8007e0c <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d8c:	4a22      	ldr	r2, [pc, #136]	; (8007e18 <USBD_LL_Init+0x9c>)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a20      	ldr	r2, [pc, #128]	; (8007e18 <USBD_LL_Init+0x9c>)
 8007d98:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d9c:	4b1e      	ldr	r3, [pc, #120]	; (8007e18 <USBD_LL_Init+0x9c>)
 8007d9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007da2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007da4:	4b1c      	ldr	r3, [pc, #112]	; (8007e18 <USBD_LL_Init+0x9c>)
 8007da6:	2204      	movs	r2, #4
 8007da8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007daa:	4b1b      	ldr	r3, [pc, #108]	; (8007e18 <USBD_LL_Init+0x9c>)
 8007dac:	2202      	movs	r2, #2
 8007dae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007db0:	4b19      	ldr	r3, [pc, #100]	; (8007e18 <USBD_LL_Init+0x9c>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007db6:	4b18      	ldr	r3, [pc, #96]	; (8007e18 <USBD_LL_Init+0x9c>)
 8007db8:	2202      	movs	r2, #2
 8007dba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8007dbc:	4b16      	ldr	r3, [pc, #88]	; (8007e18 <USBD_LL_Init+0x9c>)
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007dc2:	4b15      	ldr	r3, [pc, #84]	; (8007e18 <USBD_LL_Init+0x9c>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007dc8:	4b13      	ldr	r3, [pc, #76]	; (8007e18 <USBD_LL_Init+0x9c>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007dce:	4b12      	ldr	r3, [pc, #72]	; (8007e18 <USBD_LL_Init+0x9c>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007dd4:	4b10      	ldr	r3, [pc, #64]	; (8007e18 <USBD_LL_Init+0x9c>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007dda:	480f      	ldr	r0, [pc, #60]	; (8007e18 <USBD_LL_Init+0x9c>)
 8007ddc:	f7f9 fcfc 	bl	80017d8 <HAL_PCD_Init>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <USBD_LL_Init+0x74>
  {
    ASSERT_RT(BLT_FALSE);
 8007de6:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8007dea:	480c      	ldr	r0, [pc, #48]	; (8007e1c <USBD_LL_Init+0xa0>)
 8007dec:	f7fe ff38 	bl	8006c60 <AssertFailure>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007df0:	2180      	movs	r1, #128	; 0x80
 8007df2:	4809      	ldr	r0, [pc, #36]	; (8007e18 <USBD_LL_Init+0x9c>)
 8007df4:	f7fb f809 	bl	8002e0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007df8:	2240      	movs	r2, #64	; 0x40
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	4806      	ldr	r0, [pc, #24]	; (8007e18 <USBD_LL_Init+0x9c>)
 8007dfe:	f7fa ffbd 	bl	8002d7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e02:	2280      	movs	r2, #128	; 0x80
 8007e04:	2101      	movs	r1, #1
 8007e06:	4804      	ldr	r0, [pc, #16]	; (8007e18 <USBD_LL_Init+0x9c>)
 8007e08:	f7fa ffb8 	bl	8002d7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	200001a8 	.word	0x200001a8
 8007e1c:	080083c0 	.word	0x080083c0

08007e20 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7f9 fdeb 	bl	8001a12 <HAL_PCD_DeInit>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d816      	bhi.n	8007e74 <USBD_LL_DeInit+0x54>
 8007e46:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <USBD_LL_DeInit+0x2c>)
 8007e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4c:	08007e5d 	.word	0x08007e5d
 8007e50:	08007e63 	.word	0x08007e63
 8007e54:	08007e69 	.word	0x08007e69
 8007e58:	08007e6f 	.word	0x08007e6f
    case HAL_OK :
      usb_status = USBD_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e60:	e00b      	b.n	8007e7a <USBD_LL_DeInit+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e62:	2303      	movs	r3, #3
 8007e64:	73fb      	strb	r3, [r7, #15]
    break;
 8007e66:	e008      	b.n	8007e7a <USBD_LL_DeInit+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e6c:	e005      	b.n	8007e7a <USBD_LL_DeInit+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	73fb      	strb	r3, [r7, #15]
    break;
 8007e72:	e002      	b.n	8007e7a <USBD_LL_DeInit+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007e74:	2303      	movs	r3, #3
 8007e76:	73fb      	strb	r3, [r7, #15]
    break;
 8007e78:	bf00      	nop
  }
  return usb_status; 
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7f9 fddc 	bl	8001a58 <HAL_PCD_Start>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d816      	bhi.n	8007ed8 <USBD_LL_Start+0x54>
 8007eaa:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <USBD_LL_Start+0x2c>)
 8007eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb0:	08007ec1 	.word	0x08007ec1
 8007eb4:	08007ec7 	.word	0x08007ec7
 8007eb8:	08007ecd 	.word	0x08007ecd
 8007ebc:	08007ed3 	.word	0x08007ed3
    case HAL_OK :
      usb_status = USBD_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ec4:	e00b      	b.n	8007ede <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	73fb      	strb	r3, [r7, #15]
    break;
 8007eca:	e008      	b.n	8007ede <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed0:	e005      	b.n	8007ede <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed6:	e002      	b.n	8007ede <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	73fb      	strb	r3, [r7, #15]
    break;
 8007edc:	bf00      	nop
  }
  return usb_status;
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7f9 fddd 	bl	8001abe <HAL_PCD_Stop>
 8007f04:	4603      	mov	r3, r0
 8007f06:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d816      	bhi.n	8007f3c <USBD_LL_Stop+0x54>
 8007f0e:	a201      	add	r2, pc, #4	; (adr r2, 8007f14 <USBD_LL_Stop+0x2c>)
 8007f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f14:	08007f25 	.word	0x08007f25
 8007f18:	08007f2b 	.word	0x08007f2b
 8007f1c:	08007f31 	.word	0x08007f31
 8007f20:	08007f37 	.word	0x08007f37
    case HAL_OK :
      usb_status = USBD_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	73fb      	strb	r3, [r7, #15]
    break;
 8007f28:	e00b      	b.n	8007f42 <USBD_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f2e:	e008      	b.n	8007f42 <USBD_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f30:	2301      	movs	r3, #1
 8007f32:	73fb      	strb	r3, [r7, #15]
    break;
 8007f34:	e005      	b.n	8007f42 <USBD_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f36:	2303      	movs	r3, #3
 8007f38:	73fb      	strb	r3, [r7, #15]
    break;
 8007f3a:	e002      	b.n	8007f42 <USBD_LL_Stop+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f40:	bf00      	nop
  }
  return usb_status;
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	4608      	mov	r0, r1
 8007f56:	4611      	mov	r1, r2
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	70fb      	strb	r3, [r7, #3]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	70bb      	strb	r3, [r7, #2]
 8007f62:	4613      	mov	r3, r2
 8007f64:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f66:	2300      	movs	r3, #0
 8007f68:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f74:	78bb      	ldrb	r3, [r7, #2]
 8007f76:	883a      	ldrh	r2, [r7, #0]
 8007f78:	78f9      	ldrb	r1, [r7, #3]
 8007f7a:	f7fa faf9 	bl	8002570 <HAL_PCD_EP_Open>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d817      	bhi.n	8007fb8 <USBD_LL_OpenEP+0x6c>
 8007f88:	a201      	add	r2, pc, #4	; (adr r2, 8007f90 <USBD_LL_OpenEP+0x44>)
 8007f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8e:	bf00      	nop
 8007f90:	08007fa1 	.word	0x08007fa1
 8007f94:	08007fa7 	.word	0x08007fa7
 8007f98:	08007fad 	.word	0x08007fad
 8007f9c:	08007fb3 	.word	0x08007fb3
    case HAL_OK :
      usb_status = USBD_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa4:	e00b      	b.n	8007fbe <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	73fb      	strb	r3, [r7, #15]
    break;
 8007faa:	e008      	b.n	8007fbe <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fac:	2301      	movs	r3, #1
 8007fae:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb0:	e005      	b.n	8007fbe <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb6:	e002      	b.n	8007fbe <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	73fb      	strb	r3, [r7, #15]
    break;
 8007fbc:	bf00      	nop
  }
  return usb_status;
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fe2:	78fa      	ldrb	r2, [r7, #3]
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fa fb2a 	bl	8002640 <HAL_PCD_EP_Close>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d816      	bhi.n	8008024 <USBD_LL_CloseEP+0x5c>
 8007ff6:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <USBD_LL_CloseEP+0x34>)
 8007ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffc:	0800800d 	.word	0x0800800d
 8008000:	08008013 	.word	0x08008013
 8008004:	08008019 	.word	0x08008019
 8008008:	0800801f 	.word	0x0800801f
    case HAL_OK :
      usb_status = USBD_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	73fb      	strb	r3, [r7, #15]
    break;
 8008010:	e00b      	b.n	800802a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008012:	2303      	movs	r3, #3
 8008014:	73fb      	strb	r3, [r7, #15]
    break;
 8008016:	e008      	b.n	800802a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008018:	2301      	movs	r3, #1
 800801a:	73fb      	strb	r3, [r7, #15]
    break;
 800801c:	e005      	b.n	800802a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800801e:	2303      	movs	r3, #3
 8008020:	73fb      	strb	r3, [r7, #15]
    break;
 8008022:	e002      	b.n	800802a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008024:	2303      	movs	r3, #3
 8008026:	73fb      	strb	r3, [r7, #15]
    break;
 8008028:	bf00      	nop
  }
  return usb_status;  
 800802a:	7bfb      	ldrb	r3, [r7, #15]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	4611      	mov	r1, r2
 8008052:	4618      	mov	r0, r3
 8008054:	f7fa fbeb 	bl	800282e <HAL_PCD_EP_SetStall>
 8008058:	4603      	mov	r3, r0
 800805a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b03      	cmp	r3, #3
 8008060:	d816      	bhi.n	8008090 <USBD_LL_StallEP+0x5c>
 8008062:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <USBD_LL_StallEP+0x34>)
 8008064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008068:	08008079 	.word	0x08008079
 800806c:	0800807f 	.word	0x0800807f
 8008070:	08008085 	.word	0x08008085
 8008074:	0800808b 	.word	0x0800808b
    case HAL_OK :
      usb_status = USBD_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
    break;
 800807c:	e00b      	b.n	8008096 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800807e:	2303      	movs	r3, #3
 8008080:	73fb      	strb	r3, [r7, #15]
    break;
 8008082:	e008      	b.n	8008096 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008084:	2301      	movs	r3, #1
 8008086:	73fb      	strb	r3, [r7, #15]
    break;
 8008088:	e005      	b.n	8008096 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800808a:	2303      	movs	r3, #3
 800808c:	73fb      	strb	r3, [r7, #15]
    break;
 800808e:	e002      	b.n	8008096 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008090:	2303      	movs	r3, #3
 8008092:	73fb      	strb	r3, [r7, #15]
    break;
 8008094:	bf00      	nop
  }
  return usb_status;  
 8008096:	7bfb      	ldrb	r3, [r7, #15]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080ba:	78fa      	ldrb	r2, [r7, #3]
 80080bc:	4611      	mov	r1, r2
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fa fc19 	bl	80028f6 <HAL_PCD_EP_ClrStall>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d816      	bhi.n	80080fc <USBD_LL_ClearStallEP+0x5c>
 80080ce:	a201      	add	r2, pc, #4	; (adr r2, 80080d4 <USBD_LL_ClearStallEP+0x34>)
 80080d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d4:	080080e5 	.word	0x080080e5
 80080d8:	080080eb 	.word	0x080080eb
 80080dc:	080080f1 	.word	0x080080f1
 80080e0:	080080f7 	.word	0x080080f7
    case HAL_OK :
      usb_status = USBD_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	73fb      	strb	r3, [r7, #15]
    break;
 80080e8:	e00b      	b.n	8008102 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080ea:	2303      	movs	r3, #3
 80080ec:	73fb      	strb	r3, [r7, #15]
    break;
 80080ee:	e008      	b.n	8008102 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080f0:	2301      	movs	r3, #1
 80080f2:	73fb      	strb	r3, [r7, #15]
    break;
 80080f4:	e005      	b.n	8008102 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080f6:	2303      	movs	r3, #3
 80080f8:	73fb      	strb	r3, [r7, #15]
    break;
 80080fa:	e002      	b.n	8008102 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80080fc:	2303      	movs	r3, #3
 80080fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008100:	bf00      	nop
  }
  return usb_status; 
 8008102:	7bfb      	ldrb	r3, [r7, #15]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800811e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008124:	2b00      	cmp	r3, #0
 8008126:	da0b      	bge.n	8008140 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800812e:	68f9      	ldr	r1, [r7, #12]
 8008130:	4613      	mov	r3, r2
 8008132:	00db      	lsls	r3, r3, #3
 8008134:	4413      	add	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	440b      	add	r3, r1
 800813a:	333e      	adds	r3, #62	; 0x3e
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	e00b      	b.n	8008158 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008146:	68f9      	ldr	r1, [r7, #12]
 8008148:	4613      	mov	r3, r2
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	440b      	add	r3, r1
 8008152:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008156:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	460b      	mov	r3, r1
 800816e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800817e:	78fa      	ldrb	r2, [r7, #3]
 8008180:	4611      	mov	r1, r2
 8008182:	4618      	mov	r0, r3
 8008184:	f7fa f9cf 	bl	8002526 <HAL_PCD_SetAddress>
 8008188:	4603      	mov	r3, r0
 800818a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	2b03      	cmp	r3, #3
 8008190:	d816      	bhi.n	80081c0 <USBD_LL_SetUSBAddress+0x5c>
 8008192:	a201      	add	r2, pc, #4	; (adr r2, 8008198 <USBD_LL_SetUSBAddress+0x34>)
 8008194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008198:	080081a9 	.word	0x080081a9
 800819c:	080081af 	.word	0x080081af
 80081a0:	080081b5 	.word	0x080081b5
 80081a4:	080081bb 	.word	0x080081bb
    case HAL_OK :
      usb_status = USBD_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73fb      	strb	r3, [r7, #15]
    break;
 80081ac:	e00b      	b.n	80081c6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081ae:	2303      	movs	r3, #3
 80081b0:	73fb      	strb	r3, [r7, #15]
    break;
 80081b2:	e008      	b.n	80081c6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081b4:	2301      	movs	r3, #1
 80081b6:	73fb      	strb	r3, [r7, #15]
    break;
 80081b8:	e005      	b.n	80081c6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081ba:	2303      	movs	r3, #3
 80081bc:	73fb      	strb	r3, [r7, #15]
    break;
 80081be:	e002      	b.n	80081c6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80081c0:	2303      	movs	r3, #3
 80081c2:	73fb      	strb	r3, [r7, #15]
    break;
 80081c4:	bf00      	nop
  }
  return usb_status;  
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	607a      	str	r2, [r7, #4]
 80081da:	603b      	str	r3, [r7, #0]
 80081dc:	460b      	mov	r3, r1
 80081de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80081ee:	7af9      	ldrb	r1, [r7, #11]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	f7fa fad1 	bl	800279a <HAL_PCD_EP_Transmit>
 80081f8:	4603      	mov	r3, r0
 80081fa:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80081fc:	7dbb      	ldrb	r3, [r7, #22]
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d816      	bhi.n	8008230 <USBD_LL_Transmit+0x60>
 8008202:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <USBD_LL_Transmit+0x38>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	08008219 	.word	0x08008219
 800820c:	0800821f 	.word	0x0800821f
 8008210:	08008225 	.word	0x08008225
 8008214:	0800822b 	.word	0x0800822b
    case HAL_OK :
      usb_status = USBD_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	75fb      	strb	r3, [r7, #23]
    break;
 800821c:	e00b      	b.n	8008236 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800821e:	2303      	movs	r3, #3
 8008220:	75fb      	strb	r3, [r7, #23]
    break;
 8008222:	e008      	b.n	8008236 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008224:	2301      	movs	r3, #1
 8008226:	75fb      	strb	r3, [r7, #23]
    break;
 8008228:	e005      	b.n	8008236 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800822a:	2303      	movs	r3, #3
 800822c:	75fb      	strb	r3, [r7, #23]
    break;
 800822e:	e002      	b.n	8008236 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008230:	2303      	movs	r3, #3
 8008232:	75fb      	strb	r3, [r7, #23]
    break;
 8008234:	bf00      	nop
  }
  return usb_status;    
 8008236:	7dfb      	ldrb	r3, [r7, #23]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	607a      	str	r2, [r7, #4]
 800824a:	603b      	str	r3, [r7, #0]
 800824c:	460b      	mov	r3, r1
 800824e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800825e:	7af9      	ldrb	r1, [r7, #11]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	f7fa fa36 	bl	80026d4 <HAL_PCD_EP_Receive>
 8008268:	4603      	mov	r3, r0
 800826a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800826c:	7dbb      	ldrb	r3, [r7, #22]
 800826e:	2b03      	cmp	r3, #3
 8008270:	d816      	bhi.n	80082a0 <USBD_LL_PrepareReceive+0x60>
 8008272:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <USBD_LL_PrepareReceive+0x38>)
 8008274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008278:	08008289 	.word	0x08008289
 800827c:	0800828f 	.word	0x0800828f
 8008280:	08008295 	.word	0x08008295
 8008284:	0800829b 	.word	0x0800829b
    case HAL_OK :
      usb_status = USBD_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	75fb      	strb	r3, [r7, #23]
    break;
 800828c:	e00b      	b.n	80082a6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800828e:	2303      	movs	r3, #3
 8008290:	75fb      	strb	r3, [r7, #23]
    break;
 8008292:	e008      	b.n	80082a6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008294:	2301      	movs	r3, #1
 8008296:	75fb      	strb	r3, [r7, #23]
    break;
 8008298:	e005      	b.n	80082a6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800829a:	2303      	movs	r3, #3
 800829c:	75fb      	strb	r3, [r7, #23]
    break;
 800829e:	e002      	b.n	80082a6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80082a0:	2303      	movs	r3, #3
 80082a2:	75fb      	strb	r3, [r7, #23]
    break;
 80082a4:	bf00      	nop
  }
  return usb_status; 
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	4611      	mov	r1, r2
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fa fa4f 	bl	800276a <HAL_PCD_EP_GetRxCount>
 80082cc:	4603      	mov	r3, r0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
	...

080082d8 <__libc_init_array>:
 80082d8:	b570      	push	{r4, r5, r6, lr}
 80082da:	4d0d      	ldr	r5, [pc, #52]	; (8008310 <__libc_init_array+0x38>)
 80082dc:	4c0d      	ldr	r4, [pc, #52]	; (8008314 <__libc_init_array+0x3c>)
 80082de:	1b64      	subs	r4, r4, r5
 80082e0:	10a4      	asrs	r4, r4, #2
 80082e2:	2600      	movs	r6, #0
 80082e4:	42a6      	cmp	r6, r4
 80082e6:	d109      	bne.n	80082fc <__libc_init_array+0x24>
 80082e8:	4d0b      	ldr	r5, [pc, #44]	; (8008318 <__libc_init_array+0x40>)
 80082ea:	4c0c      	ldr	r4, [pc, #48]	; (800831c <__libc_init_array+0x44>)
 80082ec:	f000 f818 	bl	8008320 <_init>
 80082f0:	1b64      	subs	r4, r4, r5
 80082f2:	10a4      	asrs	r4, r4, #2
 80082f4:	2600      	movs	r6, #0
 80082f6:	42a6      	cmp	r6, r4
 80082f8:	d105      	bne.n	8008306 <__libc_init_array+0x2e>
 80082fa:	bd70      	pop	{r4, r5, r6, pc}
 80082fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008300:	4798      	blx	r3
 8008302:	3601      	adds	r6, #1
 8008304:	e7ee      	b.n	80082e4 <__libc_init_array+0xc>
 8008306:	f855 3b04 	ldr.w	r3, [r5], #4
 800830a:	4798      	blx	r3
 800830c:	3601      	adds	r6, #1
 800830e:	e7f2      	b.n	80082f6 <__libc_init_array+0x1e>
 8008310:	08008428 	.word	0x08008428
 8008314:	08008428 	.word	0x08008428
 8008318:	08008428 	.word	0x08008428
 800831c:	0800842c 	.word	0x0800842c

08008320 <_init>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	bf00      	nop
 8008324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008326:	bc08      	pop	{r3}
 8008328:	469e      	mov	lr, r3
 800832a:	4770      	bx	lr

0800832c <_fini>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	bf00      	nop
 8008330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008332:	bc08      	pop	{r3}
 8008334:	469e      	mov	lr, r3
 8008336:	4770      	bx	lr
